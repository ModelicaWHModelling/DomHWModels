
//Reads inputs in from file the CalibrationInput.csv and assigns the values to the matrix CalibrationParameters. This file will be used to store/transfer parameters between simulations
CalibrationParameters = DataFiles.readCSVmatrix("CalibrationInput.csv");

for i in 1:10 loop

//	Design.Calibration.calibrate(Design.Internal.Records.ModelCalibrationSetup(Model="WaterHeaterLib.Examples.WaterHeaterCalibration", tunerParameters={Design.Internal.Records.TunerParameter(name="tan.h_cw_B_cons", Value=CalibrationParameters[1,1], min=0, max=700)}, calibrationData=Design.Calibration.Internal.Dynamic_common(Design.Internal.Records.DynamicCommonCalibrationCases(experimentNames={"C:/Program Files (x86)/Dymola 2012 FD01/Models/WaterHeater/current/modeling/branches/pgrant/PlainStorageWaterHeater/StorageTankCalibrationData.csv"}, task={1}, startTime={150}, stopTime={1000}, parameterNames={"burn.h_GB", "tan.h_WF_cons", "tan.c_wI", "tan.h_cv_F"}, parameterValues=[CalibrationParameters[1,2], CalibrationParameters[1,3], CalibrationParameters[1,4], CalibrationParameters[1,5]]), resultCouplings={Design.Internal.Records.DynamicCalibrationResultCoupling(variable="tan.T_F[10]", data="T_F,Entrance")})));

	//This section reads the results of the calibration, and prints all of the characterization variables to a .csv file. It then reads the characterization variables back into Dymola so that they can be used in the next characterization simulation.
//	simulateModel("",resultFile="test");
//	fileName = "test.mat";
//	CSVfile = "CalibrationInput.csv";
//	n = 1;
//	names={"tan.h_cw_B_cons","burn.h_GB","tan.h_WF_cons","tan.c_wI","tan.h_cv_F"};
//	traj=readTrajectory(fileName,names,n);
//	traj_transposed = transpose(traj);
//	DataFiles.writeCSVmatrix(CSVfile, names, traj_transposed);
//	CalibrationParameters = DataFiles.readCSVmatrix("CalibrationInput.csv");

//	Design.Calibration.calibrate(Design.Internal.Records.ModelCalibrationSetup(Model="WaterHeaterLib.Examples.WaterHeaterCalibration", tunerParameters={Design.Internal.Records.TunerParameter(name="burn.h_GB", Value=CalibrationParameters[1,2], min=0, max=1000)}, calibrationData=Design.Calibration.Internal.Dynamic_common(Design.Internal.Records.DynamicCommonCalibrationCases(experimentNames={"C:/Program Files (x86)/Dymola 2012 FD01/Models/WaterHeater/current/modeling/branches/pgrant/PlainStorageWaterHeater/StorageTankCalibrationData.csv"}, task={1}, startTime={150}, stopTime={1000}, parameterNames={"tan.h_cw_B_cons", "tan.h_WF_cons", "tan.c_wI", "tan.h_cv_F"}, parameterValues=[CalibrationParameters[1,1], CalibrationParameters[1,3], CalibrationParameters[1,4], CalibrationParameters[1,5]]), resultCouplings={Design.Internal.Records.DynamicCalibrationResultCoupling(variable="tan.T_F[10]", data="T_F,Entrance")})));

	//This section reads the results of the calibration, and prints all of the characterization variables to a .csv file. It then reads the characterization variables back into Dymola so that they can be used in the next characterization simulation.
//	simulateModel("",resultFile="test");
//	fileName = "test.mat";
//	CSVfile = "CalibrationInput.csv";
//	n = 1;
//	names={"tan.h_cw_B_cons","burn.h_GB","tan.h_WF_cons","tan.c_wI","tan.h_cv_F"};
//	traj=readTrajectory(fileName,names,n);
//	traj_transposed = transpose(traj);
//	DataFiles.writeCSVmatrix(CSVfile, names, traj_transposed);
//	CalibrationParameters = DataFiles.readCSVmatrix("CalibrationInput.csv");

//	Design.Calibration.calibrate(Design.Internal.Records.ModelCalibrationSetup(Model="WaterHeaterLib.Examples.WaterHeaterCalibration", tunerParameters={Design.Internal.Records.TunerParameter(name="tan.h_cv_F", Value=CalibrationParameters[1,5], min=2, max=100)}, calibrationData=Design.Calibration.Internal.Dynamic_common(Design.Internal.Records.DynamicCommonCalibrationCases(experimentNames={"C:/Program Files (x86)/Dymola 2012 FD01/Models/WaterHeater/current/modeling/branches/pgrant/PlainStorageWaterHeater/StorageTankCalibrationData.csv"}, task={1}, startTime={150}, stopTime={1000}, parameterNames={"tan.h_cw_B_cons", "burn.h_GB", "tan.c_wI", "tan.h_WF_cons"}, parameterValues=[CalibrationParameters[1,1], CalibrationParameters[1,2], CalibrationParameters[1,3], CalibrationParameters[1,4]]), resultCouplings={Design.Internal.Records.DynamicCalibrationResultCoupling(variable="tan.T_F[1]", data="T_F,Exit")})));

	//This section reads the results of the calibration, and prints all of the characterization variables to a .csv file. It then reads the characterization variables back into Dymola so that they can be used in the next characterization simulation.
//	simulateModel("",resultFile="test");
//	fileName = "test.mat";
//	CSVfile = "CalibrationInput.csv";
//	n = 1;
//	names={"tan.h_cw_B_cons","burn.h_GB","tan.h_WF_cons","tan.c_wI","tan.h_cv_F"};
//	traj=readTrajectory(fileName,names,n);
//	traj_transposed = transpose(traj);
//	DataFiles.writeCSVmatrix(CSVfile, names, traj_transposed);
//	CalibrationParameters = DataFiles.readCSVmatrix("CalibrationInput.csv");

	Design.Calibration.calibrate(Design.Internal.Records.ModelCalibrationSetup(Model="WaterHeaterLib.Examples.WaterHeaterCalibration", tunerParameters={Design.Internal.Records.TunerParameter(name="tan.h_WF_cons", Value=CalibrationParameters[1,3], min=2, max=5000)}, calibrationData=Design.Calibration.Internal.Dynamic_common(Design.Internal.Records.DynamicCommonCalibrationCases(experimentNames={"C:/Program Files (x86)/Dymola 2012 FD01/Models/WaterHeater/current/modeling/branches/pgrant/PlainStorageWaterHeater/StorageTankCalibrationData.csv"}, task={1}, startTime={150}, stopTime={1000}, parameterNames={"tan.h_cw_B_cons", "burn.h_GB", "tan.c_wI", "tan.h_cv_F"}, parameterValues=[CalibrationParameters[1,1], CalibrationParameters[1,2], CalibrationParameters[1,4], CalibrationParameters[1,5]]), resultCouplings={Design.Internal.Records.DynamicCalibrationResultCoupling(variable="sum1.y", data="T_Nodes")})));

	//This section reads the results of the calibration, and prints all of the characterization variables to a .csv file. It then reads the characterization variables back into Dymola so that they can be used in the next characterization simulation.
	simulateModel("",resultFile="test");
	fileName = "test.mat"; 
	CSVfile = "CalibrationInput.csv";
	n = 1;
	names={"tan.h_cw_B_cons","burn.h_GB","tan.h_WF_cons","tan.c_wI","tan.h_cv_F"};
	traj=readTrajectory(fileName,names,n);
	traj_transposed = transpose(traj);
	DataFiles.writeCSVmatrix(CSVfile, names, traj_transposed);
	CalibrationParameters = DataFiles.readCSVmatrix("CalibrationInput.csv");

	Design.Calibration.calibrate(Design.Internal.Records.ModelCalibrationSetup(Model="WaterHeaterLib.Examples.WaterHeaterCalibration", tunerParameters={Design.Internal.Records.TunerParameter(name="tan.c_wI", Value=CalibrationParameters[1,4], min=0.0001, max=1000)}, calibrationData=Design.Calibration.Internal.Dynamic_common(Design.Internal.Records.DynamicCommonCalibrationCases(experimentNames={"C:/Program Files (x86)/Dymola 2012 FD01/Models/WaterHeater/current/modeling/branches/pgrant/PlainStorageWaterHeater/StorageTankCalibrationData.csv"}, task={1}, startTime={150}, stopTime={1000}, parameterNames={"tan.h_cw_B_cons", "burn.h_GB", "tan.h_WF_cons", "tan.h_cv_F"}, parameterValues=[CalibrationParameters[1,1], CalibrationParameters[1,2], CalibrationParameters[1,3], CalibrationParameters[1,5]]), resultCouplings={Design.Internal.Records.DynamicCalibrationResultCoupling(variable="sum2.y", data="sum(dT_Nodes)")})));

	//This section reads the results of the calibration, and prints all of the characterization variables to a .csv file. It then reads the characterization variables back into Dymola so that they can be used in the next characterization simulation.
	simulateModel("",resultFile="test");
	fileName = "test.mat";
	CSVfile = "CalibrationInput.csv";
	n = 1;
	names={"tan.h_cw_B_cons","burn.h_GB","tan.h_WF_cons","tan.c_wI","tan.h_cv_F"};
	traj=readTrajectory(fileName,names,n);
	traj_transposed = transpose(traj);
	DataFiles.writeCSVmatrix(CSVfile, names, traj_transposed);
	CalibrationParameters = DataFiles.readCSVmatrix("CalibrationInput.csv");

end for;