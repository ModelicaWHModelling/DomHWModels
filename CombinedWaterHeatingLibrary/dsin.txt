#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       1                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(404,72)
system.p_ambient
system.T_ambient
system.g
system.allowFlowReversal
system.energyDynamics
system.massDynamics
system.substanceDynamics
system.traceDynamics
system.momentumDynamics
system.m_flow_start
system.p_start
system.T_start
system.m_flow_small
system.dp_small
endUseGPMTwoBranchPID.T_start
endUseGPMTwoBranchPID.PID_P_3
endUseGPMTwoBranchPID.PID_I_3
endUseGPMTwoBranchPID.PID_D_3
endUseGPMTwoBranchPID.PID_P_2
endUseGPMTwoBranchPID.PID_I_2
endUseGPMTwoBranchPID.PID_D_2
endUseGPMTwoBranchPID.hotIn.m_flow
endUseGPMTwoBranchPID.hotIn.der(m_flow)
endUseGPMTwoBranchPID.hotIn.p
endUseGPMTwoBranchPID.hotIn.h_outflow
endUseGPMTwoBranchPID.val.energyDynamics
endUseGPMTwoBranchPID.val.massDynamics
endUseGPMTwoBranchPID.val.substanceDynamics
endUseGPMTwoBranchPID.val.traceDynamics
endUseGPMTwoBranchPID.val.p_start
endUseGPMTwoBranchPID.val.T_start
endUseGPMTwoBranchPID.val.X_start[1]
endUseGPMTwoBranchPID.val.port_1.p
endUseGPMTwoBranchPID.val.port_2.m_flow
endUseGPMTwoBranchPID.val.port_2.der(m_flow)
endUseGPMTwoBranchPID.val.port_3.p
endUseGPMTwoBranchPID.val.from_dp
endUseGPMTwoBranchPID.val.homotopyInitialization
endUseGPMTwoBranchPID.val.res1.allowFlowReversal
endUseGPMTwoBranchPID.val.res1.port_a.p
endUseGPMTwoBranchPID.val.res1.port_b.h_outflow
endUseGPMTwoBranchPID.val.res1.port_a_exposesState
endUseGPMTwoBranchPID.val.res1.port_b_exposesState
endUseGPMTwoBranchPID.val.res1.showDesignFlowDirection
endUseGPMTwoBranchPID.val.res1.m_flow_nominal
endUseGPMTwoBranchPID.val.res1.m_flow_small
endUseGPMTwoBranchPID.val.res1.homotopyInitialization
endUseGPMTwoBranchPID.val.res1.show_V_flow
endUseGPMTwoBranchPID.val.res1.show_T
endUseGPMTwoBranchPID.val.res1.dp
endUseGPMTwoBranchPID.val.res1.from_dp
endUseGPMTwoBranchPID.val.res1.dp_nominal
endUseGPMTwoBranchPID.val.res1.linearized
endUseGPMTwoBranchPID.val.res1.m_flow_turbulent
endUseGPMTwoBranchPID.val.res1.sta_default.p
endUseGPMTwoBranchPID.val.res1.sta_default.T
endUseGPMTwoBranchPID.val.res1.eta_default
endUseGPMTwoBranchPID.val.res1.m_flow_nominal_pos
endUseGPMTwoBranchPID.val.res1.dp_nominal_pos
endUseGPMTwoBranchPID.val.res1.CvData
endUseGPMTwoBranchPID.val.res1.Kv
endUseGPMTwoBranchPID.val.res1.Cv
endUseGPMTwoBranchPID.val.res1.Av
endUseGPMTwoBranchPID.val.res1.deltaM
endUseGPMTwoBranchPID.val.res1.dpValve_nominal
endUseGPMTwoBranchPID.val.res1.rhoStd
endUseGPMTwoBranchPID.val.res1.Kv_SI
endUseGPMTwoBranchPID.val.res1.filteredOpening
endUseGPMTwoBranchPID.val.res1.riseTime
endUseGPMTwoBranchPID.val.res1.init
endUseGPMTwoBranchPID.val.res1.y_start
endUseGPMTwoBranchPID.val.res1.dpFixed_nominal
endUseGPMTwoBranchPID.val.res1.l
endUseGPMTwoBranchPID.val.res1.phi
endUseGPMTwoBranchPID.val.res1.der(phi)
endUseGPMTwoBranchPID.val.res1.kFixed
endUseGPMTwoBranchPID.val.res1.kVal
endUseGPMTwoBranchPID.val.res1.der(kVal)
endUseGPMTwoBranchPID.val.res1.k
endUseGPMTwoBranchPID.val.res1.der(k)
endUseGPMTwoBranchPID.val.res2.allowFlowReversal
endUseGPMTwoBranchPID.val.res2.port_b.h_outflow
endUseGPMTwoBranchPID.val.res2.port_a_exposesState
endUseGPMTwoBranchPID.val.res2.port_b_exposesState
endUseGPMTwoBranchPID.val.res2.showDesignFlowDirection
endUseGPMTwoBranchPID.val.res2.m_flow_nominal
endUseGPMTwoBranchPID.val.res2.m_flow_small
endUseGPMTwoBranchPID.val.res2.homotopyInitialization
endUseGPMTwoBranchPID.val.res2.show_V_flow
endUseGPMTwoBranchPID.val.res2.show_T
endUseGPMTwoBranchPID.val.res2.dp
endUseGPMTwoBranchPID.val.res2.from_dp
endUseGPMTwoBranchPID.val.res3.allowFlowReversal
endUseGPMTwoBranchPID.val.res3.port_a.p
endUseGPMTwoBranchPID.val.res3.port_b.h_outflow
endUseGPMTwoBranchPID.val.res3.port_a_exposesState
endUseGPMTwoBranchPID.val.res3.port_b_exposesState
endUseGPMTwoBranchPID.val.res3.showDesignFlowDirection
endUseGPMTwoBranchPID.val.res3.m_flow_nominal
endUseGPMTwoBranchPID.val.res3.m_flow_small
endUseGPMTwoBranchPID.val.res3.homotopyInitialization
endUseGPMTwoBranchPID.val.res3.show_V_flow
endUseGPMTwoBranchPID.val.res3.show_T
endUseGPMTwoBranchPID.val.res3.dp
endUseGPMTwoBranchPID.val.res3.from_dp
endUseGPMTwoBranchPID.val.res3.dp_nominal
endUseGPMTwoBranchPID.val.res3.linearized
endUseGPMTwoBranchPID.val.res3.m_flow_turbulent
endUseGPMTwoBranchPID.val.res3.sta_default.p
endUseGPMTwoBranchPID.val.res3.sta_default.T
endUseGPMTwoBranchPID.val.res3.eta_default
endUseGPMTwoBranchPID.val.res3.m_flow_nominal_pos
endUseGPMTwoBranchPID.val.res3.dp_nominal_pos
endUseGPMTwoBranchPID.val.res3.CvData
endUseGPMTwoBranchPID.val.res3.Kv
endUseGPMTwoBranchPID.val.res3.Cv
endUseGPMTwoBranchPID.val.res3.Av
endUseGPMTwoBranchPID.val.res3.deltaM
endUseGPMTwoBranchPID.val.res3.dpValve_nominal
endUseGPMTwoBranchPID.val.res3.rhoStd
endUseGPMTwoBranchPID.val.res3.Kv_SI
endUseGPMTwoBranchPID.val.res3.filteredOpening
endUseGPMTwoBranchPID.val.res3.riseTime
endUseGPMTwoBranchPID.val.res3.init
endUseGPMTwoBranchPID.val.res3.y_start
endUseGPMTwoBranchPID.val.res3.y
endUseGPMTwoBranchPID.val.res3.dpFixed_nominal
endUseGPMTwoBranchPID.val.res3.l
endUseGPMTwoBranchPID.val.res3.phi
endUseGPMTwoBranchPID.val.res3.der(phi)
endUseGPMTwoBranchPID.val.res3.kFixed
endUseGPMTwoBranchPID.val.res3.kVal
endUseGPMTwoBranchPID.val.res3.der(kVal)
endUseGPMTwoBranchPID.val.res3.k
endUseGPMTwoBranchPID.val.res3.der(k)
endUseGPMTwoBranchPID.val.portFlowDirection_1
endUseGPMTwoBranchPID.val.portFlowDirection_2
endUseGPMTwoBranchPID.val.portFlowDirection_3
endUseGPMTwoBranchPID.val.dynamicBalance
endUseGPMTwoBranchPID.val.tau
endUseGPMTwoBranchPID.val.mDyn_flow_nominal
endUseGPMTwoBranchPID.val.filteredOpening
endUseGPMTwoBranchPID.val.riseTime
endUseGPMTwoBranchPID.val.init
endUseGPMTwoBranchPID.val.y_start
endUseGPMTwoBranchPID.val.y
endUseGPMTwoBranchPID.val.y_actual
endUseGPMTwoBranchPID.val.der(y_actual)
endUseGPMTwoBranchPID.val.filter.analogFilter
endUseGPMTwoBranchPID.val.filter.filterType
endUseGPMTwoBranchPID.val.filter.order
endUseGPMTwoBranchPID.val.filter.f_cut
endUseGPMTwoBranchPID.val.filter.gain
endUseGPMTwoBranchPID.val.filter.A_ripple
endUseGPMTwoBranchPID.val.filter.f_min
endUseGPMTwoBranchPID.val.filter.normalized
endUseGPMTwoBranchPID.val.filter.init
endUseGPMTwoBranchPID.val.filter.nx
endUseGPMTwoBranchPID.val.filter.x_start[1]
endUseGPMTwoBranchPID.val.filter.x_start[2]
endUseGPMTwoBranchPID.val.filter.y_start
endUseGPMTwoBranchPID.val.filter.u_nominal
endUseGPMTwoBranchPID.val.filter.x[1]
endUseGPMTwoBranchPID.val.filter.der(x[1])
endUseGPMTwoBranchPID.val.filter.x[2]
endUseGPMTwoBranchPID.val.filter.der(x[2])
endUseGPMTwoBranchPID.val.filter.ncr
endUseGPMTwoBranchPID.val.filter.nc0
endUseGPMTwoBranchPID.val.filter.na
endUseGPMTwoBranchPID.val.filter.nr
endUseGPMTwoBranchPID.val.filter.cr[1]
endUseGPMTwoBranchPID.val.filter.cr[2]
endUseGPMTwoBranchPID.val.filter.r[1]
endUseGPMTwoBranchPID.val.filter.r[2]
endUseGPMTwoBranchPID.val.filter.uu[1]
endUseGPMTwoBranchPID.val.CvData
endUseGPMTwoBranchPID.val.Kv
endUseGPMTwoBranchPID.val.Cv
endUseGPMTwoBranchPID.val.Av
endUseGPMTwoBranchPID.val.deltaM
endUseGPMTwoBranchPID.val.m_flow_nominal
endUseGPMTwoBranchPID.val.dpValve_nominal
endUseGPMTwoBranchPID.val.rhoStd
endUseGPMTwoBranchPID.val.Kv_SI
endUseGPMTwoBranchPID.val.dpFixed_nominal[1]
endUseGPMTwoBranchPID.val.dpFixed_nominal[2]
endUseGPMTwoBranchPID.val.fraK
endUseGPMTwoBranchPID.val.l[1]
endUseGPMTwoBranchPID.val.l[2]
endUseGPMTwoBranchPID.val.linearized[1]
endUseGPMTwoBranchPID.val.linearized[2]
endUseGPMTwoBranchPID.val.inv.u1
endUseGPMTwoBranchPID.val.uni.k
endUseGPMTwoBranchPID.val.uni.y
endUseGPMTwoBranchPID.TOutDes
endUseGPMTwoBranchPID.senTem.allowFlowReversal
endUseGPMTwoBranchPID.senTem.port_a.h_outflow
endUseGPMTwoBranchPID.senTem.port_a_exposesState
endUseGPMTwoBranchPID.senTem.port_b_exposesState
endUseGPMTwoBranchPID.senTem.showDesignFlowDirection
endUseGPMTwoBranchPID.senTem.m_flow_nominal
endUseGPMTwoBranchPID.senTem.m_flow_small
endUseGPMTwoBranchPID.senTem.tau
endUseGPMTwoBranchPID.senTem.initType
endUseGPMTwoBranchPID.senTem.k
endUseGPMTwoBranchPID.senTem.dynamic
endUseGPMTwoBranchPID.senTem.mNor_flow
endUseGPMTwoBranchPID.senTem.T
endUseGPMTwoBranchPID.senTem.der(T)
endUseGPMTwoBranchPID.senTem.T_start
endUseGPMTwoBranchPID.senTem.TMed
endUseGPMTwoBranchPID.senTem.T_a_inflow
endUseGPMTwoBranchPID.senTem.T_b_inflow
endUseGPMTwoBranchPID.colIn.m_flow
endUseGPMTwoBranchPID.colIn.der(m_flow)
endUseGPMTwoBranchPID.colIn.p
endUseGPMTwoBranchPID.conPID.small
endUseGPMTwoBranchPID.conPID.c_p
endUseGPMTwoBranchPID.conPID.hOutDes
endUseGPMTwoBranchPID.WatFlowDes
endUseGPMTwoBranchPID.der(WatFlowDes)
endUseGPMTwoBranchPID.boundary.nPorts
endUseGPMTwoBranchPID.boundary.medium.h
endUseGPMTwoBranchPID.boundary.medium.d
endUseGPMTwoBranchPID.boundary.medium.T
endUseGPMTwoBranchPID.boundary.medium.X[1]
endUseGPMTwoBranchPID.boundary.medium.u
endUseGPMTwoBranchPID.boundary.medium.R
endUseGPMTwoBranchPID.boundary.medium.MM
endUseGPMTwoBranchPID.boundary.medium.state.T
endUseGPMTwoBranchPID.boundary.medium.preferredMediumStates
endUseGPMTwoBranchPID.boundary.medium.standardOrderComponents
endUseGPMTwoBranchPID.boundary.medium.T_degC
endUseGPMTwoBranchPID.boundary.medium.p_bar
endUseGPMTwoBranchPID.boundary.ports[1].h_outflow
endUseGPMTwoBranchPID.boundary.flowDirection
endUseGPMTwoBranchPID.boundary.use_m_flow_in
endUseGPMTwoBranchPID.boundary.use_T_in
endUseGPMTwoBranchPID.boundary.use_X_in
endUseGPMTwoBranchPID.boundary.use_C_in
endUseGPMTwoBranchPID.boundary.m_flow
endUseGPMTwoBranchPID.boundary.T
endUseGPMTwoBranchPID.boundary.X[1]
endUseGPMTwoBranchPID.boundary.T_in_internal
endUseGPMTwoBranchPID.boundary.X_in_internal[1]
endUseGPMTwoBranchPID.gain.k
endUseGPMTwoBranchPID.colEnt.allowFlowReversal
endUseGPMTwoBranchPID.colEnt.port_a.p
endUseGPMTwoBranchPID.colEnt.port_b.p
endUseGPMTwoBranchPID.colEnt.port_b.h_outflow
endUseGPMTwoBranchPID.colEnt.port_a_exposesState
endUseGPMTwoBranchPID.colEnt.port_b_exposesState
endUseGPMTwoBranchPID.colEnt.showDesignFlowDirection
endUseGPMTwoBranchPID.colEnt.m_flow_nominal
endUseGPMTwoBranchPID.colEnt.m_flow_small
endUseGPMTwoBranchPID.colEnt.tau
endUseGPMTwoBranchPID.colEnt.initType
endUseGPMTwoBranchPID.colEnt.k
endUseGPMTwoBranchPID.colEnt.dynamic
endUseGPMTwoBranchPID.colEnt.mNor_flow
endUseGPMTwoBranchPID.colEnt.h_out
endUseGPMTwoBranchPID.colEnt.der(h_out)
endUseGPMTwoBranchPID.colEnt.h_out_start
endUseGPMTwoBranchPID.colEnt.hMed_out
endUseGPMTwoBranchPID.hotEnt.allowFlowReversal
endUseGPMTwoBranchPID.hotEnt.port_a.p
endUseGPMTwoBranchPID.hotEnt.port_b.p
endUseGPMTwoBranchPID.hotEnt.port_b.h_outflow
endUseGPMTwoBranchPID.hotEnt.port_a_exposesState
endUseGPMTwoBranchPID.hotEnt.port_b_exposesState
endUseGPMTwoBranchPID.hotEnt.showDesignFlowDirection
endUseGPMTwoBranchPID.hotEnt.m_flow_nominal
endUseGPMTwoBranchPID.hotEnt.m_flow_small
endUseGPMTwoBranchPID.hotEnt.tau
endUseGPMTwoBranchPID.hotEnt.initType
endUseGPMTwoBranchPID.hotEnt.k
endUseGPMTwoBranchPID.hotEnt.dynamic
endUseGPMTwoBranchPID.hotEnt.mNor_flow
endUseGPMTwoBranchPID.hotEnt.h_out
endUseGPMTwoBranchPID.hotEnt.der(h_out)
endUseGPMTwoBranchPID.hotEnt.h_out_start
endUseGPMTwoBranchPID.hotEnt.hMed_out
Mains.nPorts
Mains.medium.p
Mains.medium.h
Mains.medium.d
Mains.medium.T
Mains.medium.X[1]
Mains.medium.u
Mains.medium.R
Mains.medium.MM
Mains.medium.state.p
Mains.medium.state.T
Mains.medium.preferredMediumStates
Mains.medium.standardOrderComponents
Mains.medium.T_degC
Mains.medium.p_bar
Mains.ports[1].p
Mains.ports[1].h_outflow
Mains.flowDirection
Mains.use_p_in
Mains.use_T_in
Mains.use_X_in
Mains.use_C_in
Mains.p
Mains.T
Mains.X[1]
Mains.p_in_internal
Mains.T_in_internal
Mains.X_in_internal[1]
Hot.nPorts
Hot.medium.p
Hot.medium.h
Hot.medium.d
Hot.medium.T
Hot.medium.X[1]
Hot.medium.u
Hot.medium.R
Hot.medium.MM
Hot.medium.state.p
Hot.medium.state.T
Hot.medium.preferredMediumStates
Hot.medium.standardOrderComponents
Hot.medium.T_degC
Hot.medium.p_bar
Hot.ports[1].p
Hot.ports[1].h_outflow
Hot.flowDirection
Hot.use_p_in
Hot.use_T_in
Hot.use_X_in
Hot.use_C_in
Hot.p
Hot.T
Hot.X[1]
Hot.p_in_internal
Hot.T_in_internal
Hot.X_in_internal[1]
ramp.height
ramp.duration
ramp.offset
ramp.startTime
ramp1.height
ramp1.duration
ramp1.offset
ramp1.startTime
endUseGPMTwoBranchPID.val.vol.energyDynamics
endUseGPMTwoBranchPID.val.vol.massDynamics
endUseGPMTwoBranchPID.val.vol.substanceDynamics
endUseGPMTwoBranchPID.val.vol.traceDynamics
endUseGPMTwoBranchPID.val.vol.p_start
endUseGPMTwoBranchPID.val.vol.T_start
endUseGPMTwoBranchPID.val.vol.X_start[1]
endUseGPMTwoBranchPID.val.vol.m_flow_nominal
endUseGPMTwoBranchPID.val.vol.nPorts
endUseGPMTwoBranchPID.val.vol.m_flow_small
endUseGPMTwoBranchPID.val.vol.homotopyInitialization
endUseGPMTwoBranchPID.val.vol.allowFlowReversal
endUseGPMTwoBranchPID.val.vol.V
endUseGPMTwoBranchPID.val.vol.prescribedHeatFlowRate
endUseGPMTwoBranchPID.val.vol.heatPort.T
endUseGPMTwoBranchPID.val.vol.heatPort.Q_flow
endUseGPMTwoBranchPID.val.vol.state_start.p
endUseGPMTwoBranchPID.val.vol.state_start.T
endUseGPMTwoBranchPID.val.vol.rho_nominal
endUseGPMTwoBranchPID.val.vol.useSteadyStateTwoPort
endUseGPMTwoBranchPID.val.vol.Q_flow
endUseGPMTwoBranchPID.val.vol.heaInp.y
endUseGPMTwoBranchPID.val.vol.tau
endUseGPMTwoBranchPID.val.vol.V0
endUseGPMTwoBranchPID.val.vol.dynBal.energyDynamics
endUseGPMTwoBranchPID.val.vol.dynBal.massDynamics
endUseGPMTwoBranchPID.val.vol.dynBal.substanceDynamics
endUseGPMTwoBranchPID.val.vol.dynBal.traceDynamics
endUseGPMTwoBranchPID.val.vol.dynBal.p_start
endUseGPMTwoBranchPID.val.vol.dynBal.T_start
endUseGPMTwoBranchPID.val.vol.dynBal.X_start[1]
endUseGPMTwoBranchPID.val.vol.dynBal.nPorts
endUseGPMTwoBranchPID.val.vol.dynBal.medium.p
endUseGPMTwoBranchPID.val.vol.dynBal.medium.der(p)
_GlobalScope.Modelica.Media.Interfaces.PartialPureSubstance.X_default[1]
endUseGPMTwoBranchPID.val.vol.dynBal.medium.d
endUseGPMTwoBranchPID.val.vol.dynBal.medium.T
endUseGPMTwoBranchPID.val.vol.dynBal.medium.der(T)
endUseGPMTwoBranchPID.val.vol.dynBal.medium.X[1]
endUseGPMTwoBranchPID.val.vol.dynBal.medium.u
endUseGPMTwoBranchPID.val.vol.dynBal.medium.der(u)
endUseGPMTwoBranchPID.val.vol.dynBal.medium.R
endUseGPMTwoBranchPID.val.vol.dynBal.medium.MM
endUseGPMTwoBranchPID.val.vol.dynBal.medium.preferredMediumStates
endUseGPMTwoBranchPID.val.vol.dynBal.medium.standardOrderComponents
endUseGPMTwoBranchPID.val.vol.dynBal.medium.T_degC
endUseGPMTwoBranchPID.val.vol.dynBal.medium.p_bar
endUseGPMTwoBranchPID.val.vol.dynBal.U
endUseGPMTwoBranchPID.val.vol.dynBal.der(U)
endUseGPMTwoBranchPID.val.vol.dynBal.m
endUseGPMTwoBranchPID.val.vol.dynBal.der(m)
endUseGPMTwoBranchPID.val.vol.dynBal.mb_flow
endUseGPMTwoBranchPID.val.vol.dynBal.Q_flow
endUseGPMTwoBranchPID.val.vol.dynBal.initialize_p
endUseGPMTwoBranchPID.val.vol.dynBal.ports_H_flow[1]
endUseGPMTwoBranchPID.val.vol.dynBal.ports_H_flow[2]
endUseGPMTwoBranchPID.val.vol.dynBal.ports_H_flow[3]
endUseGPMTwoBranchPID.val.vol.dynBal.rho_nominal

double initialValue(404,6)
 -1  1.0132500000000000E+05       0                 1.0000000000000000E+100
  1   280   # system.p_ambient
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # system.T_ambient
 -1  9.8066499999999994E+00       0                       0                
  1   280   # system.g
  0       1                       0                       0                
  6   257   # system.allowFlowReversal
  0       1                       1                       4                
  6   258   # system.energyDynamics
  0       1                       1                       4                
  6   258   # system.massDynamics
  0       1                       1                       4                
  6   258   # system.substanceDynamics
  0       1                       1                       4                
  6   258   # system.traceDynamics
  0       4                       1                       4                
  6   258   # system.momentumDynamics
 -1       0                       0                       0                
  1   280   # system.m_flow_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # system.p_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # system.T_start
 -1  1.0000000000000000E-02       0                 1.0000000000000000E+100
  1   280   # system.m_flow_small
 -1       1                       0                 1.0000000000000000E+100
  1   280   # system.dp_small
 -1  2.8314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # endUseGPMTwoBranchPID.T_start
 -1       2                       0                       0                
  1   280   # endUseGPMTwoBranchPID.PID_P_3
 -1       3                       0                       0                
  1   280   # endUseGPMTwoBranchPID.PID_I_3
 -1  1.0000000000000001E-01       0                       0                
  1   280   # endUseGPMTwoBranchPID.PID_D_3
 -1       2                       0                       0                
  1   280   # endUseGPMTwoBranchPID.PID_P_2
 -1       3                       0                       0                
  1   280   # endUseGPMTwoBranchPID.PID_I_2
 -1  1.0000000000000001E-01       0                       0                
  1   280   # endUseGPMTwoBranchPID.PID_D_2
  0       0                 -100000                  100000                
  6   388   # endUseGPMTwoBranchPID.hotIn.m_flow
  0       0                       0                       0                
  6   260   # endUseGPMTwoBranchPID.hotIn.der(m_flow)
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.hotIn.p
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.hotIn.h_outflow
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.energyDynamics
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.massDynamics
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.substanceDynamics
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.traceDynamics
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1   280   # endUseGPMTwoBranchPID.val.p_start
  0     300                       1                   10000                
  6   256   # endUseGPMTwoBranchPID.val.T_start
 -1       1                       0                       1                
  1   280   # endUseGPMTwoBranchPID.val.X_start[1]
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.val.port_1.p
  0       0                 -100000                  100000                
  6   388   # endUseGPMTwoBranchPID.val.port_2.m_flow
  0       0                       0                       0                
  6   324   # endUseGPMTwoBranchPID.val.port_2.der(m_flow)
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.val.port_3.p
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.from_dp
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.homotopyInitialization
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res1.allowFlowReversal
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.val.res1.port_a.p
  0  2.5104000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.val.res1.port_b.h_outflow
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res1.port_a_exposesState
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res1.port_b_exposesState
 -1       1                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res1.showDesignFlowDirection
  0  5.9999999999999998E-02 -100000                  100000                
  6   256   # endUseGPMTwoBranchPID.val.res1.m_flow_nominal
  0  6.0000000000000002E-06       0                  100000                
  6   256   # endUseGPMTwoBranchPID.val.res1.m_flow_small
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res1.homotopyInitialization
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res1.show_V_flow
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res1.show_T
  0  5.0000000000000000E-01       0                       0                
  6   288   # endUseGPMTwoBranchPID.val.res1.dp
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res1.from_dp
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res1.dp_nominal
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res1.linearized
  0       0                       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.res1.m_flow_turbulent
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # endUseGPMTwoBranchPID.val.res1.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # endUseGPMTwoBranchPID.val.res1.sta_default.T
  0  1.0000000000000000E-03       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res1.eta_default
  0  5.9999999999999998E-02       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res1.m_flow_nominal_pos
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res1.dp_nominal_pos
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.res1.CvData
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res1.Kv
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res1.Cv
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res1.Av
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res1.deltaM
  0       1                  9.9999999999999997E-61 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.res1.dpValve_nominal
 -1  9.9558600000000001E+02       0                 1.0000000000000000E+100
  1   280   # endUseGPMTwoBranchPID.val.res1.rhoStd
  0       0                       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res1.Kv_SI
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res1.filteredOpening
 -1     120                       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.res1.riseTime
 -1       4                       1                       4                
  1   282   # endUseGPMTwoBranchPID.val.res1.init
 -1       1                       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.res1.y_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.res1.dpFixed_nominal
  0  1.0000000000000000E-10  1.0000000000000000E-10       1                
  6   256   # endUseGPMTwoBranchPID.val.res1.l
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res1.phi
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res1.der(phi)
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res1.kFixed
  0  9.9999999999999997E-61  9.9999999999999997E-61 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res1.kVal
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res1.der(kVal)
  0  9.9999999999999997E-61  9.9999999999999997E-61 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res1.k
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res1.der(k)
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res2.allowFlowReversal
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.val.res2.port_b.h_outflow
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res2.port_a_exposesState
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res2.port_b_exposesState
 -1       1                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res2.showDesignFlowDirection
  0  5.9999999999999998E-02 -100000                  100000                
  6   256   # endUseGPMTwoBranchPID.val.res2.m_flow_nominal
  0  6.0000000000000002E-06       0                  100000                
  6   256   # endUseGPMTwoBranchPID.val.res2.m_flow_small
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res2.homotopyInitialization
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res2.show_V_flow
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res2.show_T
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res2.dp
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res2.from_dp
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res3.allowFlowReversal
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.val.res3.port_a.p
  0   62760                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.val.res3.port_b.h_outflow
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res3.port_a_exposesState
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res3.port_b_exposesState
 -1       1                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.res3.showDesignFlowDirection
  0  5.9999999999999998E-02 -100000                  100000                
  6   256   # endUseGPMTwoBranchPID.val.res3.m_flow_nominal
  0  6.0000000000000002E-06       0                  100000                
  6   256   # endUseGPMTwoBranchPID.val.res3.m_flow_small
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res3.homotopyInitialization
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res3.show_V_flow
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res3.show_T
  0  5.0000000000000000E-01       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.dp
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res3.from_dp
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.dp_nominal
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res3.linearized
  0       0                       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.res3.m_flow_turbulent
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # endUseGPMTwoBranchPID.val.res3.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # endUseGPMTwoBranchPID.val.res3.sta_default.T
  0  1.0000000000000000E-03       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res3.eta_default
  0  5.9999999999999998E-02       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res3.m_flow_nominal_pos
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res3.dp_nominal_pos
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.res3.CvData
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.Kv
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.Cv
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.Av
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.deltaM
  0       1                  9.9999999999999997E-61 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.res3.dpValve_nominal
 -1  9.9558600000000001E+02       0                 1.0000000000000000E+100
  1   280   # endUseGPMTwoBranchPID.val.res3.rhoStd
  0       0                       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res3.Kv_SI
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.res3.filteredOpening
 -1     120                       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.res3.riseTime
 -1       4                       1                       4                
  1   282   # endUseGPMTwoBranchPID.val.res3.init
 -1       1                       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.res3.y_start
  0       0                       0                       1                
  6   256   # endUseGPMTwoBranchPID.val.res3.y
  0       0                       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.res3.dpFixed_nominal
  0  1.0000000000000000E-10  1.0000000000000000E-10       1                
  6   256   # endUseGPMTwoBranchPID.val.res3.l
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.phi
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.res3.der(phi)
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res3.kFixed
  0  9.9999999999999997E-61  9.9999999999999997E-61 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res3.kVal
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res3.der(kVal)
  0  9.9999999999999997E-61  9.9999999999999997E-61 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.res3.k
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.res3.der(k)
  0       3                       1                       3                
  6  1282   # endUseGPMTwoBranchPID.val.portFlowDirection_1
  0       3                       1                       3                
  6  1282   # endUseGPMTwoBranchPID.val.portFlowDirection_2
  0       3                       1                       3                
  6  1282   # endUseGPMTwoBranchPID.val.portFlowDirection_3
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.dynamicBalance
 -1  1.0000000000000001E-05       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.tau
  0  5.9999999999999998E-02       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.mDyn_flow_nominal
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.filteredOpening
 -1  1.0000000000000001E-05       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.riseTime
  0       4                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.init
 -1       0                       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.y_start
  0       0                       0                       1                
  6   256   # endUseGPMTwoBranchPID.val.y
  0       0                       0                       1                
  6   256   # endUseGPMTwoBranchPID.val.y_actual
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.der(y_actual)
  0       1                       1                       4                
  6  1282   # endUseGPMTwoBranchPID.val.filter.analogFilter
  0       1                       1                       4                
  6  1282   # endUseGPMTwoBranchPID.val.filter.filterType
  0       2                       1                 1.0000000000000000E+100
  6  1282   # endUseGPMTwoBranchPID.val.filter.order
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.filter.f_cut
 -1       1                       0                       0                
  1  1304   # endUseGPMTwoBranchPID.val.filter.gain
 -1  5.0000000000000000E-01       0                       0                
  1  1304   # endUseGPMTwoBranchPID.val.filter.A_ripple
 -1       0                       0                       0                
  1  1304   # endUseGPMTwoBranchPID.val.filter.f_min
 -1       1                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.filter.normalized
  0       4                       1                       4                
  6  1282   # endUseGPMTwoBranchPID.val.filter.init
  0       2                       0                       0                
  6  1282   # endUseGPMTwoBranchPID.val.filter.nx
 -1       0                       0                       0                
  1  1304   # endUseGPMTwoBranchPID.val.filter.x_start[1]
 -1       0                       0                       0                
  1  1304   # endUseGPMTwoBranchPID.val.filter.x_start[2]
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.filter.y_start
 -1       1                       0                       0                
  1  1304   # endUseGPMTwoBranchPID.val.filter.u_nominal
 -1       0                       0                       0                
  2  1296   # endUseGPMTwoBranchPID.val.filter.x[1]
  0       0                       0                       0                
  3  1280   # endUseGPMTwoBranchPID.val.filter.der(x[1])
 -1       0                       0                       0                
  2  1296   # endUseGPMTwoBranchPID.val.filter.x[2]
  0       0                       0                       0                
  3  1280   # endUseGPMTwoBranchPID.val.filter.der(x[2])
  0       2                       0                       0                
  6  1282   # endUseGPMTwoBranchPID.val.filter.ncr
  0       0                       0                       0                
  6  1282   # endUseGPMTwoBranchPID.val.filter.nc0
  0       0                       0                       0                
  6  1282   # endUseGPMTwoBranchPID.val.filter.na
  0       2                       0                       0                
  6  1282   # endUseGPMTwoBranchPID.val.filter.nr
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.filter.cr[1]
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.filter.cr[2]
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.filter.r[1]
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.filter.r[2]
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.filter.uu[1]
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.CvData
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.Kv
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.Cv
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.Av
 -1  2.0000000000000000E-02       0                       0                
  1   280   # endUseGPMTwoBranchPID.val.deltaM
  0  5.9999999999999998E-02       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.m_flow_nominal
  0       1                  9.9999999999999997E-61 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.dpValve_nominal
 -1  9.9558600000000001E+02       0                 1.0000000000000000E+100
  1   280   # endUseGPMTwoBranchPID.val.rhoStd
  0       0                       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.Kv_SI
 -1       0                       0                 1.0000000000000000E+100
  1   280   # endUseGPMTwoBranchPID.val.dpFixed_nominal[1]
 -1       0                       0                 1.0000000000000000E+100
  1   280   # endUseGPMTwoBranchPID.val.dpFixed_nominal[2]
  0       1                       0                       1                
  6   256   # endUseGPMTwoBranchPID.val.fraK
 -1  1.0000000000000000E-10       0                       1                
  1   280   # endUseGPMTwoBranchPID.val.l[1]
 -1  1.0000000000000000E-10       0                       1                
  1   280   # endUseGPMTwoBranchPID.val.l[2]
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.linearized[1]
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.linearized[2]
  0       1                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.inv.u1
  0       1                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.uni.k
  0       1                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.uni.y
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.TOutDes
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.senTem.allowFlowReversal
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.senTem.port_a.h_outflow
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.senTem.port_a_exposesState
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.senTem.port_b_exposesState
 -1       1                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.senTem.showDesignFlowDirection
 -1  6.3000000000000000E-02       0                  100000                
  1   280   # endUseGPMTwoBranchPID.senTem.m_flow_nominal
  0       0                       0                  100000                
  6   256   # endUseGPMTwoBranchPID.senTem.m_flow_small
  0  9.9999999999999995E-07       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.senTem.tau
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.senTem.initType
  0       1                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.senTem.k
  0       1                       0                       0                
  6  1281   # endUseGPMTwoBranchPID.senTem.dynamic
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.senTem.mNor_flow
 -1       0                       0                 1.0000000000000000E+100
  2   272   # endUseGPMTwoBranchPID.senTem.T
  0       0                       0                       0                
  3   256   # endUseGPMTwoBranchPID.senTem.der(T)
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.senTem.T_start
  0     300                       1                   10000                
  6   256   # endUseGPMTwoBranchPID.senTem.TMed
  0     300                       1                   10000                
  6  1280   # endUseGPMTwoBranchPID.senTem.T_a_inflow
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # endUseGPMTwoBranchPID.senTem.T_b_inflow
  0       0                 -100000                  100000                
  6   388   # endUseGPMTwoBranchPID.colIn.m_flow
  0       0                       0                       0                
  6   260   # endUseGPMTwoBranchPID.colIn.der(m_flow)
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.colIn.p
 -1  9.9999999999999995E-07       0                       0                
  1   280   # endUseGPMTwoBranchPID.conPID.small
  0    4184                       0                       0                
  6   256   # endUseGPMTwoBranchPID.conPID.c_p
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.conPID.hOutDes
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.WatFlowDes
  0       0                       0                       0                
  6   320   # endUseGPMTwoBranchPID.der(WatFlowDes)
  0       1                       0                       0                
  6   258   # endUseGPMTwoBranchPID.boundary.nPorts
  0   83680                       0                       0                
  6   256   # endUseGPMTwoBranchPID.boundary.medium.h
  0  9.9558600000000001E+02       0                  100000                
  6   256   # endUseGPMTwoBranchPID.boundary.medium.d
  0  2.9314999999999998E+02       1                   10000                
  6   256   # endUseGPMTwoBranchPID.boundary.medium.T
  0       1                       0                       1                
  6   256   # endUseGPMTwoBranchPID.boundary.medium.X[1]
  0   83680                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # endUseGPMTwoBranchPID.boundary.medium.u
  0       0                       0                  1.0000000000000000E+07
  6   256   # endUseGPMTwoBranchPID.boundary.medium.R
  0  1.8015268000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # endUseGPMTwoBranchPID.boundary.medium.MM
  0  2.9314999999999998E+02       1                   10000                
  6   256   # endUseGPMTwoBranchPID.boundary.medium.state.T
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.boundary.medium.preferredMediumStates
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.boundary.medium.standardOrderComponents
  0      20                       0                       0                
  6   256   # endUseGPMTwoBranchPID.boundary.medium.T_degC
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.boundary.medium.p_bar
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.boundary.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # endUseGPMTwoBranchPID.boundary.flowDirection
  0       1                       0                       0                
  6   769   # endUseGPMTwoBranchPID.boundary.use_m_flow_in
  0       0                       0                       0                
  6   769   # endUseGPMTwoBranchPID.boundary.use_T_in
  0       0                       0                       0                
  6   769   # endUseGPMTwoBranchPID.boundary.use_X_in
  0       0                       0                       0                
  6   769   # endUseGPMTwoBranchPID.boundary.use_C_in
  0       0                 -100000                  100000                
  6   256   # endUseGPMTwoBranchPID.boundary.m_flow
  0  2.9314999999999998E+02       1                   10000                
  6   256   # endUseGPMTwoBranchPID.boundary.T
  0       1                       0                       1                
  6   256   # endUseGPMTwoBranchPID.boundary.X[1]
  0  2.9314999999999998E+02       0                       0                
  6  1280   # endUseGPMTwoBranchPID.boundary.T_in_internal
  0       1                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.boundary.X_in_internal[1]
 -1      -1                       0                       0                
  1   280   # endUseGPMTwoBranchPID.gain.k
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.colEnt.allowFlowReversal
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.colEnt.port_a.p
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.colEnt.port_b.p
  0   62760                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.colEnt.port_b.h_outflow
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.colEnt.port_a_exposesState
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.colEnt.port_b_exposesState
 -1       1                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.colEnt.showDesignFlowDirection
 -1  6.3000000000000000E-02       0                  100000                
  1   280   # endUseGPMTwoBranchPID.colEnt.m_flow_nominal
  0       0                       0                  100000                
  6   256   # endUseGPMTwoBranchPID.colEnt.m_flow_small
  0  1.0000000000000001E-05       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.colEnt.tau
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.colEnt.initType
  0       1                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.colEnt.k
  0       1                       0                       0                
  6  1281   # endUseGPMTwoBranchPID.colEnt.dynamic
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.colEnt.mNor_flow
 -1       0                       0                       0                
  2   272   # endUseGPMTwoBranchPID.colEnt.h_out
  0       0                       0                       0                
  3   256   # endUseGPMTwoBranchPID.colEnt.der(h_out)
 -1   83680                       0                       0                
  1   280   # endUseGPMTwoBranchPID.colEnt.h_out_start
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.colEnt.hMed_out
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.hotEnt.allowFlowReversal
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.hotEnt.port_a.p
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # endUseGPMTwoBranchPID.hotEnt.port_b.p
  0  2.5104000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # endUseGPMTwoBranchPID.hotEnt.port_b.h_outflow
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.hotEnt.port_a_exposesState
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.hotEnt.port_b_exposesState
 -1       1                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.hotEnt.showDesignFlowDirection
 -1  6.3000000000000000E-02       0                  100000                
  1   280   # endUseGPMTwoBranchPID.hotEnt.m_flow_nominal
  0       0                       0                  100000                
  6   256   # endUseGPMTwoBranchPID.hotEnt.m_flow_small
  0  1.0000000000000001E-05       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.hotEnt.tau
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.hotEnt.initType
  0       1                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.hotEnt.k
  0       1                       0                       0                
  6  1281   # endUseGPMTwoBranchPID.hotEnt.dynamic
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.hotEnt.mNor_flow
 -1       0                       0                       0                
  2   272   # endUseGPMTwoBranchPID.hotEnt.h_out
  0       0                       0                       0                
  3   256   # endUseGPMTwoBranchPID.hotEnt.der(h_out)
 -1   83680                       0                       0                
  1   280   # endUseGPMTwoBranchPID.hotEnt.h_out_start
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.hotEnt.hMed_out
  0       1                       0                       0                
  6   258   # Mains.nPorts
  0  1.1000000000000000E+05       0                 1.0000000000000000E+100
  6   256   # Mains.medium.p
  0   62760                       0                       0                
  6   256   # Mains.medium.h
  0  9.9558600000000001E+02       0                  100000                
  6   256   # Mains.medium.d
  0  2.8814999999999998E+02       1                   10000                
  6   256   # Mains.medium.T
  0       1                       0                       1                
  6   256   # Mains.medium.X[1]
  0   62760                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # Mains.medium.u
  0       0                       0                  1.0000000000000000E+07
  6   256   # Mains.medium.R
  0  1.8015268000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # Mains.medium.MM
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   256   # Mains.medium.state.p
  0  2.8814999999999998E+02       1                   10000                
  6   256   # Mains.medium.state.T
  0       0                       0                       0                
  6   257   # Mains.medium.preferredMediumStates
  0       1                       0                       0                
  6   257   # Mains.medium.standardOrderComponents
  0      15                       0                       0                
  6   256   # Mains.medium.T_degC
  0  1.1000000000000001E+00       0                       0                
  6   256   # Mains.medium.p_bar
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # Mains.ports[1].p
  0   62760                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # Mains.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # Mains.flowDirection
  0       0                       0                       0                
  6   769   # Mains.use_p_in
  0       0                       0                       0                
  6   769   # Mains.use_T_in
  0       0                       0                       0                
  6   769   # Mains.use_X_in
  0       0                       0                       0                
  6   769   # Mains.use_C_in
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   256   # Mains.p
  0  2.8814999999999998E+02       1                   10000                
  6   256   # Mains.T
  0       1                       0                       1                
  6   256   # Mains.X[1]
  0  1.1000000000000000E+05       0                       0                
  6  1280   # Mains.p_in_internal
  0  2.8814999999999998E+02       0                       0                
  6  1280   # Mains.T_in_internal
  0       1                       0                       0                
  6  1280   # Mains.X_in_internal[1]
  0       1                       0                       0                
  6   258   # Hot.nPorts
  0  1.1000000000000000E+05       0                 1.0000000000000000E+100
  6   256   # Hot.medium.p
  0  2.5104000000000000E+05       0                       0                
  6   256   # Hot.medium.h
  0  9.9558600000000001E+02       0                  100000                
  6   256   # Hot.medium.d
  0  3.3314999999999998E+02       1                   10000                
  6   256   # Hot.medium.T
  0       1                       0                       1                
  6   256   # Hot.medium.X[1]
  0  2.5104000000000000E+05 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # Hot.medium.u
  0       0                       0                  1.0000000000000000E+07
  6   256   # Hot.medium.R
  0  1.8015268000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # Hot.medium.MM
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   256   # Hot.medium.state.p
  0  3.3314999999999998E+02       1                   10000                
  6   256   # Hot.medium.state.T
  0       0                       0                       0                
  6   257   # Hot.medium.preferredMediumStates
  0       1                       0                       0                
  6   257   # Hot.medium.standardOrderComponents
  0      60                       0                       0                
  6   256   # Hot.medium.T_degC
  0  1.1000000000000001E+00       0                       0                
  6   256   # Hot.medium.p_bar
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # Hot.ports[1].p
  0  2.5104000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # Hot.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # Hot.flowDirection
  0       0                       0                       0                
  6   769   # Hot.use_p_in
  0       0                       0                       0                
  6   769   # Hot.use_T_in
  0       0                       0                       0                
  6   769   # Hot.use_X_in
  0       0                       0                       0                
  6   769   # Hot.use_C_in
  0  1.1000000000000000E+05       0                  1.0000000000000000E+08
  6   256   # Hot.p
  0  3.3314999999999998E+02       1                   10000                
  6   256   # Hot.T
  0       1                       0                       1                
  6   256   # Hot.X[1]
  0  1.1000000000000000E+05       0                       0                
  6  1280   # Hot.p_in_internal
  0  3.3314999999999998E+02       0                       0                
  6  1280   # Hot.T_in_internal
  0       1                       0                       0                
  6  1280   # Hot.X_in_internal[1]
 -1      45                       0                       0                
  1   280   # ramp.height
 -1     600                  9.9999999999999997E-61 1.0000000000000000E+100
  1   280   # ramp.duration
 -1  2.8814999999999998E+02       0                       0                
  1   280   # ramp.offset
 -1      30                       0                       0                
  1   280   # ramp.startTime
 -1       1                       0                       0                
  1   280   # ramp1.height
 -1     600                  9.9999999999999997E-61 1.0000000000000000E+100
  1   280   # ramp1.duration
 -1       1                       0                       0                
  1   280   # ramp1.offset
 -1     660                       0                       0                
  1   280   # ramp1.startTime
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.vol.energyDynamics
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.vol.massDynamics
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.vol.substanceDynamics
  0       1                       1                       4                
  6   258   # endUseGPMTwoBranchPID.val.vol.traceDynamics
  0  100000                       0                  1.0000000000000000E+08
  6   256   # endUseGPMTwoBranchPID.val.vol.p_start
  0     300                       1                   10000                
  6   256   # endUseGPMTwoBranchPID.val.vol.T_start
  0       0                       0                       1                
  6   256   # endUseGPMTwoBranchPID.val.vol.X_start[1]
  0  5.9999999999999998E-02       0                 1.0000000000000000E+100
  6   256   # endUseGPMTwoBranchPID.val.vol.m_flow_nominal
  0       3                       0                       0                
  6   258   # endUseGPMTwoBranchPID.val.vol.nPorts
  0  6.0000000000000002E-06       0                  100000                
  6   256   # endUseGPMTwoBranchPID.val.vol.m_flow_small
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.vol.homotopyInitialization
  0       1                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.vol.allowFlowReversal
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.vol.V
  0       0                       0                       0                
  6   257   # endUseGPMTwoBranchPID.val.vol.prescribedHeatFlowRate
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   260   # endUseGPMTwoBranchPID.val.vol.heatPort.T
  0       0                       0                       0                
  6   388   # endUseGPMTwoBranchPID.val.vol.heatPort.Q_flow
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # endUseGPMTwoBranchPID.val.vol.state_start.p
  0     300                       1                   10000                
  6  1280   # endUseGPMTwoBranchPID.val.vol.state_start.T
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.vol.rho_nominal
  0       0                       0                       0                
  6  1281   # endUseGPMTwoBranchPID.val.vol.useSteadyStateTwoPort
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.Q_flow
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.heaInp.y
  0       0                       0                       0                
  6   256   # endUseGPMTwoBranchPID.val.vol.tau
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.V0
  0       1                       1                       4                
  6  1282   # endUseGPMTwoBranchPID.val.vol.dynBal.energyDynamics
  0       1                       1                       4                
  6  1282   # endUseGPMTwoBranchPID.val.vol.dynBal.massDynamics
  0       1                       1                       4                
  6  1282   # endUseGPMTwoBranchPID.val.vol.dynBal.substanceDynamics
  0       1                       1                       4                
  6  1282   # endUseGPMTwoBranchPID.val.vol.dynBal.traceDynamics
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.p_start
  0     300                       1                   10000                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.T_start
  0       0                       0                       1                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.X_start[1]
  0       3                       0                       0                
  6  1282   # endUseGPMTwoBranchPID.val.vol.dynBal.nPorts
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.p
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.der(p)
  0       1                       0                       1                
  6  1280   # _GlobalScope.Modelica.Media.Interfaces.PartialPureSubstance.X_default[1]
  0  9.9558600000000001E+02       0                  100000                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.d
 -1  2.9314999999999998E+02       1                   10000                
  2  1296   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.T
  0       0                       0                       0                
  3  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.der(T)
  0       1                       0                       1                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.X[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.u
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.der(u)
  0       0                       0                  1.0000000000000000E+07
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.R
  0  1.8015268000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.MM
  0       1                       0                       0                
  6  1281   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.preferredMediumStates
  0       1                       0                       0                
  6  1281   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.standardOrderComponents
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.T_degC
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.medium.p_bar
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.U
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.der(U)
  0       0                       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.m
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.der(m)
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.mb_flow
  0       0                       0                       0                
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.Q_flow
 -1       0                       0                       0                
  1  1305   # endUseGPMTwoBranchPID.val.vol.dynBal.initialize_p
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.ports_H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.ports_H_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.ports_H_flow[3]
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # endUseGPMTwoBranchPID.val.vol.dynBal.rho_nominal


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable.
#           = 0: real.
#           = 1: boolean.
#           = 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(404,153)
Default ambient pressure [Pa|bar]
Default ambient temperature [K|degC]
Constant gravity acceleration [m/s2]
= false to restrict to design flow direction (port_a -> port_b) [:#(type=Boolean)]
Default formulation of energy balances [:#(type=Modelica.Fluid.Types.Dynamics)]
Default formulation of mass balances [:#(type=Modelica.Fluid.Types.Dynamics)]
Default formulation of substance balances [:#(type=Modelica.Fluid.Types.Dynamics)]
Default formulation of trace substance balances [:#(type=Modelica.Fluid.Types.Dynamics)]
Default formulation of momentum balances, if options available [:#(type=Modelica.Fluid.Types.Dynamics)]
Default start value for mass flow rates [kg/s]
Default start value for pressures [Pa|bar]
Default start value for temperatures [K|degC]
Default small laminar mass flow rate for regularization of zero flow [kg/s]
Default small pressure drop for regularization of laminar and zero flow [Pa|bar]
Initial temperature in the valve [K|degC]
Proportional term for the PID controller for the 3-way valve
Integral term for the PID controller for the 3-way valve [s]
Derivative term for the PID controller for the 3-way valve [s]
Proportional term for the PID controller for the 2-way valve
Integral term for the PID controller for the 2-way valve [s]
Derivative term for the PID controller for the 2-way valve [s]
Mass flow rate from the connection point into the component [kg/s]
der(Mass flow rate from the connection point into the component) [kg/s2]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Formulation of energy balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of mass balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of substance balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of trace substance balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Thermodynamic pressure in the connection point [Pa|bar]
Mass flow rate from the connection point into the component [kg/s]
der(Mass flow rate from the connection point into the component) [kg/s2]
Thermodynamic pressure in the connection point [Pa|bar]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
= true, use homotopy method [:#(type=Boolean)]
= true to allow flow reversal, false restricts to design direction (port_a -> port_b) [:#(type=Boolean)]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
= true if port_a exposes the state of a fluid volume [:#(type=Boolean)]
= true if port_b.p exposes the state of a fluid volume [:#(type=Boolean)]
= false to hide the arrow in the model icon [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, use homotopy method [:#(type=Boolean)]
= true, if volume flow rate at inflowing port is computed [:#(type=Boolean)]
= true, if actual temperature at port is computed (may lead to events) [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure drop at nominal mass flow rate [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Turbulent flow if |m_flow| >= m_flow_turbulent [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Dynamic viscosity, used to compute transition to turbulent flow regime [Pa.s]
Absolute value of nominal flow rate [kg/s]
Absolute value of nominal pressure [Pa|bar]
Selection of flow coefficient [:#(type=Buildings.Fluid.Types.CvTypes)]
Kv (metric) flow coefficient [m3/h/(bar)^(1/2)] []
Cv (US) flow coefficient [USG/min/(psi)^(1/2)] []
Av (metric) flow coefficient [m2]
Fraction of nominal flow rate where linearization starts, if y=1 [1]
Nominal pressure drop of fully open valve, used if CvData=Buildings.Fluid.Types.CvTypes.OpPoint [Pa|Pa]
Inlet density for which valve coefficients are defined [kg/m3|g/cm3]
Flow coefficient for fully open valve in SI units, Kv=m_flow/sqrt(dp) [kg/s/(Pa)^(1/2)] []
= true, if opening is filtered with a 2nd order CriticalDamping filter [:#(type=Boolean)]
Rise time of the filter (time to reach 99.6 % of an opening step) [s]
Type of initialization (no init/steady state/initial state/initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial value of output
Pressure drop of pipe and other resistances that are in series [Pa|Pa]
Valve leakage, l=Cv(y=0)/Cvs
Ratio actual to nominal mass flow rate of valve, phi=Cv(y)/Cv(y=1)
der(Ratio actual to nominal mass flow rate of valve, phi=Cv(y)/Cv(y=1))
Flow coefficient of fixed resistance that may be in series with valve, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).
Flow coefficient of valve, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).
der(Flow coefficient of valve, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).)
Flow coefficient of valve and pipe in series, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).
der(Flow coefficient of valve and pipe in series, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).)
= true to allow flow reversal, false restricts to design direction (port_a -> port_b) [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
= true if port_a exposes the state of a fluid volume [:#(type=Boolean)]
= true if port_b.p exposes the state of a fluid volume [:#(type=Boolean)]
= false to hide the arrow in the model icon [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, use homotopy method [:#(type=Boolean)]
= true, if volume flow rate at inflowing port is computed [:#(type=Boolean)]
= true, if actual temperature at port is computed (may lead to events) [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Used to satisfy replaceable models [:#(type=Boolean)]
= true to allow flow reversal, false restricts to design direction (port_a -> port_b) [:#(type=Boolean)]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
= true if port_a exposes the state of a fluid volume [:#(type=Boolean)]
= true if port_b.p exposes the state of a fluid volume [:#(type=Boolean)]
= false to hide the arrow in the model icon [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, use homotopy method [:#(type=Boolean)]
= true, if volume flow rate at inflowing port is computed [:#(type=Boolean)]
= true, if actual temperature at port is computed (may lead to events) [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure drop at nominal mass flow rate [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Turbulent flow if |m_flow| >= m_flow_turbulent [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Dynamic viscosity, used to compute transition to turbulent flow regime [Pa.s]
Absolute value of nominal flow rate [kg/s]
Absolute value of nominal pressure [Pa|bar]
Selection of flow coefficient [:#(type=Buildings.Fluid.Types.CvTypes)]
Kv (metric) flow coefficient [m3/h/(bar)^(1/2)] []
Cv (US) flow coefficient [USG/min/(psi)^(1/2)] []
Av (metric) flow coefficient [m2]
Fraction of nominal flow rate where linearization starts, if y=1 [1]
Nominal pressure drop of fully open valve, used if CvData=Buildings.Fluid.Types.CvTypes.OpPoint [Pa|Pa]
Inlet density for which valve coefficients are defined [kg/m3|g/cm3]
Flow coefficient for fully open valve in SI units, Kv=m_flow/sqrt(dp) [kg/s/(Pa)^(1/2)] []
= true, if opening is filtered with a 2nd order CriticalDamping filter [:#(type=Boolean)]
Rise time of the filter (time to reach 99.6 % of an opening step) [s]
Type of initialization (no init/steady state/initial state/initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial value of output
Actuator position (0: closed, 1: open)
Pressure drop of pipe and other resistances that are in series [Pa|Pa]
Valve leakage, l=Cv(y=0)/Cvs
Ratio actual to nominal mass flow rate of valve, phi=Cv(y)/Cv(y=1)
der(Ratio actual to nominal mass flow rate of valve, phi=Cv(y)/Cv(y=1))
Flow coefficient of fixed resistance that may be in series with valve, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).
Flow coefficient of valve, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).
der(Flow coefficient of valve, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).)
Flow coefficient of valve and pipe in series, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).
der(Flow coefficient of valve and pipe in series, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2).)
Flow direction for port_1 [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Flow direction for port_2 [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Flow direction for port_3 [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Set to true to use a dynamic balance, which often leads to smaller systems of equations [:#(type=Boolean)]
Time constant at nominal flow for dynamic energy and momentum balance [s]
Nominal mass flow rate for dynamic momentum and energy balance [kg/s]
= true, if opening is filtered with a 2nd order CriticalDamping filter [:#(type=Boolean)]
Rise time of the filter (time to reach 99.6 % of an opening step) [s]
Type of initialization (no init/steady state/initial state/initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial value of output
Actuator position (0: closed, 1: open)
Actual valve position
der(Actual valve position)
Analog filter characteristics (CriticalDamping/Bessel/Butterworth/ChebyshevI) [:#(type=Modelica.Blocks.Types.AnalogFilter)]
Type of filter (LowPass/HighPass/BandPass/BandStop) [:#(type=Modelica.Blocks.Types.FilterType)]
Order of filter [:#(type=Integer)]
Cut-off frequency [Hz]
Gain (= amplitude of frequency response at zero frequency)
Pass band ripple for Chebyshev filter (otherwise not used); > 0 required [dB]
Band of band pass/stop filter is f_min (A=-3db*gain) .. f_cut (A=-3db*gain) [Hz]
= true, if amplitude at f_cut = -3db, otherwise unmodified filter [:#(type=Boolean)]
Type of initialization (no init/steady state/initial state/initial output) [:#(type=Modelica.Blocks.Types.Init)]
[:#(type=Integer)]
Initial or guess values of states
Initial or guess values of states
Initial value of output
Nominal value of input (used for scaling the states)
Filter states
der(Filter states)
Filter states
der(Filter states)
[:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Integer)]





Selection of flow coefficient [:#(type=Buildings.Fluid.Types.CvTypes)]
Kv (metric) flow coefficient [m3/h/(bar)^(1/2)] []
Cv (US) flow coefficient [USG/min/(psi)^(1/2)] []
Av (metric) flow coefficient [m2]
Fraction of nominal flow rate where linearization starts, if y=1 [1]
Nominal mass flow rate [kg/s]
Nominal pressure drop of fully open valve, used if CvData=Buildings.Fluid.Types.CvTypes.OpPoint [Pa|Pa]
Inlet density for which valve coefficients are defined [kg/m3|g/cm3]
Flow coefficient for fully open valve in SI units, Kv=m_flow/sqrt(dp) [kg/s/(Pa)^(1/2)] []
Nominal pressure drop of pipes and other equipment in flow legs at port_1 and port_3 [Pa|Pa]
Nominal pressure drop of pipes and other equipment in flow legs at port_1 and port_3 [Pa|Pa]
Fraction Kv(port_3->port_2)/Kv(port_1->port_2)
Valve leakage, l=Cv(y=0)/Cvs
Valve leakage, l=Cv(y=0)/Cvs
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]

Constant output value
Connector of Real output signal
Desired outlet water temperature [K]
= true to allow flow reversal, false restricts to design direction (port_a -> port_b) [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
= true if port_a exposes the state of a fluid volume [:#(type=Boolean)]
= true if port_b.p exposes the state of a fluid volume [:#(type=Boolean)]
= false to hide the arrow in the model icon [:#(type=Boolean)]
Nominal mass flow rate, used for regularization near zero flow [kg/s]
For bi-directional flow, temperature is regularized in the region |m_flow| < m_flow_small (m_flow_small > 0 required) [kg/s]
Time constant at nominal flow rate [s]
Type of initialization (InitialState and InitialOutput are identical) [:#(type=Modelica.Blocks.Types.Init)]
Gain to take flow rate into account for sensor time constant [1]
Flag, true if the sensor is a dynamic sensor [:#(type=Boolean)]
Normalized mass flow rate [1]
Temperature of the passing fluid [K|degC]
der(Temperature of the passing fluid) [K/s]
Initial or guess value of output (= state) [K|degC]
Medium temperature to which the sensor is exposed [K|degC]
Temperature of inflowing fluid at port_a [K|degC]
Temperature of inflowing fluid at port_b or T_a_inflow, if uni-directional flow [K|degC]
Mass flow rate from the connection point into the component [kg/s]
der(Mass flow rate from the connection point into the component) [kg/s2]
Thermodynamic pressure in the connection point [Pa|bar]

[J/(kg.K)]
Desired outlet enthalpy [J/kg]


Number of ports [:#(type=Integer)]
Specific enthalpy of medium [J/kg]
Density of medium [kg/m3|g/cm3]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
Temperature of medium [K|degC]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
if true, and reducedX = true, the last element of X will be computed from the other ones [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Get the mass flow rate from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the composition from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed value of temperature [K|degC]
Fixed value of composition [kg/kg]
Needed to connect to conditional connector [K]
Needed to connect to conditional connector [1]
Gain value multiplied with input signal [1]
= true to allow flow reversal, false restricts to design direction (port_a -> port_b) [:#(type=Boolean)]
Thermodynamic pressure in the connection point [Pa|bar]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
= true if port_a exposes the state of a fluid volume [:#(type=Boolean)]
= true if port_b.p exposes the state of a fluid volume [:#(type=Boolean)]
= false to hide the arrow in the model icon [:#(type=Boolean)]
Nominal mass flow rate, used for regularization near zero flow [kg/s]
For bi-directional flow, temperature is regularized in the region |m_flow| < m_flow_small (m_flow_small > 0 required) [kg/s]
Time constant at nominal flow rate [s]
Type of initialization (InitialState and InitialOutput are identical) [:#(type=Modelica.Blocks.Types.Init)]
Gain to take flow rate into account for sensor time constant [1]
Flag, true if the sensor is a dynamic sensor [:#(type=Boolean)]
Normalized mass flow rate [1]
Specific enthalpy of the passing fluid [J/kg]
der(Specific enthalpy of the passing fluid) [m2/s3]
Initial or guess value of output (= state) [J/kg]
Medium enthalpy to which the sensor is exposed [J/kg]
= true to allow flow reversal, false restricts to design direction (port_a -> port_b) [:#(type=Boolean)]
Thermodynamic pressure in the connection point [Pa|bar]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
= true if port_a exposes the state of a fluid volume [:#(type=Boolean)]
= true if port_b.p exposes the state of a fluid volume [:#(type=Boolean)]
= false to hide the arrow in the model icon [:#(type=Boolean)]
Nominal mass flow rate, used for regularization near zero flow [kg/s]
For bi-directional flow, temperature is regularized in the region |m_flow| < m_flow_small (m_flow_small > 0 required) [kg/s]
Time constant at nominal flow rate [s]
Type of initialization (InitialState and InitialOutput are identical) [:#(type=Modelica.Blocks.Types.Init)]
Gain to take flow rate into account for sensor time constant [1]
Flag, true if the sensor is a dynamic sensor [:#(type=Boolean)]
Normalized mass flow rate [1]
Specific enthalpy of the passing fluid [J/kg]
der(Specific enthalpy of the passing fluid) [m2/s3]
Initial or guess value of output (= state) [J/kg]
Medium enthalpy to which the sensor is exposed [J/kg]
Number of ports [:#(type=Integer)]
Absolute pressure of medium [Pa|bar]
Specific enthalpy of medium [J/kg]
Density of medium [kg/m3|g/cm3]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
if true, and reducedX = true, the last element of X will be computed from the other ones [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Get the pressure from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the composition from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of pressure [Pa|bar]
Fixed value of temperature [K|degC]
Fixed value of composition [kg/kg]
Needed to connect to conditional connector [Pa]
Needed to connect to conditional connector [K]
Needed to connect to conditional connector [1]
Number of ports [:#(type=Integer)]
Absolute pressure of medium [Pa|bar]
Specific enthalpy of medium [J/kg]
Density of medium [kg/m3|g/cm3]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
if true, and reducedX = true, the last element of X will be computed from the other ones [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Get the pressure from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the composition from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of pressure [Pa|bar]
Fixed value of temperature [K|degC]
Fixed value of composition [kg/kg]
Needed to connect to conditional connector [Pa]
Needed to connect to conditional connector [K]
Needed to connect to conditional connector [1]
Height of ramps [K]
Durations of ramp [s]
Offset of output signal [K]
Output = offset for time < startTime [s]
Height of ramps
Durations of ramp [s]
Offset of output signal
Output = offset for time < startTime [s]
Formulation of energy balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of mass balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of substance balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of trace substance balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Nominal mass flow rate [kg/s]
Number of ports [:#(type=Integer)]
Small mass flow rate for regularization of zero flow [kg/s]
= true, use homotopy method [:#(type=Boolean)]
= true to allow flow reversal in medium, false restricts to design direction (ports[1] -> ports[2]). Used only if model has two ports. [:#(type=Boolean)]
Volume [m3]
Set to true if the model has a prescribed heat flow at its heatPort [:#(type=Boolean)]
Port temperature [K|degC]
Heat flow rate (positive if flowing from outside into the component) [W]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Density, used to compute fluid mass [kg/m3|g/cm3]
Flag, true if the model has two ports only and uses a steady state balance [:#(type=Boolean)]
Heat flow across boundaries or energy source/sink [W]
Value of Real output [W]
Time constant at nominal flow [s]
Volume of delay element [m3]
Formulation of energy balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of mass balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of substance balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Formulation of trace substance balance [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Number of ports [:#(type=Integer)]
Absolute pressure of medium [Pa|bar]
der(Absolute pressure of medium) [Pa/s]
Default value for mass fractions of medium (for initialization) [kg/kg]
Density of medium [kg/m3|g/cm3]
Temperature of medium [K|degC]
der(Temperature of medium) [K/s]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific internal energy of medium [J/kg]
der(Specific internal energy of medium) [m2/s3]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
if true, and reducedX = true, the last element of X will be computed from the other ones [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Internal energy of fluid [J]
der(Internal energy of fluid) [W]
Mass of fluid [kg]
der(Mass of fluid) [kg/s]
Mass flows across boundaries [kg/s]
Heat transfered into the medium [W]
= true to set up initial equations for pressure [:#(type=Boolean)]
[W]
[W]
[W]
Density, used to compute fluid mass [kg/m3|g/cm3]

