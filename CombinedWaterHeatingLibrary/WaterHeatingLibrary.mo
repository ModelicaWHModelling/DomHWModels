within ;
package WaterHeatingLibrary "Library of water heating models and packages"
  package CombinedExamples
    "Provides system-level models made of models from various water heating packages"

    model TanklessWithTrunkAndBranch
      "Demonstrates how to simulate a trunk and branch distribution system with a tankless heater"
      extends Modelica.Icons.Example;
      package Water = Buildings.Media.ConstantPropertyLiquidWater
        "Fluid in the system";

      parameter Modelica.SIunits.Temperature T_start_dis = 273.15+30
        "Initial temperature of the distribution system";

      NonCondensingTankless.NonCondensingTanklessHeaterMediumModel
        nonCondensingTanklessHeater(mdot_min_input=0.018, redeclare package
          Medium =
            Water)
        annotation (Placement(transformation(extent={{-10,-14},{12,14}})));
      Modelica.Blocks.Sources.CombiTimeTable watFlo(
        tableOnFile=true,
        tableName="Flow",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchFlow.txt",
        columns=2:5)
        "Reads a data file describing the desired water flow rate at each fixture[Dishwasher, KitchenSink, Shower, Sink]"
        annotation (Placement(transformation(extent={{-80,-74},{-60,-54}})));

      HWDis.Components.PipeLumpedCap
                             tru1(
        length=10,
        m_flow_nominal=0.1,
        dp_nominal=1,
        allowFlowReversal=false,
        nSeg=20,
        MixCoef=0.6,
        til=0,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        redeclare package Medium = Water,
        ePipe=0.95,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis) "First section of the trunk pipe"
        annotation (Placement(transformation(extent={{36,-6},{56,14}})));

      HWDis.Components.PipeLumpedCap
                             bra11(
        m_flow_nominal=0.1,
        thicknessIns=0.0127,
        length=10,
        dp_nominal=1,
        nSeg=20,
        MixCoef=0.6,
        lambdaIns=0.04,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        diameter_i=0.019939,
        redeclare package Medium = Water,
        ePipe=0.95,
        T_start=T_start_dis)    annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={80,44})));

      HWDis.Components.PipeLumpedCap
                             bra2(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        thicknessIns=0.0127,
        length=10,
        MixCoef=0.6,
        lambdaIns=0.04,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        redeclare package Medium = Water,
        ePipe=0.95,
        T_start=T_start_dis)    annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={150,-32})));

      HWDis.Components.PipeLumpedCap
                             twi1(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        thicknessIns=0.0127,
        length=10,
        MixCoef=0.6,
        lambdaIns=0.04,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        redeclare package Medium = Water,
        ePipe=0.95,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{140,76},{160,96}})));

      HWDis.Components.PipeLumpedCap
                             bra12(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        thicknessIns=0.0127,
        length=10,
        MixCoef=0.6,
        lambdaIns=0.04,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        redeclare package Medium = Water,
        ePipe=0.95,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{140,34},{160,54}})));

      HWDis.Components.PipeLumpedCap
                             tru2(
        redeclare package Medium = Buildings.Media.ConstantPropertyLiquidWater,
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        thicknessIns=0.0127,
        length=10,
        MixCoef=0.6,
        lambdaIns=0.04,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{94,-6},{114,14}})));

      HWDis.Components.PipeLumpedCap
                             tru3(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        thicknessIns=0.0127,
        length=10,
        MixCoef=0.6,
        lambdaIns=0.04,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        redeclare package Medium = Water,
        ePipe=0.95,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{140,-6},{160,14}})));

      HWDis.Components.EndUse     Sink(                  gain=valCon, redeclare
          package Medium = Water) "Models the draw at a sink"
        annotation (Placement(transformation(extent={{180,76},{200,96}})));
      HWDis.Components.EndUse     Shower(                gain=valCon, redeclare
          package Medium = Water) "Models the draw at a shower"
        annotation (Placement(transformation(extent={{180,34},{200,54}})));
      HWDis.Components.EndUse     Dishwasher(            gain=valCon, redeclare
          package Medium = Water) "Models the draw at a dishwasher"
        annotation (Placement(transformation(extent={{180,-6},{200,14}})));
      HWDis.Components.EndUse     KitchenSink(           gain=valCon, redeclare
          package Medium = Water) "Models the draw at a kitchen sink"
        annotation (Placement(transformation(extent={{180,-42},{200,-22}})));
      Modelica.Blocks.Sources.CombiTimeTable TAmb(
        tableOnFile=true,
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTAmb.txt",
        tableName="TAmb") "Temperature surrounding the system(unit = K)"
        annotation (Placement(transformation(extent={{-80,96},{-60,116}})));
      Modelica.Blocks.Sources.CombiTimeTable TIn(
        tableOnFile=true,
        tableName="Temp",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTIn.txt")
        "Inlet temperature (unit = K)"
        annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
      Modelica.Blocks.Sources.CombiTimeTable pwrSig(
        tableOnFile=true,
        tableName="pwr",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchpwr.txt")
        "Power signal (1 = on, 0 = off)"
        annotation (Placement(transformation(extent={{-80,-4},{-60,16}})));
      Buildings.Fluid.Sources.Boundary_pT Mains(
        use_T_in=true,
        nPorts=1,
        redeclare package Medium = Water,
        p=150000) "Connects to the mains water system"
        annotation (Placement(transformation(extent={{-70,-34},{-50,-14}})));
      HWDis.Components.FlowReduction  floRed(nDra=4)
        "Reduces flow at outlet fixtures when tankless heater reduces flow because it cannot meet demand"
        annotation (Placement(transformation(extent={{78,-60},{98,-40}})));
      parameter Real valCon = 1/13.25 "Gain value for the EndUse models";

      Modelica.Blocks.Math.Sum totFlo(nin=4)
        annotation (Placement(transformation(extent={{-28,-58},{-8,-38}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{40,-52},{60,-32}})));
      Modelica.Blocks.Sources.CombiTimeTable TRadMea(tableOnFile=true, tableName="TRadMea",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTRadMea.txt")
        "Mean radiant temperature surrounding the pipes(unit = K)"
        annotation (Placement(transformation(extent={{-80,124},{-60,144}})));
    equation
      connect(tru1.port_b, tru2.port_a) annotation (Line(
          points={{56,4},{94,4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru1.port_b, bra11.port_a) annotation (Line(
          points={{56,4},{64,4},{64,44},{70,44}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra11.port_b, bra12.port_a) annotation (Line(
          points={{90,44},{140,44}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra11.port_b, twi1.port_a) annotation (Line(
          points={{90,44},{116,44},{116,86},{140,86}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru2.port_b, bra2.port_a) annotation (Line(
          points={{114,4},{130,4},{130,-32},{140,-32}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru2.port_b, tru3.port_a) annotation (Line(
          points={{114,4},{140,4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(twi1.port_b, Sink.Inlet) annotation (Line(
          points={{160,86},{180,86}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra12.port_b, Shower.Inlet) annotation (Line(
          points={{160,44},{180,44}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru3.port_b, Dishwasher.Inlet) annotation (Line(
          points={{160,4},{180,4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra2.port_b, KitchenSink.Inlet) annotation (Line(
          points={{160,-32},{180,-32}},
          color={0,127,255},
          smooth=Smooth.None));

      connect(TAmb.y[1], nonCondensingTanklessHeater.AmbientTemperature)
        annotation (Line(
          points={{-59,106},{-18,106},{-18,7.952},{-12.2,7.952}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pwrSig.y[1], nonCondensingTanklessHeater.pwrSig) annotation (Line(
          points={{-59,6},{-52,6},{-52,-12.88},{-12.2,-12.88}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TIn.y[1], Mains.T_in) annotation (Line(
          points={{-79,-20},{-72,-20}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(watFlo.y, floRed.desFlo) annotation (Line(
          points={{-59,-64},{62,-64},{62,-58},{76,-58},{76,-57.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(floRed.draFlo[1], KitchenSink.watFlo) annotation (Line(
          points={{99,-50.75},{170,-50.75},{170,-37},{178,-37}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(floRed.draFlo[2], Dishwasher.watFlo) annotation (Line(
          points={{99,-50.25},{170,-50.25},{170,-1},{178,-1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(floRed.draFlo[3], Shower.watFlo) annotation (Line(
          points={{99,-49.75},{170,-49.75},{170,39},{178,39}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(floRed.draFlo[4], Sink.watFlo) annotation (Line(
          points={{99,-49.25},{170,-49.25},{170,81},{178,81}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(watFlo.y, totFlo.u) annotation (Line(
          points={{-59,-64},{-42,-64},{-42,-48},{-30,-48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(min1.y, floRed.conFlo) annotation (Line(
          points={{61,-42},{76,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totFlo.y, min1.u2) annotation (Line(
          points={{-7,-48},{38,-48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHeater.maxMasFlo, min1.u1) annotation (Line(
          points={{13.1,-3.92},{26,-3.92},{26,-36},{38,-36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Mains.ports[1], nonCondensingTanklessHeater.colWatIn) annotation (
         Line(
          points={{-50,-24},{-1.64,-24},{-1.64,-14}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru1.port_a, nonCondensingTanklessHeater.hotWatOut) annotation (
          Line(
          points={{36,4},{18,4},{18,-26},{-5.6,-26},{-5.6,-14}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(TAmb.y[1], bra11.TAmb) annotation (Line(
          points={{-59,106},{74,106},{74,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], tru1.TAmb) annotation (Line(
          points={{-59,106},{40,106},{40,11}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], twi1.TAmb) annotation (Line(
          points={{-59,106},{144,106},{144,93}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], tru2.TAmb) annotation (Line(
          points={{-59,106},{98,106},{98,11}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], tru3.TAmb) annotation (Line(
          points={{-59,106},{120,106},{120,16},{144,16},{144,11}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], bra2.TAmb) annotation (Line(
          points={{-59,106},{120,106},{120,-22},{144,-22},{144,-25}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], tru1.TRadMea) annotation (Line(
          points={{-59,134},{52,134},{52,11}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], twi1.TRadMea) annotation (Line(
          points={{-59,134},{156,134},{156,93}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], bra11.TRadMea) annotation (Line(
          points={{-59,134},{86,134},{86,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], tru2.TRadMea) annotation (Line(
          points={{-59,134},{110,134},{110,11}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(TRadMea.y[1], bra12.TRadMea) annotation (Line(
          points={{-59,134},{130,134},{130,64},{156,64},{156,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], tru3.TRadMea) annotation (Line(
          points={{-59,134},{130,134},{130,24},{156,24},{156,11}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], bra2.TRadMea) annotation (Line(
          points={{-59,134},{130,134},{130,-16},{156,-16},{156,-25}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], bra12.TAmb) annotation (Line(
          points={{-59,106},{120,106},{120,58},{144,58},{144,51}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -75},{200,150}}),       graphics), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-75},{200,150}})),
              Documentation(info="<html>
          <p>
          This example shows how several components can be combined to simulate a hot water distribution system in a house. The model starts at the left with text file inputs.
          The inputs include data for ambient temperature (TAmb), inlet temperature (TIn), the power control to the tankless heater (pwrSig) and the desired hot water flow rate
          (watFlo).
          </p>
          <p>
          The inlet temperature data is passed from the data reader to a boundary condition model. The boundary condition model is used to represent the connection to the mains
          water system by allowing the user to specify the inlet temperature and the pressure of the mains system. It is currently assumed that the mains pressure is constant;
          however that can be changed by imitating the connection used to input the inlet temperature.
          </p>
          <p>
          The power signal is passed straight from the data reader to the power signal connection on the tankless water heater model.
          </p>
          <p>
          The ambient temperature is read from the data file and passed into a prescribedTemperature model. This model gives the temperature number units (K). The ambient
          temperature is then connected to the pipe models describing the temperature of the air surrounding the pipes. The ambient temperature data file is also connected
          directly to the tankless water heater model for use in calculating the UA losses from the heat exchanger.
          </p>
          <p>
          The information from watFlo is passed into two separate models. The first simply sums all of the flows at the various fixtures. The totalled flow is then compared
          to the maximum flow rate allowed by the heater. The smaller of the two is passed into the floRed model. Depending on how the desired draw flow compares to the 
          maximum allowable flow the floRed model may reduce the draw flow rate at each fixture. This happens in cases when the desired flow is larger than the flow rate the
          heater will allow. The flow rate information is then connected to each of the draw endUse models.
          </p>
          <p>
          The boundary condition representing the mains water system is connected to the tankless water heater initiating the fluid flow system. After water passes through the
          heater it enters the distribution system. The distribution system in this model is a trunk and branch system representing four fixtures in a house. It only models
          the hot water pipes, ignoring the cold water pipes. Because the cold water pipes are not included in this model all flow rates are representing hot water flow, not flow
          of water leaving the fixture.
          </p>
          <p>
          Depending on which fixture is calling for hot water the water can pass through one of four paths in the distribution tree. The path of the water can be identified by
          following the blue lines from the heater to the fixture. For example, the hot water serving the shower passes from the tankless water heater through tru1, to bra11, to
          bra 12 and to the fixture itself. <br>
          </p>
          </html>",
              revisions="<html>
          <ul>
          <li>
          Mar 28, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
    end TanklessWithTrunkAndBranch;

    model HotAndColdDisWithTankless
      "Model of a distribution system containting both hot and cold plumbing served with a tankless heater"
      extends Modelica.Icons.Example;
      package Water = Buildings.Media.ConstantPropertyLiquidWater
        "Fluid in the system";

       parameter Modelica.SIunits.Temperature T_start_dis_hot = 273.15+20
        "Initial temperature of the hot water pipes";

       parameter Modelica.SIunits.Temperature T_start_dis_cold = 273.15+20
        "Initial temperature of the cold water pipes";

       parameter Integer nSegPip = 5 "Number of segments in each pipe";

      NonCondensingTankless.NonCondensingTanklessHeaterMediumModel nonCon(
          redeclare package Medium = Water, mdot_min_input=0.018)
        annotation (Placement(transformation(extent={{-176,80},{-146,130}})));
      Buildings.Fluid.Sources.Boundary_pT Mains(
        nPorts=2,
        redeclare package Medium = Water,
        use_T_in=true,
        p=105000)
        annotation (Placement(transformation(extent={{-192,34},{-172,54}})));

      Modelica.Blocks.Sources.CombiTimeTable TAmb(
        tableOnFile=true,
        tableName="TAmb",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTAmb.txt")
        annotation (Placement(transformation(extent={{-274,-22},{-254,-2}})));
      Modelica.Blocks.Sources.CombiTimeTable pwrSig(
        tableOnFile=true,
        tableName="pwr",
        fileName="/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchpwr.txt")
        annotation (Placement(transformation(extent={{-236,72},{-216,92}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     hTru1(
        allowFlowReversal=false,
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        dp_nominal=0,
        nSeg=nSegPip,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        length=10,
        roughness=0) "First section of the trunk pipe"
        annotation (Placement(transformation(extent={{10,70},{30,50}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     hBra11(
        length=10,
        redeclare package Medium = Water,
        T_start=T_start_dis_hot,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        m_flow_nominal=0.063,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)            annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=0,
            origin={54,100})));
      Buildings.Fluid.FixedResistances.Pipe
                                     hTwi1(
        length=10,
        redeclare package Medium = Water,
        T_start=T_start_dis_hot,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        m_flow_nominal=0.063,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{126,152},{146,132}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     hTru2(
        redeclare package Medium = Buildings.Media.ConstantPropertyLiquidWater,
        length=10,
        T_start=T_start_dis_hot,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        m_flow_nominal=0.063,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{68,70},{88,50}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     hBra12(
        length=10,
        redeclare package Medium = Water,
        T_start=T_start_dis_hot,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        m_flow_nominal=0.063,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{126,110},{146,90}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     hTru3(
        length=10,
        redeclare package Medium = Water,
        T_start=T_start_dis_hot,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        m_flow_nominal=0.063,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{126,70},{146,50}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     hBra2(
        length=10,
        redeclare package Medium = Water,
        T_start=T_start_dis_hot,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        m_flow_nominal=0.063,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)            annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=0,
            origin={136,22})));
      Buildings.Fluid.FixedResistances.Pipe
                                     cTru1(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        length=10,
        T_start=T_start_dis_cold,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{10,-136},{30,-116}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     cBra11(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        length=10,
        T_start=T_start_dis_cold,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{44,-98},{64,-78}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     cTru2(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        length=10,
        T_start=T_start_dis_cold,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{68,-136},{88,-116}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     cBra12(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        length=10,
        T_start=T_start_dis_cold,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{126,-98},{146,-78}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     cTru3(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        length=10,
        T_start=T_start_dis_cold,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{126,-136},{146,-116}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     cTwi1(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        length=10,
        T_start=T_start_dis_cold,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{126,-62},{146,-42}})));
      Buildings.Fluid.FixedResistances.Pipe
                                     cBra2(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        length=10,
        T_start=T_start_dis_cold,
        allowFlowReversal=false,
        nSeg=nSegPip,
        dp_nominal=0,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        diameter=0.019939,
        roughness=0)
        annotation (Placement(transformation(extent={{126,-176},{146,-156}})));
      HWDis.Components.EndUseTwoBranch       Sink(
        redeclare package Medium = Water,
        T_start=293.15,
        PID_P_3=2,
        PID_I_3=3,
        PID_D_3=0.00000001,
        PID_P_2=2,
        PID_I_2=3,
        PID_D_2=0.00000001)
        annotation (Placement(transformation(extent={{254,100},{274,80}})));
      HWDis.Components.EndUseTwoBranch       Shower(
        redeclare package Medium = Water,
        T_start=293.15,
        PID_P_3=2,
        PID_I_3=3,
        PID_D_3=0.00000001,
        PID_P_2=2,
        PID_I_2=3,
        PID_D_2=0.00000001)
        annotation (Placement(transformation(extent={{254,40},{274,20}})));
      HWDis.Components.EndUseTwoBranch       Dishwasher(
        redeclare package Medium = Water,
        T_start=293.15,
        PID_P_3=2,
        PID_I_3=3,
        PID_D_3=0.00000001,
        PID_P_2=2,
        PID_I_2=3,
        PID_D_2=0.00000001)
        annotation (Placement(transformation(extent={{254,-20},{274,-40}})));
      HWDis.Components.EndUseTwoBranch       KitchenSink(
        redeclare package Medium = Water,
        PID_P_3=2,
        PID_I_3=3,
        PID_D_3=0.00000001,
        PID_P_2=2,
        PID_I_2=3,
        PID_D_2=0.00000001,
        T_start=293.15)
        annotation (Placement(transformation(extent={{254,-78},{274,-98}})));
      Modelica.Blocks.Sources.CombiTimeTable TDra(
        tableOnFile=true,
        tableName="TOut",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTOut.txt",
        columns=2:5)
        "Desired temperature of the hot water draws (unit=K; KitchenSink, Dishwasher, Shower, Sink)"
        annotation (Placement(transformation(extent={{-274,138},{-254,158}})));

      Modelica.Blocks.Sources.CombiTimeTable watFlo(
        tableOnFile=true,
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchFlow.txt",
        tableName="Flow",
        columns=2:5)
        "Desired flow rate of the hot water draws (unit = kg/s; KitchenSink, Dishwasher, Shower, Sink)"
        annotation (Placement(transformation(extent={{-274,166},{-254,186}})));

      Modelica.Blocks.Sources.RealExpression shoT(y=TDra.y[3])
        "Desired temperature at the shower (unit = K)"
        annotation (Placement(transformation(extent={{204,34},{224,54}})));
      Modelica.Blocks.Sources.RealExpression shoFlo(y=watFlo.y[3])
        "Desired water flow at the shower (unit = kg/s)"
        annotation (Placement(transformation(extent={{204,2},{224,22}})));
      Modelica.Blocks.Sources.RealExpression sinT(y=TDra.y[4])
        "Desired outlet temperature ate the sink (unit = K)"
        annotation (Placement(transformation(extent={{204,96},{224,116}})));
      Modelica.Blocks.Sources.RealExpression disT(y=TDra.y[2])
        "Desired temperature at the dishwasher (unit = K)"
        annotation (Placement(transformation(extent={{204,-26},{224,-6}})));
      Modelica.Blocks.Sources.RealExpression disFlo(y=watFlo.y[2])
        "Desired water flow at the dishwasher (unit = kg/s)"
        annotation (Placement(transformation(extent={{204,-58},{224,-38}})));
      Modelica.Blocks.Sources.RealExpression kitSinT(y=TDra.y[1])
        "Desired temperature at the kitchen sink (unit = K)"
        annotation (Placement(transformation(extent={{204,-82},{224,-62}})));
      Modelica.Blocks.Sources.RealExpression kitSinFlo(y=watFlo.y[1])
        "Desired water flow at the kitchen sink (unit = kg/s)"
        annotation (Placement(transformation(extent={{204,-118},{224,-98}})));
      Modelica.Blocks.Sources.RealExpression sinFlo(y=watFlo.y[4])
        "Desired water flow rate at the sink (unit = kg/s)"
        annotation (Placement(transformation(extent={{204,62},{224,82}})));
      Modelica.Blocks.Sources.CombiTimeTable TIn(
        tableOnFile=true,
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTIn.txt",
        tableName="Temp")
        annotation (Placement(transformation(extent={{-236,38},{-216,58}})));

      Buildings.HeatTransfer.Sources.PrescribedTemperature
        prescribedTemperature
        annotation (Placement(transformation(extent={{-108,-22},{-88,-2}})));
    equation
      connect(hTru1.port_b, hBra11.port_a) annotation (Line(
          points={{30,60},{36,60},{36,100},{44,100}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hBra11.port_b, hTwi1.port_a) annotation (Line(
          points={{64,100},{94,100},{94,142},{126,142}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hBra11.port_b, hBra12.port_a) annotation (Line(
          points={{64,100},{126,100}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hTru1.port_b, hTru2.port_a) annotation (Line(
          points={{30,60},{68,60}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hTru2.port_b, hTru3.port_a) annotation (Line(
          points={{88,60},{126,60}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hTru2.port_b, hBra2.port_a) annotation (Line(
          points={{88,60},{94,60},{94,22},{126,22}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cTru1.port_b, cTru2.port_a) annotation (Line(
          points={{30,-126},{68,-126}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cTru1.port_b, cBra11.port_a) annotation (Line(
          points={{30,-126},{36,-126},{36,-88},{44,-88}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cBra11.port_b, cBra12.port_a) annotation (Line(
          points={{64,-88},{126,-88}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cBra11.port_b, cTwi1.port_a) annotation (Line(
          points={{64,-88},{94,-88},{94,-52},{126,-52}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cTru2.port_b, cTru3.port_a) annotation (Line(
          points={{88,-126},{126,-126}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cTru2.port_b, cBra2.port_a) annotation (Line(
          points={{88,-126},{94,-126},{94,-166},{126,-166}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(pwrSig.y[1], nonCon.pwrSig)
        annotation (Line(
          points={{-215,82},{-179,82}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], nonCon.AmbientTemperature)
        annotation (Line(
          points={{-253,-12},{-246,-12},{-246,119.2},{-179,119.2}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(sinFlo.y, Sink.WatFlowDes) annotation (Line(
          points={{225,72},{238,72},{238,82},{252,82}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(sinT.y, Sink.TOutDes) annotation (Line(
          points={{225,106},{238,106},{238,95},{252,95}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(shoFlo.y, Shower.WatFlowDes) annotation (Line(
          points={{225,12},{238,12},{238,22},{252,22}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(shoT.y, Shower.TOutDes) annotation (Line(
          points={{225,44},{238,44},{238,35},{252,35}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(disFlo.y, Dishwasher.WatFlowDes) annotation (Line(
          points={{225,-48},{238,-48},{238,-38},{252,-38}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(disT.y, Dishwasher.TOutDes) annotation (Line(
          points={{225,-16},{238,-16},{238,-25},{252,-25}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(kitSinFlo.y, KitchenSink.WatFlowDes) annotation (Line(
          points={{225,-108},{238,-108},{238,-96},{252,-96}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(kitSinT.y, KitchenSink.TOutDes) annotation (Line(
          points={{225,-72},{238,-72},{238,-83},{252,-83}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Mains.ports[1], nonCon.colWatIn)
        annotation (Line(
          points={{-172,46},{-164.6,46},{-164.6,80}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(TIn.y[1], Mains.T_in) annotation (Line(
          points={{-215,48},{-194,48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCon.hotWatOut, hTru1.port_a)
        annotation (Line(
          points={{-170,80},{-170,60},{10,60}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hTwi1.port_b, Sink.hotIn) annotation (Line(
          points={{146,142},{160,142},{160,90},{254,90}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cTwi1.port_b, Sink.colIn) annotation (Line(
          points={{146,-52},{160,-52},{160,86.4},{254,86.4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hBra12.port_b, Shower.hotIn) annotation (Line(
          points={{146,100},{170,100},{170,30},{254,30}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cBra12.port_b, Shower.colIn) annotation (Line(
          points={{146,-88},{170,-88},{170,26.4},{254,26.4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hTru3.port_b, Dishwasher.hotIn) annotation (Line(
          points={{146,60},{180,60},{180,-30},{254,-30}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cTru3.port_b, Dishwasher.colIn) annotation (Line(
          points={{146,-126},{180,-126},{180,-33.6},{254,-33.6}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(hBra2.port_b, KitchenSink.hotIn) annotation (Line(
          points={{146,22},{190,22},{190,-88},{254,-88}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cBra2.port_b, KitchenSink.colIn) annotation (Line(
          points={{146,-166},{190,-166},{190,-91.6},{254,-91.6}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(Mains.ports[2], cTru1.port_a) annotation (Line(
          points={{-172,42},{-164,42},{-164,-126},{10,-126}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, hTru1.heatPort) annotation (Line(
          points={{-88,-12},{20,-12},{20,55}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, cTru1.heatPort) annotation (Line(
          points={{-88,-12},{20,-12},{20,-121}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, hBra11.heatPort) annotation (Line(
          points={{-88,-12},{54,-12},{54,95}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, cBra11.heatPort) annotation (Line(
          points={{-88,-12},{54,-12},{54,-83}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, hTru2.heatPort) annotation (Line(
          points={{-88,-12},{78,-12},{78,55}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, cTru2.heatPort) annotation (Line(
          points={{-88,-12},{78,-12},{78,-121}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, hTwi1.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,132},{136,132},{136,137}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, hBra12.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,82},{136,82},{136,95}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, hTru3.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,44},{136,44},{136,55}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, hBra2.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,6},{136,6},{136,17}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, cTwi1.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,-34},{136,-34},{136,-47}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, cBra12.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,-74},{136,-74},{136,-83}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, cTru3.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,-110},{136,-110},{136,-121}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedTemperature.port, cBra2.heatPort) annotation (Line(
          points={{-88,-12},{110,-12},{110,-150},{136,-150},{136,-161}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(TAmb.y[1], prescribedTemperature.T) annotation (Line(
          points={{-253,-12},{-110,-12}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-275,
                -200},{275,200}}),      graphics), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-275,-200},{275,200}})),
              Documentation(info="<html>
          <p>
          This example shows how the components can be combined to create a hot water distribution system where a tankless water heater serves a house. The distribution system
          is simplified to only be single branches, rather than a full trunk and branch system. In this example pipes for both hot and cold water are included.
          </p>
          <p>
          The end use model is an instance of WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranch. It is a model intended to allow a user to specify a draw flow rate and 
          temperature. The model then uses a two-way valve to set the total system flow rate and a three-way valve to control the outlet temperature. The three-way valve 
          controls the outlet temperature by varying the amount of water which comes from the hot and cold water branched of the distribution system.
          </p>
          <p>
          The cold water branch of the distribution system is connected to the same boundary condition describing the mains water system as the water heater.<br>
          </p>
          </html>",
              revisions="<html>
          <ul>
          <li>
          Mar 28, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
    end HotAndColdDisWithTankless;

    model TankWithTrunkAndBranch
      "Demonstrates how to simulate a trunk and branch distribution system with a non-condensing storage tank heater"
      extends Modelica.Icons.Example;

      package Water = Buildings.Media.ConstantPropertyLiquidWater
        "Fluid in the system";

      parameter Modelica.SIunits.Temperature T_start_dis = 273.15+30
        "Initial temperature in the distribution system";

      NonCondensingTank.SimplifiedStorageTankMediumModel tan(
        nSeg=20,
        TStatHeight=16,
        RecircOutSeg=20,
        RecircInSeg=1,
        Deadband=16,
        UA=35,
        redeclare package Medium = Water,
        T_Initial={293.15,293.15,293.15,293.15,293.15,293.15,293.15,293.15,293.15,293.15,
            293.15,293.15,293.15,293.15,293.15,293.15,293.15,293.15,293.15,293.15})
        annotation (Placement(transformation(extent={{-14,-24},{14,8}})));
      Modelica.Blocks.Sources.CombiTimeTable watFlo(
        tableOnFile=true,
        tableName="Flow",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchFlow.txt",
        columns=2:5)
        "Reads a data file describing the desired water flow rate at each fixture[KitchenSink, Dishwasher, Shower, Sink]"
        annotation (Placement(transformation(extent={{-100,-72},{-80,-52}})));

      HWDis.Components.PipeLumpedCap
                             tru1(
        length=10,
        m_flow_nominal=0.1,
        dp_nominal=1,
        allowFlowReversal=false,
        nSeg=20,
        MixCoef=0.6,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis) "First section of the trunk pipe"
        annotation (Placement(transformation(extent={{24,-2},{44,18}})));

      HWDis.Components.PipeLumpedCap
                             bra11(
        m_flow_nominal=0.1,
        length=10,
        dp_nominal=1,
        nSeg=20,
        MixCoef=0.6,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)    annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={66,44})));

      HWDis.Components.PipeLumpedCap
                             bra2(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        length=10,
        MixCoef=0.6,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)    annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={150,-28})));

      HWDis.Components.PipeLumpedCap
                             twi1(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        length=10,
        MixCoef=0.6,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{140,68},{160,88}})));

      HWDis.Components.PipeLumpedCap
                             bra12(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        length=10,
        MixCoef=0.6,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{140,34},{160,54}})));

      HWDis.Components.PipeLumpedCap
                             tru2(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        length=10,
        MixCoef=0.6,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{84,-2},{104,18}})));

      HWDis.Components.PipeLumpedCap
                             tru3(
        m_flow_nominal=0.1,
        dp_nominal=1,
        nSeg=20,
        length=10,
        MixCoef=0.6,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{140,-2},{160,18}})));

      HWDis.Components.EndUse     Sink(                  gain=valCon, redeclare
          package Medium = Water) "Models the draw at a sink"
        annotation (Placement(transformation(extent={{180,68},{200,88}})));
      HWDis.Components.EndUse     Shower(                gain=valCon, redeclare
          package Medium = Water) "Models the draw at a shower"
        annotation (Placement(transformation(extent={{180,34},{200,54}})));
      HWDis.Components.EndUse     Dishwasher(            gain=valCon, redeclare
          package Medium = Water) "Models the draw at a dishwasher"
        annotation (Placement(transformation(extent={{180,-2},{200,18}})));
      HWDis.Components.EndUse     KitchenSink(           gain=valCon, redeclare
          package Medium = Water) "Models the draw at a kitchen sink"
        annotation (Placement(transformation(extent={{180,-38},{200,-18}})));
      Modelica.Blocks.Sources.CombiTimeTable TAmb(
        tableOnFile=true,
        tableName="Temp",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTAmb.txt")
        "Temperature surrounding the system(unit = K)"
        annotation (Placement(transformation(extent={{-100,86},{-80,106}})));
      Modelica.Blocks.Sources.CombiTimeTable TIn(
        tableOnFile=true,
        tableName="Temp",
        fileName=
            "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTIn.txt")
        "Inlet temperature (unit = K)"
        annotation (Placement(transformation(extent={{-100,2},{-80,22}})));
      Buildings.Fluid.Sources.Boundary_pT Mains(
        use_T_in=true,
        nPorts=1,
        redeclare package Medium = Water,
        p=150000) "Connects to the mains water system"
        annotation (Placement(transformation(extent={{-70,-2},{-50,18}})));
      parameter Real valCon = 1/13.25 "Gain value for the EndUse models";

      Modelica.Blocks.Sources.Constant const(k=0)
        annotation (Placement(transformation(extent={{-30,-20},{-24,-14}})));
      Modelica.Blocks.Sources.Constant effTan(k=0.75)
        annotation (Placement(transformation(extent={{-30,-8},{-24,-2}})));
      Modelica.Blocks.Math.Product product annotation (Placement(transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-7,-41})));
      Modelica.Blocks.Math.Add add annotation (Placement(transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-21,-37})));
      Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
            transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={7,-33})));
      Modelica.Blocks.Sources.Constant QDotBurner(k=12000) annotation (Placement(
            transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={7,-47})));
      Modelica.Blocks.Sources.Constant QDotPilot(k=158) annotation (Placement(
            transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-7,-31})));
      Modelica.Blocks.Sources.CombiTimeTable TRadMea(tableOnFile=true, tableName="TRadMea",
        fileName="/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTRadMea.txt")
        "Mean radiant temperature surrounding the pipes(unit = K)"
        annotation (Placement(transformation(extent={{-100,120},{-80,140}})));
    equation
      connect(tru1.port_b, tru2.port_a) annotation (Line(
          points={{44,8},{84,8}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra11.port_b, bra12.port_a) annotation (Line(
          points={{76,44},{140,44}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra11.port_b, twi1.port_a) annotation (Line(
          points={{76,44},{110,44},{110,78},{140,78}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru2.port_b, bra2.port_a) annotation (Line(
          points={{104,8},{110,8},{110,-28},{140,-28}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru2.port_b, tru3.port_a) annotation (Line(
          points={{104,8},{140,8}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(twi1.port_b, Sink.Inlet) annotation (Line(
          points={{160,78},{180,78}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra12.port_b, Shower.Inlet) annotation (Line(
          points={{160,44},{180,44}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tru3.port_b, Dishwasher.Inlet) annotation (Line(
          points={{160,8},{180,8}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra2.port_b, KitchenSink.Inlet) annotation (Line(
          points={{160,-28},{180,-28}},
          color={0,127,255},
          smooth=Smooth.None));

      connect(Mains.ports[1], tan.port_a) annotation (Line(
          points={{-50,8},{-2.8,8},{-2.8,8.64}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(const.y, tan.mFloRec) annotation (Line(
          points={{-23.7,-17},{-14,-17},{-14,-10.72},{-9.66,-10.72}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(const.y, tan.TInRec) annotation (Line(
          points={{-23.7,-17},{-14,-17},{-14,-17.12},{-9.66,-17.12}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], tan.TAmb) annotation (Line(
          points={{-79,96},{-20,96},{-20,-0.16},{-9.66,-0.16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(effTan.y, tan.EffTan) annotation (Line(
          points={{-23.7,-5},{-16.85,-5},{-16.85,-4.64},{-9.66,-4.64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QDotPilot.y,add. u2) annotation (Line(
          points={{-10.3,-31},{-14,-31},{-14,-35.2},{-17.4,-35.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(product.y, add.u1) annotation (Line(
          points={{-10.3,-41},{-14,-41},{-14,-38.8},{-17.4,-38.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QDotBurner.y, product.u1) annotation (Line(
          points={{3.7,-47},{0,-47},{0,-42.8},{-3.4,-42.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(integerToReal.y, product.u2) annotation (Line(
          points={{3.7,-33},{0,-33},{0,-39.2},{-3.4,-39.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tan.TStatSig, integerToReal.u) annotation (Line(
          points={{9.8,-16.64},{16,-16.64},{16,-33},{10.6,-33}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(add.y, tan.QDotIn) annotation (Line(
          points={{-24.3,-37},{-36,-37},{-36,5.76},{-9.8,5.76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(watFlo.y[1], KitchenSink.watFlo) annotation (Line(
          points={{-79,-62},{170,-62},{170,-33},{178,-33}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(watFlo.y[2], Dishwasher.watFlo) annotation (Line(
          points={{-79,-62},{170,-62},{170,3},{178,3}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(watFlo.y[3], Shower.watFlo) annotation (Line(
          points={{-79,-62},{170,-62},{170,39},{178,39}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(watFlo.y[4], Sink.watFlo) annotation (Line(
          points={{-79,-62},{170,-62},{170,73},{178,73}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], tru1.TAmb) annotation (Line(
          points={{-79,96},{28,96},{28,15}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], bra11.TAmb) annotation (Line(
          points={{-79,96},{60,96},{60,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], twi1.TAmb) annotation (Line(
          points={{-79,96},{144,96},{144,85}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], tru2.TAmb) annotation (Line(
          points={{-79,96},{88,96},{88,15}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], bra12.TAmb) annotation (Line(
          points={{-79,96},{114,96},{114,54},{144,54},{144,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], tru3.TAmb) annotation (Line(
          points={{-79,96},{114,96},{114,18},{144,18},{144,15}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y[1], bra2.TAmb) annotation (Line(
          points={{-79,96},{114,96},{114,-16},{144,-16},{144,-21}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], tru1.TRadMea) annotation (Line(
          points={{-79,130},{40,130},{40,15}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], bra11.TRadMea) annotation (Line(
          points={{-79,130},{72,130},{72,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], twi1.TRadMea) annotation (Line(
          points={{-79,130},{156,130},{156,85}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], tru2.TRadMea) annotation (Line(
          points={{-79,130},{100,130},{100,15}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], bra12.TRadMea) annotation (Line(
          points={{-79,130},{126,130},{126,62},{156,62},{156,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], tru3.TRadMea) annotation (Line(
          points={{-79,130},{126,130},{126,26},{156,26},{156,15}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y[1], bra2.TRadMea) annotation (Line(
          points={{-79,130},{126,130},{126,-8},{156,-8},{156,-21}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tan.port_b, tru1.port_a) annotation (Line(
          points={{4.2,8.64},{25.1,8.64},{25.1,8},{24,8}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(bra11.port_a, tru1.port_b) annotation (Line(
          points={{56,44},{50,44},{50,8},{44,8}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(TIn.y[1], Mains.T_in) annotation (Line(
          points={{-79,12},{-72,12}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -75},{200,150}}),       graphics), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-75},{200,150}})),
              Documentation(info="<html>
          <p>
          This example shows how several components can be combined to simulate a hot water distribution system in a house. The model starts at the left with text file inputs.
          The inputs include data for ambient temperature (TAmb), inlet temperature (TIn) and the desired hot water flow rate (watFlo).
          </p>
          <p>
          The inlet temperature data is passed from the data reader to a boundary condition model. The boundary condition model is used to represent the connection to the mains
          water system by allowing the user to specify the inlet temperature and the pressure of the mains system. It is currently assumed that the mains pressure is constant;
          however that can be changed by imitating the connection used to input the inlet temperature.
          </p>
          <p>
          The ambient temperature is read from the data file and passed into a prescribedTemperature model. This model gives the temperature number units (K). The ambient
          temperature is then connected to the pipe models describing the temperature of the air surrounding the pipes. The ambient temperature data file is also connected
          directly to the tankless water heater model for use in calculating the UA losses from the heat exchanger.
          </p>
          <p>
          The information from watFlo is passed into the four different hot water draw models. This information specifies the flow rate of hot water going from the tank to the 
          fixture at any given time in the simulation.
          </p>
          <p>
          The boundary condition representing the mains water system is connected to the water heater initiating the fluid flow system. After water passes through the
          heater it enters the distribution system. The distribution system in this model is a trunk and branch system representing four fixtures in a house. It only models
          the hot water pipes, ignoring the cold water pipes. Because the cold water pipes are not included in this model all flow rates are representing hot water flow, not flow
          of water leaving the fixture.
          </p>
          <p>
          Depending on which fixture is calling for hot water the water can pass through one of four paths in the distribution tree. The path of the water can be identified by
          following the blue lines from the heater to the fixture. For example, the hot water serving the shower passes from the tankless water heater through tru1, to bra11, to
          bra 12 and to the fixture itself. <br>
          </p>
          </html>",
              revisions="<html>
          <ul>
          <li>
          Mar 28, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
    end TankWithTrunkAndBranch;

    model HotAndColdDisWithTank
      "Model of a distribution system containting both hot and cold plumbing served with a tankless heater"
      extends Modelica.Icons.Example;

      package Water = Buildings.Media.ConstantPropertyLiquidWater
        "Fluid in the system";

      parameter Modelica.SIunits.Temperature T_start_dis = 273.15 + 30
        "Initial temperature in the dustribution system";

      HWDis.Components.Obsolete.EndUseLPSTwoBranch
                                           Draw(
        PID_P=2,
        PID_I=1,
        PID_D=0.00000001,
        gain=1/13.25,
        redeclare package Medium = Water,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{80,-12},{100,8}})));

      NonCondensingTank.SimplifiedStorageTankMediumModel tan(
        RecircOutSeg=8,
        RecircInSeg=1,
        Deadband=16,
        UA=5.5,
        perInA={0,0,0,0,0,0,0,0},
        perInB={0,0,0,0,0,0,0,0},
        perInC={0,0,0,0,0,0,0,1},
        timDelA={0,0,0,0,0,0,0,0},
        timDelB={0,0,0,0,0,0,0,0},
        timDelC={0,0,0,0,0,0,0,0},
        redeclare package Medium = Water,
        T_Initial={333.15,333.15,333.15,333.15,333.15,333.15,333.15,333.15})
        annotation (Placement(transformation(extent={{-66,-18},{-38,14}})));
      Buildings.Fluid.Sources.Boundary_pT Mains(
        nPorts=2,
        redeclare package Medium = Water,
        p=150000,
        T=288.15)
        annotation (Placement(transformation(extent={{-110,26},{-90,46}})));

      Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
        annotation (Placement(transformation(extent={{-146,0},{-126,20}})));
      HWDis.Components.PipeLumpedCap
                             Hot(
        m_flow_nominal=0.06,
        dp_nominal=1,
        MixCoef=0.6,
        length=0.1,
        nSeg=20,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{18,-36},{38,-16}})));

      HWDis.Components.PipeLumpedCap
                             Cold(
        m_flow_nominal=0.06,
        dp_nominal=1,
        length=10,
        MixCoef=0.6,
        nSeg=20,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{18,28},{38,48}})));

      Modelica.Blocks.Sources.Ramp ramp(
        height=45,
        offset=273.15 + 20,
        duration=30000)
        annotation (Placement(transformation(extent={{28,-64},{48,-44}})));
      Modelica.Blocks.Sources.Constant watFlow(k=0.126) "Unit = L/s"
        annotation (Placement(transformation(extent={{46,48},{66,68}})));
      Modelica.Blocks.Sources.Constant effTan(k=0.75)
        annotation (Placement(transformation(extent={{-82,0},{-76,6}})));
      Modelica.Blocks.Sources.Constant const(k=0)
        annotation (Placement(transformation(extent={{-82,-12},{-76,-6}})));
      Modelica.Blocks.Math.Add add annotation (Placement(transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-67,-31})));
      Modelica.Blocks.Sources.Constant QDotPilot(k=158) annotation (Placement(
            transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-53,-25})));
      Modelica.Blocks.Math.Product product annotation (Placement(transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-53,-35})));
      Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
            transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-39,-27})));
      Modelica.Blocks.Sources.Constant QDotBurner(k=12000) annotation (Placement(
            transformation(
            extent={{-3,-3},{3,3}},
            rotation=180,
            origin={-39,-41})));
      Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 20)
        annotation (Placement(transformation(extent={{-146,70},{-126,90}})));
    equation
      connect(Mains.ports[1], Cold.port_a) annotation (Line(
          points={{-90,38},{18,38}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(Cold.port_b, Draw.colIn) annotation (Line(
          points={{38,38},{44,38},{44,1.6},{80,1.6}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(ramp.y, Draw.TOutDes) annotation (Line(
          points={{49,-54},{62,-54},{62,-7},{78,-7}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(watFlow.y, Draw.WatFlowDes) annotation (Line(
          points={{67,58},{72,58},{72,5},{78,5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Hot.port_b, Draw.hotIn) annotation (Line(
          points={{38,-26},{44,-26},{44,-2},{80,-2}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(Mains.ports[2], tan.port_a) annotation (Line(
          points={{-90,34},{-54.8,34},{-54.8,14.64}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tan.port_b, Hot.port_a) annotation (Line(
          points={{-47.8,14.64},{-47.8,16},{-24,16},{-24,-26},{18,-26}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tan.TStatSig, integerToReal.u) annotation (Line(
          points={{-42.2,-10.64},{-30,-10.64},{-30,-27},{-35.4,-27}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(integerToReal.y, product.u2) annotation (Line(
          points={{-42.3,-27},{-46,-27},{-46,-33.2},{-49.4,-33.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QDotBurner.y, product.u1) annotation (Line(
          points={{-42.3,-41},{-46,-41},{-46,-36.8},{-49.4,-36.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(product.y, add.u1) annotation (Line(
          points={{-56.3,-35},{-60,-35},{-60,-32.8},{-63.4,-32.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QDotPilot.y, add.u2) annotation (Line(
          points={{-56.3,-25},{-60,-25},{-60,-29.2},{-63.4,-29.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(const.y, tan.TInRec) annotation (Line(
          points={{-75.7,-9},{-69.85,-9},{-69.85,-11.12},{-61.66,-11.12}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(const.y, tan.mFloRec) annotation (Line(
          points={{-75.7,-9},{-70,-9},{-70,-4.72},{-61.66,-4.72}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(effTan.y, tan.EffTan) annotation (Line(
          points={{-75.7,3},{-70,3},{-70,1.36},{-61.66,1.36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y, tan.TAmb) annotation (Line(
          points={{-125,10},{-70,10},{-70,5.84},{-61.66,5.84}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(add.y, tan.QDotIn) annotation (Line(
          points={{-70.3,-31},{-84,-31},{-84,11.76},{-61.8,11.76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y, Cold.TAmb) annotation (Line(
          points={{-125,10},{-116,10},{-116,52},{22,52},{22,45}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y, Hot.TAmb) annotation (Line(
          points={{-125,10},{-116,10},{-116,52},{4,52},{4,-6},{22,-6},{22,-19}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y, Cold.TRadMea) annotation (Line(
          points={{-125,80},{34,80},{34,45}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y, Hot.TRadMea) annotation (Line(
          points={{-125,80},{12,80},{12,6},{34,6},{34,-19}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-150,
                -100},{150,100}}),      graphics), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-150,-100},{150,100}})),
              Documentation(info="<html>
          <p>
          This example shows how the components can be combined to create a hot water distribution system where a storage tank water heater serves a house. The distribution
           system is simplified to only be single branches, rather than a full trunk and branch system. In this example pipes for both hot and cold water are included.
          </p>
          <p>
          The end use model is an instance of WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranch. It is a model intended to allow a user to specify a draw flow rate and 
          temperature. The model then uses a two-way valve to set the total system flow rate and a three-way valve to control the outlet temperature. The three-way valve 
          controls the outlet temperature by varying the amount of water which comes from the hot and cold water branched of the distribution system.
          </p>
          <p>
          The cold water branch of the distribution system is connected to the same boundary condition describing the mains water system as the water heater.<br>
          </p>
          </html>",
              revisions="<html>
          <ul>
          <li>
          Mar 28, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
    end HotAndColdDisWithTank;

    model TanklessWithPIDDraw
      extends Modelica.Icons.Example;

      package Water = Buildings.Media.ConstantPropertyLiquidWater "Water model";

      parameter Modelica.SIunits.Temperature T_start_dis = 273.15 + 30
        "Initial temperature in the distribution system";

      HWDis.Components.Obsolete.EndUseLPSPID
                                    endUseLPSPID(
        redeclare package Medium = Water,
        PID_P=2,
        PID_I=3,
        PID_D=0.1)
        annotation (Placement(transformation(extent={{58,-12},{78,8}})));
      NonCondensingTankless.NonCondensingTanklessHeaterMediumModel
        nonCondensingTanklessHeaterMediumModel(redeclare package Medium = Water)
        annotation (Placement(transformation(extent={{-40,2},{-14,48}})));
      HWDis.Components.PipeLumpedCap
                            pip(
        redeclare package Medium = Water,
        m_flow_nominal=0.063,
        dp_nominal=1,
        length=10,
        MixCoef=0.6,
        nSeg=20,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{-2,-14},{18,6}})));
      Buildings.Fluid.Sources.Boundary_pT boundary(
        nPorts=1,
        redeclare package Medium = Water,
        p=150000,
        T=288.15)
        annotation (Placement(transformation(extent={{-96,-38},{-76,-18}})));
      Modelica.Blocks.Sources.Constant pwrSig(k=1)
        annotation (Placement(transformation(extent={{-96,-6},{-76,14}})));
      Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
        annotation (Placement(transformation(extent={{-96,36},{-76,56}})));
      Modelica.Blocks.Sources.Constant const2(k=0.063)
        annotation (Placement(transformation(extent={{16,-48},{36,-28}})));
      Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 20)
        annotation (Placement(transformation(extent={{-96,74},{-76,94}})));
    equation
      connect(nonCondensingTanklessHeaterMediumModel.hotWatOut, pip.port_a)
        annotation (Line(
          points={{-34.8,2},{-34.8,-4},{-2,-4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(pip.port_b, endUseLPSPID.Inlet) annotation (Line(
          points={{18,-4},{34,-4},{34,3.4},{58,3.4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHeaterMediumModel.colWatIn, boundary.ports[1])
        annotation (Line(
          points={{-30.12,2},{-30,2},{-30,-28},{-76,-28}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(pwrSig.y, nonCondensingTanklessHeaterMediumModel.pwrSig)
                                                                      annotation (
          Line(
          points={{-75,4},{-60,4},{-60,3.84},{-42.6,3.84}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y, nonCondensingTanklessHeaterMediumModel.AmbientTemperature)
        annotation (Line(
          points={{-75,46},{-60,46},{-60,38.064},{-42.6,38.064}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(const2.y, endUseLPSPID.watFlo) annotation (Line(
          points={{37,-38},{46,-38},{46,-7},{56,-7}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y, pip.TAmb) annotation (Line(
          points={{-75,46},{2,46},{2,3}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y, pip.TRadMea) annotation (Line(
          points={{-75,84},{14,84},{14,3}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics),
                Documentation(info="<html>
            <p>
            This model provides a simple example of how a tankless water heater model and an end use model with PID control can be combined. The model consists of a tankless
            water heater, with constant input conditions, serving a single pipe with a single draw. The inputs to the endUse model are a connection to the water flow system
            via the fluid ports on the endUse model and the pipe, as well as a specified flow rate through the constant model. This endUse model is considered to be easier
            to use than in the other example files because the PID controller will adjust the valve position until the outlet flow rate matches the desired flow rate rather
            than requiring the user to adjust a gain value until it does.<br>
            </p>
            </html>",
                revisions="<html>
            <ul>
            <li>
            Mar 28, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
    end TanklessWithPIDDraw;

    model HotAndColdDisWithTanklessPID
      "Model of a distribution system containting both hot and cold plumbing served with a tankless heater"
      extends Modelica.Icons.Example;

      package Water = Buildings.Media.ConstantPropertyLiquidWater
        "Fluid in the system";

      parameter Modelica.SIunits.Temperature T_start_dis = 273.15 + 30
        "Initial temperature in the distribution system";

      HWDis.Components.EndUseTwoBranch     Draw(
        PID_P_3=2,
        PID_I_3=3,
        PID_D_3=0.1,
        PID_P_2=2,
        PID_I_2=3,
        PID_D_2=0.1,
        redeclare package Medium = Water,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{80,-12},{100,8}})));

      NonCondensingTankless.NonCondensingTanklessHeaterMediumModel
        nonCondensingTanklessHeaterMediumModel(redeclare package Medium = Water)
        annotation (Placement(transformation(extent={{-70,-14},{-50,10}})));
      Buildings.Fluid.Sources.Boundary_pT Mains(
        nPorts=2,
        redeclare package Medium = Water,
        p=150000,
        T=288.15)
        annotation (Placement(transformation(extent={{-110,26},{-90,46}})));

      Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
        annotation (Placement(transformation(extent={{-146,-6},{-126,14}})));
      HWDis.Components.PipeLumpedCap
                             Hot(
        m_flow_nominal=0.06,
        dp_nominal=1,
        MixCoef=0.6,
        nSeg=20,
        diameter_i=0.019939,
        length=10,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{18,-36},{38,-16}})));

      HWDis.Components.PipeLumpedCap
                             Cold(
        m_flow_nominal=0.06,
        dp_nominal=1,
        length=10,
        MixCoef=0.6,
        nSeg=20,
        diameter_i=0.019939,
        c_p_pip=390,
        rho_pip=8960,
        diameter_o=0.022225,
        til=0,
        ePipe=0.95,
        redeclare package Medium = Water,
        thicknessIns=0.0127,
        lambdaIns=0.04,
        T_start=T_start_dis)
        annotation (Placement(transformation(extent={{18,28},{38,48}})));

      Modelica.Blocks.Sources.Constant pwrSig(k=1)
        annotation (Placement(transformation(extent={{-146,-60},{-126,-40}})));
      Modelica.Blocks.Sources.Ramp ramp(
        duration=600,
        offset=273.15 + 20,
        height=40)
        annotation (Placement(transformation(extent={{28,-64},{48,-44}})));
      HWDis.Components.FlowReduction floRed
        annotation (Placement(transformation(extent={{-8,-94},{12,-74}})));
      Buildings.Utilities.Math.Min min(nin=2)
        annotation (Placement(transformation(extent={{-38,-86},{-18,-66}})));
      Modelica.Blocks.Sources.Ramp ramp1(
        height=0.378,
        duration=600,
        offset=0.063,
        startTime=660)
        annotation (Placement(transformation(extent={{-146,-94},{-126,-74}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=floRed.draFlo[1])
        annotation (Placement(transformation(extent={{48,12},{60,26}})));
      Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 20)
        annotation (Placement(transformation(extent={{-128,74},{-108,94}})));
    equation
      connect(Mains.ports[1], Cold.port_a) annotation (Line(
          points={{-90,38},{18,38}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(Cold.port_b, Draw.colIn) annotation (Line(
          points={{38,38},{44,38},{44,1.6},{80,1.6}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(pwrSig.y, nonCondensingTanklessHeaterMediumModel.pwrSig)
        annotation (Line(
          points={{-125,-50},{-76,-50},{-76,-13.04},{-72,-13.04}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Mains.ports[2], nonCondensingTanklessHeaterMediumModel.colWatIn)
        annotation (Line(
          points={{-90,34},{-84,34},{-84,-22},{-62.4,-22},{-62.4,-14}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(ramp.y, Draw.TOutDes) annotation (Line(
          points={{49,-54},{62,-54},{62,-7},{78,-7}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHeaterMediumModel.hotWatOut, Hot.port_a)
        annotation (Line(
          points={{-66,-14},{-66,-26},{18,-26}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(TAmb.y, nonCondensingTanklessHeaterMediumModel.AmbientTemperature)
        annotation (Line(
          points={{-125,4},{-92.5,4},{-92.5,4.816},{-72,4.816}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Hot.port_b, Draw.hotIn) annotation (Line(
          points={{38,-26},{44,-26},{44,-2},{80,-2}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(ramp1.y, min.u[1]) annotation (Line(
          points={{-125,-84},{-82,-84},{-82,-77},{-40,-77}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(min.y, floRed.conFlo) annotation (Line(
          points={{-17,-76},{-10,-76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ramp1.y, floRed.desFlo[1]) annotation (Line(
          points={{-125,-84},{-82,-84},{-82,-91.4},{-10,-91.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHeaterMediumModel.maxMasFlo, min.u[2])
        annotation (Line(
          points={{-49,-5.36},{-46,-5.36},{-46,-75},{-40,-75}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression.y, Draw.WatFlowDes) annotation (Line(
          points={{60.6,19},{66,19},{66,6},{78,6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y, Cold.TAmb) annotation (Line(
          points={{-125,4},{-116,4},{-116,60},{22,60},{22,45}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb.y, Hot.TAmb) annotation (Line(
          points={{-125,4},{-116,4},{-116,60},{-16,60},{-16,-14},{22,-14},{22,-19}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(TRadMea.y, Cold.TRadMea) annotation (Line(
          points={{-107,84},{34,84},{34,45}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TRadMea.y, Hot.TRadMea) annotation (Line(
          points={{-107,84},{-4,84},{-4,-2},{34,-2},{34,-19}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-150,
                -100},{150,100}}),      graphics), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-150,-100},{150,100}})),
              Documentation(info="<html>
          <p>
          This example shows how the components can be combined to create a hot water distribution system where a tankless water heater serves a house. The distribution system
          is simplified to only be single branches, rather than a full trunk and branch system. In this example pipes for both hot and cold water are included.
          </p>
          <p>
          The end use model is an instance of WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranchPID. It is a model intended to allow a user to specify a draw flow rate and 
          temperature. The model then uses a two-way valve to set the total system flow rate and a three-way valve to control the outlet temperature. The three-way valve 
          controls the outlet temperature by varying the amount of water which comes from the hot and cold water branched of the distribution system.
          </p>
          <p>
          The cold water branch of the distribution system is connected to the same boundary condition describing the mains water system as the water heater.<br>
          </p>
          </html>",
              revisions="<html>
          <ul>
          <li>
          Mar 28, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
    end HotAndColdDisWithTanklessPID;

    annotation ();
  end CombinedExamples;

  package CondensingTank
    package Examples
      model CondensingWaterHeater "Test model for water heater"
        import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
        extends Modelica.Icons.Example;
        import Modelica.SIunits;
        package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nStaRef=6 "Number of states in a reference material";
      //  parameter Integer nSeg=tan.nSeg;
        parameter Real T_DB = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "DryBulbTemperature");
        parameter Real TMeaRad = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "MeanRadiantTemperature");
        parameter Real T_Floor = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FloorTemperature");
        parameter Real Q_P = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "QDot_Pilot");
        parameter Real Q_Burner = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "QDot_Burner");
        parameter Real T_Set = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "T_Set");
        parameter Real Deadband = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "ThermostatDeadband");
        parameter Real TankVolume = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "TankVolume");
        parameter Real FlueDiameter = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueDiameter");
        parameter Real FlueLength = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueLength");
        parameter Real InletWaterTemp = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "InletWaterTemp");
        parameter Real FlueToWaterConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueToWaterConvectionCoefficient");
        parameter Real GasToFlueConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasToFlueConvectionCoefficient");
        parameter Real TankDiameter = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "TankDiameter");
        parameter Real GasToBaseConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasToBaseConvectionCoefficient");
        parameter Real FuelHigherHeatingValue = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FuelHigherHeatingValue");
        parameter Real FuelLowerHeatingValue = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FuelLowerHeatingValue");
        parameter Real StoichiometricAirFuelRatio = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "StoichiometricAirFuelRatio");
        parameter Real ExcessAir = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "ExcessAir");
        parameter Real GasSpecificHeat = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasSpecificHeat");
      //  parameter Real InitialTemp = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "T_Initial");
        parameter Integer nSeg = WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "nSeg");
      //  parameter Integer ThermostatHeight = WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "ThermostatHeight");
        inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            massDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial) annotation (
            Placement(transformation(extent={{-140,-138},{-120,-118}})));
        Buildings.HeatTransfer.Sources.PrescribedTemperature TBCBot
          "Boundary condition for tank" annotation (Placement(transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={-56,-8})));
        Modelica.Blocks.Sources.Constant QBurner(k=11000) annotation (Placement(
              transformation(extent={{140,-78},{120,-98}}, rotation=0)));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayExt(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          nLay=2,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
              x=0.012,
              k=4.671,
              c=473,
              d=7801,
              nStaRef=nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
              x=0.013,
              k=0.04,
              c=1380,
              d=150,
              nStaRef=nStaRef)}) "Tank Envelope"
          annotation (Placement(transformation(extent={{-142,-98},{-124,-80}})));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayTanBot(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          final nLay=1,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
                  x=0.003176,
                  k=4.671,
                  c=473,
                  d=7801,
                  nStaRef=nStaRef)}) "Flue Wall"
          annotation (Placement(transformation(extent={{-114,-98},{-96,-80}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor T_sensor
          "switch temperature"
          annotation (Placement(transformation(extent={{62,-16},{72,-6}})));
        Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=12)
          annotation (Placement(transformation(extent={{56,-142},{36,-122}})));
        Modelica.Blocks.Sources.Constant T_switch(k=273.105 + 48)
          annotation (Placement(transformation(extent={{142,-136},{122,-116}})));
        Modelica.Blocks.Math.BooleanToReal booleanToInteger
          annotation (Placement(transformation(extent={{24,-142},{4,-122}})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-2,-74})));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayFlue(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          final nLay=1,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
                  x=0.000753,
                  k=4.671,
                  c=1,
                  d=7801,
                  nStaRef=nStaRef)}) "Flue Wall"
          annotation (Placement(transformation(extent={{-84,-98},{-66,-80}})));
        Modelica.Blocks.Sources.Constant TDryBul(k=T_DB)
          annotation (Placement(transformation(extent={{140,68},{120,88}})));
        Modelica.Blocks.Sources.Constant TRadMea(k=TMeaRad)
          annotation (Placement(transformation(extent={{140,30},{120,50}})));
        Modelica.Blocks.Sources.Constant TFloor(k=T_Floor)
          annotation (Placement(transformation(extent={{-134,-18},{-114,2}})));
        Modelica.Blocks.Sources.Constant QPilot(k=158) annotation (Placement(
              transformation(extent={{140,-42},{120,-62}}, rotation=0)));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,-36})));
        BaseClasses.Burner.Gas burn(
          datTanEnv(
            layers=matLayExt,
            A=1.75,
            til=Buildings.HeatTransfer.Types.Tilt.Wall,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvBot(
            layers=matLayTanBot,
            A=0.12,
            til=Buildings.HeatTransfer.Types.Tilt.Floor,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          absIR_FS=0.2,
          DTan=TankDiameter,
          DFlu=FlueDiameter,
          h_GB=GasToBaseConvectionCoefficient,
          deltaHc_H=FuelHigherHeatingValue,
          deltaHc_L=FuelLowerHeatingValue,
          stoich=StoichiometricAirFuelRatio,
          EA=ExcessAir,
          cp_G=GasSpecificHeat)
          annotation (Placement(transformation(extent={{-24,0},{34,42}})));
        WaterHeaterLib.CondensingTank
                                   tan(
          allowFlowReversal=false,
          m_flow_nominal=0.001,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          redeclare package Medium = Medium,
          datTanEnv(
            layers=matLayExt,
            A=1.75,
            til=Buildings.HeatTransfer.Types.Tilt.Wall,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvTop(
            layers=matLayExt,
            A=0.04,
            til=Buildings.HeatTransfer.Types.Tilt.Ceiling,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvBot(
            layers=matLayTanBot,
            A=0.12,
            til=Buildings.HeatTransfer.Types.Tilt.Floor,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          h_cw_B_cons=1000,
          datFlueWall(
            layers=matLayFlue,
            A=0.236,
            til=Buildings.HeatTransfer.Types.Tilt.Wall),
          c_wB=1/15,
          c_wI=0.001,
          c_sr=110000,
          conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
          VTan=TankVolume,
          DFlu=FlueDiameter,
          LFlu=FlueLength,
          TIn=InletWaterTemp,
          h_WF_cons=FlueToWaterConvectionCoefficient,
          nSeg=nSeg,
          perInA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0033,2.8428,-0.4415,6.1873,4.0134},
          perInB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1405,0.102,-0.2213,-2.8662,-2.0619},
          perInC={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.0224,-0.0032,0.2329,0.5048,0.7896},
          timDelA={-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,
              -2092.3,-2092.3,-2092.3,-2092.3,-2376.6,-2660.9,-3112.4,-1971.9,-567.21,
              100.33,0},
          timDelB={812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,
              812.61,812.61,812.61,802.41,792.21,805.42,475.76,79.1,-14.047,0},
          timDelC={7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,
              7.6157,7.6157,7.6157,7.9334,8.2512,8.1676,14.305,21.676,0.2408,0},
          T_Initial={326.139441,326.139441,326.139442,326.139441,326.078106,326.078106,
              326.078106,326.080484,326.080484,326.080484,326.080484,326.038548,
              326.038548,326.038548,324.322451,325.322451,324.437641,322.833392,
              322.833392,321.872635})
          annotation (Placement(transformation(extent={{-52,48},{62,136}})));
        Modelica.Blocks.Tables.CombiTable1Ds WaterFlow[nSeg](
          tableOnFile=true,
          tableName="Flow",
          fileName="26-WaterFlowFromTest8.txt")
          annotation (Placement(transformation(extent={{-112,126},{-92,146}})));
        Modelica.Blocks.Sources.RealExpression Time[nSeg](y=time)
          annotation (Placement(transformation(extent={{-154,126},{-134,146}})));
        Modelica.Blocks.Tables.CombiTable1Ds UATemp(
          tableOnFile=true,
          tableName="Temp",
          fileName="26-UALossTempData.txt",
          columns=2:9)
          annotation (Placement(transformation(extent={{-108,80},{-88,100}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=time)
          annotation (Placement(transformation(extent={{-148,80},{-128,100}})));
        Modelica.Blocks.Tables.CombiTable1Ds TstatStatus(
          tableOnFile=true,
          tableName="Tstat",
          fileName="26-TstatDataFromTest8.txt")
          annotation (Placement(transformation(extent={{-108,50},{-88,70}})));
        Modelica.Blocks.Tables.CombiTable1Ds Test8Temps(
          tableOnFile=true,
          tableName="Temp",
          fileName="26-TempDataFromTest8.txt",
          columns=2:13)
          annotation (Placement(transformation(extent={{-108,18},{-88,38}})));
        WaterHeaterLib.BaseClasses.hGasFlu hGasFlu(
          nSeg=nSeg,
          a=1,
          b=1,
          c=1) annotation (Placement(transformation(extent={{88,94},{108,114}})));
      equation
        connect(T_switch.y, onOffController.reference) annotation (Line(
            points={{121,-126},{58,-126}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(onOffController.y, booleanToInteger.u) annotation (Line(
            points={{35,-132},{26,-132}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(booleanToInteger.y, product.u1) annotation (Line(
            points={{3,-132},{-6.8,-132},{-6.8,-83.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TFloor.y, TBCBot.T) annotation (Line(
            points={{-113,-8},{-88.1,-8},{-88.1,-8},{-63.2,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QBurner.y, product.u2) annotation (Line(
            points={{119,-88},{2.8,-88},{2.8,-83.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, add.u1) annotation (Line(
            points={{-2,-65.2},{-2,-48},{-8.88178e-016,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QPilot.y, add.u2) annotation (Line(
            points={{119,-52},{12,-52},{12,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, burn.QBurner) annotation (Line(
            points={{6,-25},{6,-2},{16.31,-2},{16.31,5.64828}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TBCBot.port, burn.heaPorBot) annotation (Line(
            points={{-50,-8},{3.26,-8},{3.26,5.50345}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(TDryBul.y, burn.TDryBul) annotation (Line(
            points={{119,78},{74,78},{74,-2},{-8.195,-2},{-8.195,5.50345}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.heaPorBot, burn.heaPorTop) annotation (Line(
            points={{-9.84151,45.8537},{-9.84151,47},{-9.5,47},{-9.5,36.2069}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(tan.Q_B, burn.Q_B) annotation (Line(
            points={{0.483019,45.8537},{0.483019,47},{1.23,47},{1.23,36.3517}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.T_F0_y, burn.T_F0_y) annotation (Line(
            points={{9.73208,46.9268},{9.73208,47.5},{10.365,47.5},{10.365,
                36.2069}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.cdot_G_y, burn.cdot_G_y) annotation (Line(
            points={{18.766,46.9268},{18.766,47.5},{19.355,47.5},{19.355,
                35.9172}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul.y, tan.TDryBul) annotation (Line(
            points={{119,78},{74,78},{74,100.371},{28.4453,100.371}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea.y, tan.TRadMea)  annotation (Line(
            points={{119,40},{74,40},{74,66.4585},{27.8,66.4585}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.heaPor[18], T_sensor.port) annotation (Line(
            points={{28.3377,84.3805},{46,84.3805},{46,-11},{62,-11}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(T_sensor.T, onOffController.u) annotation (Line(
            points={{72,-11},{80,-11},{80,-138},{58,-138}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y, WaterFlow.u)               annotation (Line(
            points={{-133,136},{-114,136}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(WaterFlow.y[1], tan.m_flow_in)     annotation (Line(
            points={{-91,136},{-56.5509,136},{-56.5509,136.429},{-22.1019,
                136.429}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, UATemp.u)         annotation (Line(
            points={{-127,90},{-110,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, TstatStatus.u)    annotation (Line(
            points={{-127,90},{-122,90},{-122,60},{-110,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, Test8Temps.u) annotation (Line(
            points={{-127,90},{-120,90},{-120,28},{-110,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.heaPor, hGasFlu.TWat) annotation (Line(
            points={{28.3377,84.3805},{46,84.3805},{46,105},{88,105}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(hGasFlu.y, tan.h_cv_F) annotation (Line(
            points={{109.8,105},{118,105},{118,122},{74,122},{74,122.049},{
                28.8755,122.049}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-150,-150},{150,
                  150}}),      graphics),
          __Dymola_Commands(file=
                "modelica://Buildings/Resources/Scripts/Dymola/Fluid/Storage/Examples/Stratified.mos"
              "Simulate and plot"),
          Documentation(info="<html>
This test model compares two tank models. The only difference between
the two tank models is that one uses the third order upwind discretization
scheme that reduces numerical diffusion that is induced when connecting 
volumes in series.
</html>"),Icon(coordinateSystem(preserveAspectRatio=true, extent={{-150,-150},{
                  150,150}})));
      end CondensingWaterHeater;

      model SimplifiedCondensingWaterHeater
        "Provides a model to simulate condensing storage tank water heaters using the simplified model"
        extends Modelica.Icons.Example;
        package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nSeg = 5;
        Modelica.SIunits.Temperature TTanAvg "Average temperature of the tank";

        NonCondensingTank.SimplifiedStorageTank
                                   tan(
          redeclare package Medium = Water,
          T_Initial={323.15,323.15,323.15,323.15,323.15},
          perInA={0,0,0,0,0},
          perInB={0,0,0,0,0},
          perInC={0,0,0,0,1},
          timDelA={0,0,0,0,0},
          timDelB={0,0,0,0,0},
          timDelC={0,0,0,0,0},
          nSeg=5,
          TStatHeight=4,
          RecircOutSeg=5,
          RecircInSeg=1,
          Deadband=12,
          UA=35)
          annotation (Placement(transformation(extent={{-46,2},{72,94}})));
        BaseClasses.EffTankCond EffTan(
          nSeg=nSeg,
          a=0,
          b=-0.01,
          c=4.1315)
          annotation (Placement(transformation(extent={{-104,40},{-84,60}})));
        Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-120})));
        Modelica.Blocks.Sources.Constant QDotBurner(k=12000) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-88})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-10,-94})));
        Modelica.Blocks.Sources.Constant QDotPilot(k=158) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={0,-68})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-48,-88})));
        Modelica.Blocks.Sources.Constant mFloRecirc(k=0)
          annotation (Placement(transformation(extent={{-150,-2},{-130,18}})));
        Modelica.Blocks.Sources.Constant TInRecirc(k=273.105 + 20)
          annotation (Placement(transformation(extent={{-150,-34},{-130,-14}})));
        NonCondensingTank.BaseClasses.QEle
                         qEle annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-142})));
        Modelica.Blocks.Sources.Ramp ramp[nSeg](
          duration=100,
          height=0.006,
          offset=0.006)
          annotation (Placement(transformation(extent={{-92,114},{-72,134}})));
        Modelica.Blocks.Sources.Constant const(k=273.15 + 15)
          annotation (Placement(transformation(extent={{-92,158},{-72,178}})));
        Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
          annotation (Placement(transformation(extent={{-152,86},{-136,102}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=TTanAvg)
          annotation (Placement(transformation(extent={{-156,40},{-136,60}})));
      equation

          TTanAvg = sum(tan.vol.T)/nSeg;
        connect(EffTan.y, tan.EffTan)  annotation (Line(
            points={{-82.2,51},{-78.1,51},{-78.1,51.3659},{-48.2264,51.3659}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBurner.y,product. u1) annotation (Line(
            points={{29,-88},{2,-88}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,product. u2) annotation (Line(
            points={{29,-120},{16,-120},{16,-100},{2,-100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotPilot.y,add. u2) annotation (Line(
            points={{-11,-68},{-26,-68},{-26,-82},{-36,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y,add. u1) annotation (Line(
            points={{-21,-94},{-36,-94}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,qEle. BurnerStatus) annotation (Line(
            points={{29,-120},{16,-120},{16,-142},{2,-142}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ramp.y, tan.m_flow_in) annotation (Line(
            points={{-71,124},{-15.0528,124},{-15.0528,94.4488}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const.y, tan.TIn) annotation (Line(
            points={{-71,168},{23.0189,168},{23.0189,96.4683}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb.y, tan.TAmb) annotation (Line(
            points={{-135.2,94},{-80,94},{-80,66.961},{-50.5642,66.961}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRecirc.y, tan.mFloRec) annotation (Line(
            points={{-129,8},{-80,26},{-80,35.6585},{-48.4491,35.6585}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRecirc.y, tan.TInRec) annotation (Line(
            points={{-129,-24},{-68,-6},{-68,20.8488},{-48.6717,20.8488}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, tan.QDotIn) annotation (Line(
            points={{-59,-88},{-178,-88},{-178,110},{-108,110},{-108,82.7805},{
                -50.2302,82.7805}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.TStatSig, integerToReal.u) annotation (Line(
            points={{74.8943,19.5024},{116,19.5024},{116,-120},{52,-120}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(realExpression.y, EffTan.TWatAvg) annotation (Line(
            points={{-135,50},{-106,50}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -200},{200,200}}), graphics),
                                      Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-200},{200,200}})));
      end SimplifiedCondensingWaterHeater;

      model SimplifiedCondensingWaterHeaterRepeatedDraws
        "Uses data from repeated draws to characterize some aspects of the model"
        extends Modelica.Icons.Example;
        package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nSeg = 20;
        Modelica.SIunits.Temperature TTanAvg "Average temperature of the tank";
        Modelica.SIunits.Temp_K TTanSumValidation
          "Average temperature of the tank";

        NonCondensingTank.SimplifiedStorageTank
                                   tan(
          redeclare package Medium = Water,
          RecircOutSeg=5,
          RecircInSeg=1,
          UA=35,
          timDelA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          timDelB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          nSeg=20,
          timDelC={30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
          perInA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          perInB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          perInC={0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11},
          VTan=0.19,
          TStatHeight=14,
          Deadband=16,
          T_Initial={330.15,330.15,330.15,330.15,330.15,330.15,330.15,330.15,
              330.15,330.15,330.15,330.15,330.15,330.15,330.15,330.15,330.15,
              330.15,330.15,330.15},
          TSet=273.15 + 50)
          annotation (Placement(transformation(extent={{-46,2},{72,94}})));

        BaseClasses.EffTankCond EffTan(
          nSeg=nSeg,
          a=0,
          b=-0.0101,
          c=4.113315)
          annotation (Placement(transformation(extent={{-104,40},{-84,60}})));
        Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-120})));
        Modelica.Blocks.Sources.Constant QDotBurner(k=22273) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-88})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-10,-94})));
        Modelica.Blocks.Sources.Constant QDotPilot(k=0)   annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={0,-68})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-48,-88})));
        Modelica.Blocks.Sources.Constant mFloRecirc(k=0)
          annotation (Placement(transformation(extent={{-150,-2},{-130,18}})));
        Modelica.Blocks.Sources.Constant TInRecirc(k=273.105 + 20)
          annotation (Placement(transformation(extent={{-150,-34},{-130,-14}})));
        NonCondensingTank.BaseClasses.QEle
                         qEle annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-142})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=TTanAvg)
          annotation (Placement(transformation(extent={{-156,40},{-136,60}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CondensingStorageTank/DataInputFiles/RepeatedDraws.txt",
          columns=2:19)
          annotation (Placement(transformation(extent={{-180,144},{-160,164}})));

        Modelica.Blocks.Routing.Replicator replicator(nout=nSeg) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-14,126})));

      equation
          TTanSumValidation = tan.vol[19].T+tan.vol[17].T+tan.vol[16].T+tan.vol[15].T+tan.vol[13].T;
          TTanAvg = sum(tan.vol.T)/nSeg;
        connect(EffTan.y, tan.EffTan)  annotation (Line(
            points={{-82.2,51},{-78.1,51},{-78.1,51.3659},{-48.2264,51.3659}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBurner.y,product. u1) annotation (Line(
            points={{29,-88},{2,-88}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,product. u2) annotation (Line(
            points={{29,-120},{16,-120},{16,-100},{2,-100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotPilot.y,add. u2) annotation (Line(
            points={{-11,-68},{-26,-68},{-26,-82},{-36,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y,add. u1) annotation (Line(
            points={{-21,-94},{-36,-94}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,qEle. BurnerStatus) annotation (Line(
            points={{29,-120},{16,-120},{16,-142},{2,-142}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRecirc.y, tan.mFloRec) annotation (Line(
            points={{-129,8},{-80,26},{-80,35.6585},{-48.4491,35.6585}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRecirc.y, tan.TInRec) annotation (Line(
            points={{-129,-24},{-68,-6},{-68,20.8488},{-48.6717,20.8488}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, tan.QDotIn) annotation (Line(
            points={{-59,-88},{-178,-88},{-178,110},{-108,110},{-108,82.7805},{
                -50.2302,82.7805}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.TStatSig, integerToReal.u) annotation (Line(
            points={{74.8943,19.5024},{116,19.5024},{116,-120},{52,-120}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(realExpression.y, EffTan.TWatAvg) annotation (Line(
            points={{-135,50},{-106,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[2], tan.TAmb) annotation (Line(
            points={{-159,154},{-120,154},{-120,66.961},{-50.5642,66.961}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[1], tan.TIn) annotation (Line(
            points={{-159,154},{23.0189,154},{23.0189,96.4683}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.y, tan.m_flow_in) annotation (Line(
            points={{-14,115},{-14,94.4488},{-15.0528,94.4488}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.u, combiTimeTable.y[17]) annotation (Line(
            points={{-14,138},{-14,154},{-159,154}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -200},{200,200}}), graphics),
                                      Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-200},{200,200}})));
      end SimplifiedCondensingWaterHeaterRepeatedDraws;

      model SimplifiedCondensingWaterHeaterUALoss
        "Uses data from repeated draws to characterize the UA parameter"
        extends Modelica.Icons.Example;
        package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nSeg = 20;
        Modelica.SIunits.Temperature TTanAvg "Average temperature of the tank";
        Modelica.SIunits.Temp_K TTanSumValidation
          "Average temperature of the tank";

        NonCondensingTank.SimplifiedStorageTank
                                   tan(
          redeclare package Medium = Water,
          RecircOutSeg=5,
          RecircInSeg=1,
          timDelA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          timDelB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          nSeg=20,
          timDelC={30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
          perInA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          perInB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          perInC={0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11},
          VTan=0.19,
          TStatHeight=14,
          Deadband=16,
          TSet=273.15 + 50,
          T_Initial={329.31,329.31,329.31,329.31,329.31,329.31,329.31,329.31,
              329.31,329.31,329.31,329.31,329.31,329.31,329.31,329.31,329.31,
              329.31,329.31,329.31},
          UA=2.2)
          annotation (Placement(transformation(extent={{-46,2},{72,94}})));

        BaseClasses.EffTankCond EffTan(
          nSeg=nSeg,
          a=0,
          b=-0.0101,
          c=4.113315)
          annotation (Placement(transformation(extent={{-104,40},{-84,60}})));
        Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-120})));
        Modelica.Blocks.Sources.Constant QDotBurner(k=22273) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-88})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-10,-94})));
        Modelica.Blocks.Sources.Constant QDotPilot(k=0)   annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={0,-68})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-48,-88})));
        Modelica.Blocks.Sources.Constant mFloRecirc(k=0)
          annotation (Placement(transformation(extent={{-150,-2},{-130,18}})));
        Modelica.Blocks.Sources.Constant TInRecirc(k=273.105 + 20)
          annotation (Placement(transformation(extent={{-150,-34},{-130,-14}})));
        NonCondensingTank.BaseClasses.QEle
                         qEle annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-142})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=TTanAvg)
          annotation (Placement(transformation(extent={{-156,40},{-136,60}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="Data",
          columns=2:19,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CondensingStorageTank/DataInputFiles/UALoss.txt")
          annotation (Placement(transformation(extent={{-180,144},{-160,164}})));

        Modelica.Blocks.Routing.Replicator replicator(nout=nSeg) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-14,126})));

      equation
          TTanSumValidation = tan.vol[19].T+tan.vol[17].T+tan.vol[16].T+tan.vol[15].T+tan.vol[13].T;
          TTanAvg = sum(tan.vol.T)/nSeg;
        connect(EffTan.y, tan.EffTan)  annotation (Line(
            points={{-82.2,51},{-78.1,51},{-78.1,51.3659},{-48.2264,51.3659}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBurner.y,product. u1) annotation (Line(
            points={{29,-88},{2,-88}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,product. u2) annotation (Line(
            points={{29,-120},{16,-120},{16,-100},{2,-100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotPilot.y,add. u2) annotation (Line(
            points={{-11,-68},{-26,-68},{-26,-82},{-36,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y,add. u1) annotation (Line(
            points={{-21,-94},{-36,-94}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,qEle. BurnerStatus) annotation (Line(
            points={{29,-120},{16,-120},{16,-142},{2,-142}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRecirc.y, tan.mFloRec) annotation (Line(
            points={{-129,8},{-80,26},{-80,35.6585},{-48.4491,35.6585}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRecirc.y, tan.TInRec) annotation (Line(
            points={{-129,-24},{-68,-6},{-68,20.8488},{-48.6717,20.8488}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, tan.QDotIn) annotation (Line(
            points={{-59,-88},{-178,-88},{-178,110},{-108,110},{-108,82.7805},{
                -50.2302,82.7805}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.TStatSig, integerToReal.u) annotation (Line(
            points={{74.8943,19.5024},{116,19.5024},{116,-120},{52,-120}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(realExpression.y, EffTan.TWatAvg) annotation (Line(
            points={{-135,50},{-106,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[2], tan.TAmb) annotation (Line(
            points={{-159,154},{-120,154},{-120,66.961},{-50.5642,66.961}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[1], tan.TIn) annotation (Line(
            points={{-159,154},{23.0189,154},{23.0189,96.4683}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.y, tan.m_flow_in) annotation (Line(
            points={{-14,115},{-14,94.4488},{-15.0528,94.4488}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.u, combiTimeTable.y[17]) annotation (Line(
            points={{-14,138},{-14,154},{-159,154}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -200},{200,200}}), graphics),
                                      Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-200},{200,200}})));
      end SimplifiedCondensingWaterHeaterUALoss;

      model SimplifiedCondensingWaterHeaterValidation
        "Compares to data from validation test protocol"
        extends Modelica.Icons.Example;
        package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nSeg = 20;
        Modelica.SIunits.Temperature TTanAvg "Average temperature of the tank";
        Modelica.SIunits.Temp_K TTanSumValidation
          "Average temperature of the tank";

        NonCondensingTank.SimplifiedStorageTank
                                   tan(
          redeclare package Medium = Water,
          RecircOutSeg=5,
          RecircInSeg=1,
          timDelA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          timDelB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          nSeg=20,
          perInA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          perInB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          perInC={0,0,0,0,0,0,0,0,0,0,0,0,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11},
          VTan=0.19,
          TStatHeight=14,
          UA=2.2,
          TSet=273.15 + 54,
          Deadband=8,
          timDelC={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
          T_Initial={324.15,324.15,324.15,324.15,324.15,324.15,324.15,324.15,
              324.15,324.15,324.15,324.15,324.15,324.15,323.15,322.15,321.15,
              320.15,314.15,314.15})
          annotation (Placement(transformation(extent={{-46,2},{72,94}})));

        BaseClasses.EffTankCond EffTan(
          nSeg=nSeg,
          a=0,
          b=-0.0101,
          c=4.113315)
          annotation (Placement(transformation(extent={{-104,40},{-84,60}})));
        Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-128})));
        Modelica.Blocks.Sources.Constant QDotBurner(k=22273) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-96})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-10,-102})));
        Modelica.Blocks.Sources.Constant QDotPilot(k=0)   annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={0,-68})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-122,-88})));
        Modelica.Blocks.Sources.Constant mFloRecirc(k=0)
          annotation (Placement(transformation(extent={{-150,-2},{-130,18}})));
        Modelica.Blocks.Sources.Constant TInRecirc(k=273.105 + 20)
          annotation (Placement(transformation(extent={{-150,-34},{-130,-14}})));
        NonCondensingTank.BaseClasses.QEle
                         qEle annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-10,-150})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=TTanAvg)
          annotation (Placement(transformation(extent={{-156,40},{-136,60}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="Data",
          columns=2:19,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CondensingStorageTank/DataInputFiles/Validation.txt")
          annotation (Placement(transformation(extent={{-180,144},{-160,164}})));

        Modelica.Blocks.Routing.Replicator replicator(nout=nSeg) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-14,126})));

        NonCondensingTankless.Controllers.BaseClasses.StartDelay startDelay(
          t_short=27,
          t_long=27,
          t_switch=27) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-44,-126})));
        Modelica.Blocks.Math.Product product1 annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-78,-94})));
      equation
          TTanSumValidation = tan.vol[19].T+tan.vol[17].T+tan.vol[16].T+tan.vol[15].T+tan.vol[13].T;
          TTanAvg = sum(tan.vol.T)/nSeg;
        connect(EffTan.y, tan.EffTan)  annotation (Line(
            points={{-82.2,51},{-78.1,51},{-78.1,49.4585},{-50.1189,49.4585}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBurner.y,product. u1) annotation (Line(
            points={{29,-96},{2,-96}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,product. u2) annotation (Line(
            points={{29,-128},{16,-128},{16,-108},{2,-108}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotPilot.y,add. u2) annotation (Line(
            points={{-11,-68},{-26,-68},{-26,-82},{-110,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,qEle. BurnerStatus) annotation (Line(
            points={{29,-128},{16,-128},{16,-150},{2,-150}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRecirc.y, tan.mFloRec) annotation (Line(
            points={{-129,8},{-80,26},{-80,33.9756},{-50.1189,33.9756}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRecirc.y, tan.TInRec) annotation (Line(
            points={{-129,-24},{-68,-6},{-68,19.6146},{-49.8962,19.6146}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, tan.QDotIn) annotation (Line(
            points={{-133,-88},{-178,-88},{-178,110},{-108,110},{-108,82.7805},
                {-50.2302,82.7805}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.TStatSig, integerToReal.u) annotation (Line(
            points={{74.8943,19.5024},{116,19.5024},{116,-128},{52,-128}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(realExpression.y, EffTan.TWatAvg) annotation (Line(
            points={{-135,50},{-106,50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[2], tan.TAmb) annotation (Line(
            points={{-159,154},{-120,154},{-120,67.4098},{-50.1189,67.4098}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[1], tan.TIn) annotation (Line(
            points={{-159,154},{23.0189,154},{23.0189,94.2244}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.y, tan.m_flow_in) annotation (Line(
            points={{-14,115},{-14,94.4488},{-15.0528,94.4488}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.u, combiTimeTable.y[17]) annotation (Line(
            points={{-14,138},{-14,154},{-159,154}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, startDelay.mDotDra) annotation (Line(
            points={{-21,-102},{-28,-102},{-28,-126},{-32,-126}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.u1, product1.y) annotation (Line(
            points={{-110,-94},{-89,-94}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product1.u1) annotation (Line(
            points={{-55,-126},{-60,-126},{-60,-100},{-66,-100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, product1.u2) annotation (Line(
            points={{-21,-102},{-28,-102},{-28,-88},{-66,-88}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -200},{200,200}}), graphics),
                                      Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-200},{200,200}})));
      end SimplifiedCondensingWaterHeaterValidation;
    end Examples;

    package BaseClasses
      model buo "flue gas flow rate times capacity"
        import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Real c_w=1 "standard correlation for natural convection";
        parameter Real A=1 "area surface";
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Medium in the component" annotation (choicesAllMatching=true);
        WaterHeaterLib.BaseClasses.SISO
                    Q_Wx annotation (Placement(transformation(
              extent={{13,-13},{-13,13}},
              rotation=0,
              origin={33,25})));
        Modelica.Blocks.Math.Gain gain1(k=-1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={72,60})));
        WaterHeaterLib.BaseClasses.TH
            t_H(A=A, c_w=c_w)
          "Calculates the temperature of water flow caused by buoyancy"
          annotation (Placement(transformation(extent={{0,-8},{-36,28}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor T_vol_nSeg
          "Temperature of the water"
          annotation (Placement(transformation(extent={{88,16},{66,-6}})));
        WaterHeaterLib.BaseClasses.mFlowBuo   m_flow_buo_x(
          A=A,
          c_w=c_w,
          redeclare package Medium = Medium)
          "Calculates the rate of mass flow caused by buoyancy"
          annotation (Placement(transformation(extent={{-58,-76},{-90,-44}})));
        Modelica.Blocks.Interfaces.RealInput h annotation (Placement(
              transformation(extent={{138,-92},{98,-52}}), iconTransformation(
                extent={{138,-92},{98,-52}})));
        Modelica.Blocks.Interfaces.RealOutput t_h annotation (Placement(
              transformation(extent={{-100,0},{-120,20}}), iconTransformation(
                extent={{-100,-10},{-120,10}})));
        Modelica.Blocks.Interfaces.RealOutput m_flow_buo annotation (Placement(
              transformation(extent={{-100,-70},{-120,-50}}), iconTransformation(
                extent={{-100,-70},{-120,-50}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow
          annotation (Placement(transformation(extent={{140,40},{100,80}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a T_vol
          "Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition"
          annotation (Placement(transformation(extent={{92,-10},{122,20}},
                rotation=0), iconTransformation(extent={{102,-24},{142,16}})));
        Modelica.Blocks.Interfaces.RealOutput Q_W annotation (Placement(
              transformation(extent={{-100,50},{-120,70}}),iconTransformation(
                extent={{-100,58},{-120,78}})));
      equation
        connect(T_vol_nSeg.T, t_H.T) annotation (Line(
            points={{66,5},{18,5},{18,13.6},{3.6,13.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Q_Wx.y, t_H.Q_flow) annotation (Line(
            points={{18.7,25},{13.35,25},{13.35,24.4},{3.6,24.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(h, t_H.h) annotation (Line(
            points={{118,-72},{54,-72},{54,-0.8},{3.6,-0.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(t_H.y, t_h) annotation (Line(
            points={{-37.8,10},{-110,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Q_flow, gain1.u) annotation (Line(
            points={{120,60},{84,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_vol_nSeg.port, T_vol) annotation (Line(
            points={{88,5},{107,5}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(Q_Wx.y, Q_W) annotation (Line(
            points={{18.7,25},{13.35,25},{13.35,60},{-110,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_buo, m_flow_buo_x.y) annotation (Line(
            points={{-110,-60},{-91.6,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain1.y, Q_Wx.u) annotation (Line(
            points={{61,60},{56,60},{56,25},{48.6,25}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Q_Wx.y, m_flow_buo_x.QDotFlu) annotation (Line(
            points={{18.7,25},{14,25},{14,-60},{-54.8,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_vol_nSeg.T, m_flow_buo_x.TWat) annotation (Line(
            points={{66,5},{46,5},{46,6},{20,6},{20,-72.8},{-54.8,-72.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(t_H.y, m_flow_buo_x.T_H) annotation (Line(
            points={{-37.8,10},{-46,10},{-46,-47.2},{-54.8,-47.2}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Icon(graphics));
      end buo;

      model cdotG "flue gas flow rate times capacity"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput T_AD(start=303.15)
          annotation (Placement(transformation(extent={{-142,-20},{-102,20}})));
        Modelica.Blocks.Math.Add add(k2=-1)
          annotation (Placement(transformation(extent={{-36,-24},{-16,-4}})));
        Modelica.Blocks.Interfaces.RealInput QIn(start=1000) annotation (
            Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-120})));
        Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-60,-120})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{14,-22},{34,-2}})));
        Modelica.Blocks.Math.Add add1(k2=1)
          annotation (Placement(transformation(extent={{68,-48},{88,-28}})));
        Modelica.Blocks.Sources.Constant guard(k=1e-6)
          annotation (Placement(transformation(extent={{16,-72},{36,-52}})));
      equation
        connect(T_AD, add.u1) annotation (Line(
            points={{-122,0},{-84,0},{-84,-8},{-38,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul, add.u2) annotation (Line(
            points={{-60,-120},{-60,-20},{-38,-20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, division.u2) annotation (Line(
            points={{-15,-14},{2,-14},{2,-18},{12,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QIn, division.u1) annotation (Line(
            points={{0,-120},{0,-6},{12,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(division.y, add1.u1) annotation (Line(
            points={{35,-12},{58,-12},{58,-32},{66,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(guard.y, add1.u2) annotation (Line(
            points={{37,-62},{64,-62},{64,-44},{66,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add1.y, y) annotation (Line(
            points={{89,-38},{90,-38},{90,0},{110,0}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end cdotG;

      model hCB "Convective heat transfer coefficient"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        import Modelica.Constants;
        parameter Modelica.SIunits.SpecificHeatCapacity cp_G=4186*0.28
          "mean specific heat of flue gas";
        parameter Modelica.SIunits.Length DT=1 "diameter of the tank";
        parameter Modelica.SIunits.Length DF=0.5 "diameter of the flue";
        parameter Modelica.SIunits.Length DM=0.5*(DT + DF);
        parameter Modelica.SIunits.Length Xn=0.5*(DT - DF);
        parameter Modelica.SIunits.Angle alphaF=6*Constants.pi/180
          "flame spreading angle = 6 degree see page 15 heater manual";
        parameter Modelica.SIunits.DynamicViscosity muF_G=0.120*4.133789E-4;
        parameter Modelica.SIunits.ThermalConductivity k_g=0.045*1.7307
          "flue gas thermal conductivity";
        Modelica.SIunits.MassFlowRate mdot_G;
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput C_dotG
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      algorithm
        mdot_G := C_dotG/cp_G;
      equation
        y = k_g*0.51*(((mdot_G/(Constants.pi*DM*2*Modelica.Math.tan(alphaF/2)))*
          Xn/muF_G)^(0.62))/Xn;
        annotation (Diagram(graphics));
      end hCB;

      block hRB "Single Input Single Output continuous control block"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Modelica.Constants;
        Modelica.Blocks.Interfaces.RealInput T_AD "flame temperature" annotation (
           Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-120})));
        Modelica.Blocks.Interfaces.RealOutput y
          "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}},
                rotation=0)));
        parameter Real absIR_tan=0.9 "emissivity of tank bottom";
        parameter Real absIR_flame=0.9 "emissivity of flame";
        Modelica.Blocks.Interfaces.RealInput T_WL "tank temperature at bottom"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=-90,
              origin={0,120})));
      equation
        y = ((T_AD^3*absIR_flame*(1 + absIR_tan)*0.5)*Modelica.Constants.sigma)*(
          1 + T_WL/T_AD) annotation (Documentation(info="<html>
<p>
Block has one continuous Real input and one continuous Real output signal.
</p>
</html>"));
        annotation (Diagram(graphics));
      end hRB;

      model InteriorWH
        "Model for a interior (room-side) convective heat transfer for water heater modelling"
        extends Buildings.HeatTransfer.Convection.BaseClasses.PartialConvection;
        parameter Buildings.HeatTransfer.Types.InteriorConvection conMod=
            Buildings.HeatTransfer.Types.InteriorConvection.Fixed
          "Convective heat transfer model" annotation (Evaluate=true);
      public
        Modelica.Blocks.Interfaces.RealInput u annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-120})));
      equation
        if (conMod == Buildings.HeatTransfer.Types.InteriorConvection.Fixed) then
          q_flow = hFixed*dT;
        else
          // Even if hCon is a step function with a step at zero,
          // the product hCon*dT is differentiable at zero with
          // a continuous first derivative
          q_flow = u*dT;
        end if;
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}),graphics),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-90,80},{-60,-80}},
                lineColor={0,0,0},
                fillColor={192,192,192},
                fillPattern=FillPattern.Backward),
              Line(points={{100,0},{100,0}}, color={0,127,255}),
              Line(points={{100,0},{100,0}}, color={0,127,255}),
              Line(points={{100,0},{100,0}}, color={0,127,255}),
              Text(
                extent={{-35,42},{-5,20}},
                lineColor={255,0,0},
                textString="Q_flow"),
              Line(points={{-60,20},{76,20}}, color={191,0,0}),
              Line(points={{-60,-20},{76,-20}}, color={191,0,0}),
              Line(points={{-34,80},{-34,-80}}, color={0,127,255}),
              Line(points={{6,80},{6,-80}}, color={0,127,255}),
              Line(points={{40,80},{40,-80}}, color={0,127,255}),
              Line(points={{76,80},{76,-80}}, color={0,127,255}),
              Line(points={{-34,-80},{-44,-60}}, color={0,127,255}),
              Line(points={{-34,-80},{-24,-60}}, color={0,127,255}),
              Line(points={{6,-80},{-4,-60}}, color={0,127,255}),
              Line(points={{6,-80},{16,-60}}, color={0,127,255}),
              Line(points={{40,-80},{30,-60}}, color={0,127,255}),
              Line(points={{40,-80},{50,-60}}, color={0,127,255}),
              Line(points={{76,-80},{66,-60}}, color={0,127,255}),
              Line(points={{76,-80},{86,-60}}, color={0,127,255}),
              Line(points={{56,-30},{76,-20}}, color={191,0,0}),
              Line(points={{56,-10},{76,-20}}, color={191,0,0}),
              Line(points={{56,10},{76,20}}, color={191,0,0}),
              Line(points={{56,30},{76,20}}, color={191,0,0})}),
          defaultComponentName="con",
          Documentation(info="<html>
This is a model for a convective heat transfer for interior, room-facing surfaces.
The parameter <code>conMod</code> determines the model that is used to compute
the heat transfer coefficient:
</p>
<p>
<ol>
<li><p>If <code>conMod=<a href=\"modelica://Buildings.HeatTransfer.Types.InteriorConvection\">
Buildings.HeatTransfer.Types.InteriorConvection.Fixed</a></code>, then
the convective heat transfer coefficient is set to the value specified by the parameter
<code>hFixed</code>.
</p>
</li>
</li>
<p>
If <code>conMod=<a href=\"modelica://Buildings.HeatTransfer.Types.InteriorConvection\">
Buildings.HeatTransfer.Types.InteriorConvection.Temperature</a></code>, then
the convective heat tranfer coefficient is a function of the temperature difference.
The convective heat flux is computed using
</p>
<ol>
<li>
for floors the function 
<a href=\"modelica://Buildings.HeatTransfer.Convection.Functions.ConvectiveHeatFlux.floor\">
Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.floor</a>
</li>
<li>
for ceilings the function
<a href=\"modelica://Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.ceiling\">
Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.ceiling</a>
</li>
<li>
for walls the function
<a href=\"modelica://Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.wall\">
Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.wall</a>
</li>
</ol>
</li>
</html>",   revisions="<html>
<ul>
<li>
April 2, 2011 by Michael Wetter:<br>
Added <code>homotopy</code> operator.
</li>
<li>
March 10 2010, by Michael Wetter:<br>
First implementation.
</li>
</ul>
</html>"));
      end InteriorWH;

      model LongWaveRadiationExchange
        "Radiative heat exchange between two surfaces"
        import Buildings;
        extends Buildings.BaseClasses.BaseIcon;
        //parameter Integer n(min=1) "Number of constructions";
        parameter Modelica.SIunits.Area A "Area of exterior constructions";
        //parameter Modelica.SIunits.Emissivity absIR
        //"Infrared absorptivity of building surface";
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port "Heat port"
          annotation (Placement(transformation(extent={{94,-8},{114,12}})));
        Modelica.Blocks.Interfaces.RealInput u
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput T_In annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=-90,
              origin={0,120})));
      equation
        port.Q_flow = u*A*Modelica.Constants.sigma*(port.T^4 - T_In^4);
        annotation (
          Diagram(graphics),
          Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-60,80},{-40,-60}},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{88,-60},{-74,-74}},
                fillColor={5,135,13},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Ellipse(
                extent={{2,82},{86,36}},
                pattern=LinePattern.None,
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0}),
              Line(
                points={{-40,16},{-30,28},{-14,28},{-6,44},{10,42},{12,46}},
                smooth=Smooth.None,
                color={255,0,0},
                thickness=0.5),
              Line(
                points={{-40,16},{-22,-4},{2,-6},{12,-30},{42,-40},{48,-58}},
                smooth=Smooth.None,
                color={255,0,0},
                thickness=0.5),
              Text(
                extent={{-128,12},{-78,-34}},
                lineColor={0,0,127},
                textString="TOut"),
              Text(
                extent={{-130,96},{-80,50}},
                lineColor={0,0,127},
                textString="TSky"),
              Text(
                extent={{86,52},{136,6}},
                lineColor={0,0,127},
                textString="QIR_flow")}),
          Documentation(info="<html>
This model computes the infrared radiative heat flow 
between exterior building surfaces and the ambient. The ambient consists
of the sky black-body radiation and the outdoor temperature 
(which is used as an approximation to the surface temperature of
the ground and neighboring buildings).
</html>",   revisions="<html>
<ul>
<li>
June 4 2010, by Michael Wetter:<br>
First implementation.
</li>
</ul>
</html>"));
      end LongWaveRadiationExchange;

      model mFlowBuo "mass flow rate induced buoyancy"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Medium in the component" annotation (choicesAllMatching=true);
        parameter Real c_w=1 "standard correlation for natural convection";
        parameter Real A "area";
        // Get the specific heat capacity of MediumB.
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
                Medium.p_default,
                Medium.T_default,
                Medium.X_default));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput T_H
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput TWat
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
      algorithm
        if QDotFlu > 5 then
          y := QDotFlu / (c_p*(T_H - TWat));
        else
          y:= 0;
        end if;
        annotation (Diagram(graphics));
      end mFlowBuo;

      model SISO "single input, single output"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput u annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,0})));
      equation
        y = u;
        annotation (Diagram(graphics), Icon(graphics));
      end SISO;

      model TFlame "Calculate the adiabatic flame temperature"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        import Modelica.SIunits;
        parameter Modelica.SIunits.SpecificEnergy deltaHc_H=22000*2e3
          "fuel calorific value at higher heating value";
        parameter Real cp_G=1170 "mean specific heat capacity of flue gas";
        parameter Modelica.SIunits.StoichiometricNumber stoich=16
          "stoichchiometric air/fuel ratio";
        parameter Real EA=0.5 "excess air ratio";
        Modelica.Blocks.Sources.Constant const(k=(deltaHc_H/cp_G)/((1 + stoich)*(
              1 + EA)))
          annotation (Placement(transformation(extent={{-52,62},{-32,82}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,20},{120,40}})));
        Modelica.Blocks.Interfaces.RealInput TDryBul
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Modelica.Blocks.Interfaces.RealInput QBurner
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{62,-20},{82,0}})));
        Modelica.Blocks.Logical.Greater greater
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Modelica.Blocks.Sources.Constant const2(k=273.15)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
      equation
        connect(const.y, add.u1) annotation (Line(
            points={{-31,72},{-20,72},{-20,36},{-2,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul, add.u2) annotation (Line(
            points={{-120,60},{-62,60},{-62,24},{-2,24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QBurner, greater.u1) annotation (Line(
            points={{-120,-20},{-68,-20},{-68,-10},{-22,-10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, greater.u2) annotation (Line(
            points={{-59,-50},{-40,-50},{-40,-18},{-22,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greater.y, switch1.u2) annotation (Line(
            points={{1,-10},{60,-10}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(const2.y, switch1.u3) annotation (Line(
            points={{1,-50},{24,-50},{24,-18},{60,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, switch1.u1) annotation (Line(
            points={{21,30},{34,30},{34,-2},{60,-2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, y) annotation (Line(
            points={{21,30},{110,30}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics), Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}})));
      end TFlame;

      model TF0 "flue entrance temperature"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Real deltaHc_L=20000*2e3
          "fuel calorific value at lower heating value";
        parameter Real deltaHc_H=22000*2e3
          "fuel calorific value at higher heating value";
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput C_dot_G(start=1) annotation (
            Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={40,-120})));
        Modelica.Blocks.Interfaces.RealInput QIn annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-62,-120})));
        Modelica.Blocks.Math.Add add(k2=+1)
          annotation (Placement(transformation(extent={{-6,-14},{14,6}})));
        Modelica.Blocks.Math.Gain gain1(k=deltaHc_L/deltaHc_H)
          annotation (Placement(transformation(extent={{-44,-8},{-24,12}})));
        Modelica.Blocks.Math.Gain gain2(k=1/1.06)
          annotation (Placement(transformation(extent={{-48,-52},{-28,-32}})));
        Modelica.Blocks.Math.Add add1(k2=+1)
          annotation (Placement(transformation(extent={{66,-4},{86,16}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{28,-22},{48,-2}})));
        Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,0})));
        Modelica.Blocks.Interfaces.RealInput QLoss(start=1) annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-12,-120})));
      equation
        connect(gain1.y, add.u1) annotation (Line(
            points={{-23,2},{-8,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain2.y, division.u2) annotation (Line(
            points={{-27,-42},{22,-42},{22,-18},{26,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(division.y, add1.u2) annotation (Line(
            points={{49,-12},{50,-12},{50,0},{64,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QIn, gain1.u) annotation (Line(
            points={{-62,-120},{-62,2},{-46,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, division.u1) annotation (Line(
            points={{15,-4},{22,-4},{22,-6},{26,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add1.y, y) annotation (Line(
            points={{87,6},{94,6},{94,0},{110,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain2.u, C_dot_G) annotation (Line(
            points={{-50,-42},{-54,-42},{-54,-88},{40,-88},{40,-120}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul, add1.u1) annotation (Line(
            points={{-120,0},{-78,0},{-78,36},{30,36},{30,12},{64,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QLoss, add.u2) annotation (Line(
            points={{-12,-120},{-12,-10},{-8,-10}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Icon(graphics));
      end TF0;

      model TH "Temeprature flue stream"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Real c_w=1 "standard correlation for natural convection";
        parameter Real A "area";
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput T
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput h
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      algorithm
        y := T + c_w*Q_flow/(h*A) annotation (Diagram(graphics));
        annotation (Diagram(graphics));
      end TH;

      model THotGas "Hot gas temperature"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        Real Ntu_B;
        parameter Real A_B=1 "Area of the base of the tank";
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput T_WL
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Interfaces.RealInput T_AD
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput h_RB
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput h_CB
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput C_dotG
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      equation
        Ntu_B = ((h_RB + h_CB)*A_B)/C_dotG;
        y = (T_AD + Ntu_B*T_WL)/(1 + Ntu_B);
        annotation (Diagram(graphics));
      end THotGas;

      model buoHeaTra
        "Calculates the heat transfer between segments in the heater caused by buoyant flow"
        import WaterHeatingLibrary;
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        parameter Integer nSeg(min=2) = 2;
        parameter Real QDotPilot;
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a TWat[nSeg]
          annotation (Placement(transformation(extent={{-116,26},{-96,46}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor WatT[nSeg]
          annotation (Placement(transformation(extent={{-96,26},{-76,46}})));
        Modelica.Blocks.Interfaces.RealOutput buoHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-6},{132,26}})));
        WaterHeatingLibrary.CondensingTank.BaseClasses.strLay strLay(nSeg=nSeg,
            QDotPilot=QDotPilot)
                                annotation (Placement(transformation(extent={{-66,26},
                  {-46,46}})));
        heaSum heaSum1(nSeg=nSeg)
          annotation (Placement(transformation(extent={{-36,-14},{-16,6}})));
        QIn qIn(nSeg=nSeg)
                annotation (Placement(transformation(extent={{20,-54},{40,-34}})));
        Modelica.Blocks.Interfaces.RealInput QLosTop
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      equation
        connect(TWat, WatT.port) annotation (Line(
            points={{-106,36},{-96,36}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(WatT.T, strLay.TWat) annotation (Line(
            points={{-76,36},{-68,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(strLay.strLay, heaSum1.strLay) annotation (Line(
            points={{-44.4,36},{-42,36},{-42,0},{-38,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotFlu, heaSum1.QDotFlu) annotation (Line(
            points={{-120,-20},{-80,-20},{-80,-8},{-38,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBas, heaSum1.QDotBas) annotation (Line(
            points={{-120,-100},{-60,-100},{-60,-14},{-38,-14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(strLay.strLay, qIn.strLay) annotation (Line(
            points={{-44.4,36},{0,36},{0,-38},{18,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(heaSum1.QBelStrTot, qIn.heaBelStrTot) annotation (Line(
            points={{-15,-4},{-8,-4},{-8,-42},{18,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotFlu, qIn.QDotFlu) annotation (Line(
            points={{-120,-20},{-20,-20},{-20,-50},{18,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBas, qIn.QDotBas) annotation (Line(
            points={{-120,-100},{-20,-100},{-20,-54},{18,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(qIn.QInCom, buoHeaTra) annotation (Line(
            points={{41,-44},{78,-44},{78,10},{116,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(WatT.T, qIn.TWat) annotation (Line(
            points={{-76,36},{-76,-46},{18,-46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QLosTop, heaSum1.QLosTop) annotation (Line(
            points={{-120,80},{-38,80},{-38,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QLosTop, qIn.QLosTop) annotation (Line(
            points={{-120,80},{4,80},{4,-34},{18,-34}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}),
                            graphics), Icon(coordinateSystem(preserveAspectRatio=true,
                extent={{-100,-100},{100,100}})));
      end buoHeaTra;

      model buoMas
        "Identifies mass flow rates in each segment caused by buoyancy (flows caused by both base and flue heat transfer)"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 2;
        Real m_flow_BU[nSeg];
        Real mFloInFlu[nSeg];
        Real mFloInFluSeg[nSeg];
        Real smoDel = 0.00001;
        Real deadband = 0.01;
        Modelica.Blocks.Interfaces.RealInput mFloOutBas
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
         Modelica.Blocks.Interfaces.RealInput mFloOutFlu[nSeg]
           annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput THotOutBas
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
         Modelica.Blocks.Interfaces.RealInput THotOutFlu[nSeg]
           annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealOutput mFloIn[nSeg]
          annotation (Placement(transformation(extent={{100,10},{120,30}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
      algorithm
          //  total buoyancy flow from lower zones which mixes into zone i, see Eqn 7. page 8 of water heater manual
        for i in 2:(nSeg-1) loop
            m_flow_BU[i] :=  mFloOutBas * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutBas - TWat[i] - deadband,smoDel) * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i-1] - THotOutBas,smoDel);
           for j in i:nSeg loop
               mFloInFluSeg[j] :=  mFloOutFlu[j] * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutFlu[j] - TWat[i] - deadband,smoDel) * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i-1] - THotOutFlu[j],smoDel);
           end for;
           mFloInFlu[i] :=  sum(mFloInFluSeg[i:nSeg]);
           mFloIn[i] :=  m_flow_BU[i] + mFloInFlu[i];
        end for;
        //  total buoyancy flow from lower zones which mixes into zone nSeg, see Eqn 7. page 8 of water heater manual
           m_flow_BU[1] :=mFloOutBas * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutBas - TWat[1] - deadband,smoDel);
          for j in 1:nSeg loop
              mFloInFluSeg[j] :=  mFloOutFlu[j] * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutFlu[j] - TWat[1] - deadband,smoDel);
          end for;
          mFloInFlu[1] :=  sum(mFloInFluSeg[1:nSeg]);
          mFloIn[1] :=  m_flow_BU[1] + mFloInFlu[1];
          m_flow_BU[nSeg] := mFloOutBas * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] - THotOutBas,smoDel);
          mFloInFlu[nSeg] := mFloOutFlu[nSeg] * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] - THotOutFlu[nSeg],smoDel);
          mFloIn[nSeg] := m_flow_BU[nSeg] + mFloInFlu[nSeg];
        annotation (Diagram(graphics));
      end buoMas;

      model mDCal
        "Calculate the fownward mass flow rates which balance the buoyancy flow rates (mdot_D)"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2)=2;
        Modelica.Blocks.Interfaces.RealInput mDotBas
          annotation (Placement(transformation(extent={{-140,70},{-100,110}})));
        Modelica.Blocks.Interfaces.RealInput mDotIn[nSeg]
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput mDotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-110},{-100,-70}})));
        Modelica.Blocks.Interfaces.RealOutput mDotD[nSeg]
          annotation (Placement(transformation(extent={{100,-20},{140,20}})));
      equation
      mDotD[1] = mDotIn[1] - mDotFlu[1];
      mDotD[nSeg] = 0;
      for i in 2:(nSeg-1) loop
        0 = mDotIn[i] - mDotFlu[i] + mDotD[i-1] - mDotD[i];
      end for;
        annotation (Diagram(graphics));
      end mDCal;

      model QBuo "Calculates the heat transfer rate caused by buoyancy"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
        parameter Integer nSeg(min=2)=2;
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput mDotD[nSeg]
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput dHBU[nSeg]
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealOutput buoHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-18},{136,18}})));
        Modelica.Blocks.Interfaces.RealInput QBas
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealInput QFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput mDotC[nSeg]
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      equation
        for i in 2:(nSeg - 1) loop
          buoHeaTra[i] =  dHBU[i] + c_p*mDotD[i - 1]*(TWat[i - 1] - TWat[i]) + c_p*mDotC[i]*(TWat[i - 1] - TWat[i]) - c_p*mDotC[i]*(TWat[i] - TWat[i + 1]) + QFlu[i] - c_p * mDotD[i] * (TWat[i] - TWat[i+1]);
        end for;
        // calculate total heat flux for zone 1 that will be added to port for energy balance calculation, see Eqn 10. page 8 of water heater manual
        buoHeaTra[1] =  dHBU[1] - c_p*mDotC[1]*(TWat[1] - TWat[2]) + QFlu[1] - c_p * mDotD[1] * (TWat[1] - TWat[2]);
        // calculate total heat flux for zone nSeg that will be added to port for energy balance calculation, see Eqn 10. page 8 of water heater manual
        buoHeaTra[nSeg] =  dHBU[nSeg] + c_p*mDotC[nSeg]*(TWat[nSeg-1] - TWat[nSeg]) + mDotD[nSeg-1] * c_p * (TWat[nSeg-1] - TWat[nSeg]) + QFlu[nSeg] + QBas;
        annotation (Diagram(graphics));
      end QBuo;

      model dHBU
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
        parameter Integer nSeg(min=2)=2;
        Real smoDel = 0.00001;
        Real dH_BU_B[nSeg];
        Real dH_BU_F[nSeg];
        Real dH_BU_F_Seg[nSeg];
        Real deadband = 0.01;
        Modelica.Blocks.Interfaces.RealOutput dH_BU[nSeg]
          annotation (Placement(transformation(extent={{100,-2},{120,18}})));
        Modelica.Blocks.Interfaces.RealInput mDotBas
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput THotBas
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput mDotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput THotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
      algorithm
        dH_BU_B[1] :=mDotBas*c_p*(THotBas - TWat[1])*
          Buildings.Utilities.Math.Functions.smoothHeaviside(THotBas - TWat[1],smoDel);
          for j in 1:nSeg loop
              dH_BU_F_Seg[j] :=mDotFlu[j]*c_p*(THotFlu[j] - TWat[1])*Buildings.Utilities.Math.Functions.smoothHeaviside(THotFlu[j] - TWat[1]-deadband, smoDel);
          end for;
          dH_BU_F[1] :=sum(dH_BU_F_Seg[1:nSeg]);
          dH_BU[1] :=dH_BU_B[1] + dH_BU_F[1];
        // heat enthalpy of zone i, see Eqn 11. page 8 of water heater manual
        for i in 2:(nSeg - 1) loop
            dH_BU_B[i] :=mDotBas*c_p*(THotBas - TWat[i])*Buildings.Utilities.Math.Functions.smoothHeaviside(THotBas - TWat[i]-deadband,smoDel)*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i - 1]
             - THotBas, smoDel);
          for j in i:nSeg loop
              dH_BU_F_Seg[j] :=mDotFlu[j]*c_p*(THotFlu[j] - TWat[i])*Buildings.Utilities.Math.Functions.smoothHeaviside(THotFlu[j] - TWat[i]-deadband, smoDel)*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i - 1] - THotFlu[j], smoDel);
          end for;
          dH_BU_F[i] :=sum(dH_BU_F_Seg[i:nSeg]);
          dH_BU[i] :=dH_BU_B[i] + dH_BU_F[i];
        end for;
        // heat enthalpy of zone nSeg, see Eqn 11. page 8 of water heater manual
          dH_BU_B[nSeg] :=mDotBas*c_p*(THotBas - TWat[nSeg])*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] -THotBas, smoDel);
          dH_BU_F[nSeg] :=mDotFlu[nSeg]*c_p*(THotFlu[nSeg] - TWat[nSeg])*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] -THotFlu[nSeg], smoDel);
          dH_BU[nSeg] :=dH_BU_B[nSeg] + dH_BU_F[nSeg];
        annotation (Diagram(graphics));
      end dHBU;

      model draHeaTra
        "Calculates the heat transfer rates caused by a hot water draw event"
        extends Modelica.Blocks.Interfaces.BlockIcon;
         replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
         Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
           Medium.setState_pTX(
             Medium.p_default,
             Medium.T_default,
             Medium.X_default));
        parameter Real TIn = 273.15 + 15;
        parameter Integer nSeg(min=2) = 8;
      //   parameter Real topMix = 15;
      //   parameter Real mDotMix = 0.3;
      //   Real smoDel = 0.0001;
      //   Real mixZon[nSeg];
      //  Integer TotalSegs;
        Real SumBelow[nSeg];
        Real TotalFlow;
        Real small = 0.0001;
        parameter Real perInA[nSeg];
        parameter Real perInB[nSeg];
        parameter Real perInC[nSeg];
        parameter Real timDelA[nSeg];
        parameter Real timDelB[nSeg];
        parameter Real timDelC[nSeg];
        Modelica.Blocks.Interfaces.RealInput mFloIn[nSeg]
          annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
        Modelica.Blocks.Logical.Timer timer[nSeg]
          annotation (Placement(transformation(extent={{-4,-60},{16,-40}})));
        Modelica.Blocks.Logical.Greater greater[nSeg]
          annotation (Placement(transformation(extent={{-38,-60},{-18,-40}})));
        Modelica.Blocks.Sources.Constant const[nSeg](k=0.00001)
          annotation (Placement(transformation(extent={{-74,-76},{-54,-56}})));
        timDel timDel1(
          nSeg=nSeg,
          timDelA=timDelA,
          timDelB=timDelB,
          timDelC=timDelC)
          annotation (Placement(transformation(extent={{-36,-100},{-16,-80}})));
        Modelica.Blocks.Logical.Greater greater1[nSeg]
          annotation (Placement(transformation(extent={{30,-60},{50,-40}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger[nSeg]
          annotation (Placement(transformation(extent={{60,-60},{80,-40}})));
        minFloIn minFloIn1(
          nSeg=nSeg,
          perInA=perInA,
          perInB=perInB,
          perInC=perInC)
          annotation (Placement(transformation(extent={{-68,2},{-48,22}})));
        perFloIn perFloIn1(nSeg=nSeg)
          annotation (Placement(transformation(extent={{-28,-4},{-8,16}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression[nSeg](y=
              booleanToInteger.y)
          annotation (Placement(transformation(extent={{-72,-18},{-52,2}})));
        Modelica.Blocks.Interfaces.RealOutput draHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-2},{120,18}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,52},{-100,92}})));
      equation
        TotalFlow = sum(perFloIn1.perFlo[1:nSeg]);
      //  TotalSegs = sum(booleanToInteger.y);
      //  T_F_avg = sum(T_F[1:nSeg])/nSeg;
      // for i in 1:nSeg loop
      //   mixZon[i] = Buildings.Utilities.Math.Functions.smoothHeaviside(i - topMix + smoDel,smoDel);
      // end for;
      //
      // draHeaTra[nSeg] = mixZon[nSeg] * 1/(nSeg-topMix+1) * mFloIn[nSeg] * c_p * (TIn - TWat[nSeg]) +  (1-mixZon[nSeg]) * mFloIn[nSeg] * c_p * (TIn - TWat[nSeg]);
      //
      //   for i in 1:(nSeg-1) loop
      //     draHeaTra[i] = mixZon[i] * 1/(nSeg-topMix+1) * mFloIn[i] * c_p * (TIn - TWat[i]) + mFloIn[i] *c_p* (TWat[i+1] - TWat[i]) + mixZon[i] * mDotMix * c_p * (TWat[i+1] - TWat[i]);
      //   end for;
      for i in (1:nSeg-1) loop
          SumBelow[i] = sum(perFloIn1.perFlo[i:nSeg]) - perFloIn1.perFlo[i];
          draHeaTra[i] = (perFloIn1.perFlo[i] * mFloIn[i] * c_p * (TIn - TWat[i]) + SumBelow[i] * mFloIn[i] * c_p * (TWat[i+1] - TWat[i]))*1/(TotalFlow+small);
      end for;
      SumBelow[nSeg] = 0;
      draHeaTra[nSeg] = perFloIn1.perFlo[nSeg] * mFloIn[nSeg] * c_p * (TIn - TWat[nSeg]);
        connect(mFloIn, greater.u1) annotation (Line(
            points={{-120,-50},{-40,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greater.y, timer.u) annotation (Line(
            points={{-17,-50},{-6,-50}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(const.y, greater.u2) annotation (Line(
            points={{-53,-66},{-48,-66},{-48,-58},{-40,-58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timer.y, greater1.u1) annotation (Line(
            points={{17,-50},{28,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloIn, timDel1.m_flow_in) annotation (Line(
            points={{-120,-50},{-84,-50},{-84,-82},{-38,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timDel1.y, greater1.u2) annotation (Line(
            points={{-15,-88},{20,-88},{20,-58},{28,-58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greater1.y, booleanToInteger.u) annotation (Line(
            points={{51,-50},{58,-50}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(mFloIn, minFloIn1.m_flow_in) annotation (Line(
            points={{-120,-50},{-84,-50},{-84,20},{-70,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(minFloIn1.y, perFloIn1.minFloIn) annotation (Line(
            points={{-47,14},{-30,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerExpression.y, perFloIn1.Active) annotation (Line(
            points={{-51,-8},{-40,-8},{-40,2},{-30,2}},
            color={255,127,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end draHeaTra;

      package Burner
        model Gas "model of a gas burner for water heater"
          import SI = Modelica.SIunits;
          import Modelica.Constants;
          import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
          import Modelica.Fluid.Types;
          import Modelica.Fluid.Types.Dynamics;
          import Modelica.Constants;
          parameter Modelica.SIunits.Length DTan=1 "diameter of the tank";
          parameter Modelica.SIunits.Length DFlu=0.5 "diameter of the flue";
          parameter Buildings.HeatTransfer.Types.InteriorConvection conMod=
              Buildings.HeatTransfer.Types.InteriorConvection.Temperature
            "Convective heat transfer model for opaque constructions"
            annotation (Dialog(group="Convective heat transfer"));
          parameter Modelica.SIunits.CoefficientOfHeatTransfer hFixed=3.0
            "Constant convection coefficient for opaque constructions"
            annotation (Dialog(group="Convective heat transfer", enable=(conMod
                   == Buildings.HeatTransfer.Types.InteriorConvection.Fixed)));
          parameter Real h_GB=3
            "Convection coefficient between the hot gas and the base of the tank";
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorBot
            "Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition"
            annotation (Placement(transformation(extent={{-14,-382},{14,-354}},
                  rotation=0), iconTransformation(extent={{16,-304},{56,-264}})));
        public
          parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnvBot(
            each A=0,
            redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
            each til=0,
            each azi=0) "Data for exterior construction" annotation (Placement(
                transformation(extent={{404,170},{442,208}})), HideResult=true);
          parameter Modelica.SIunits.SpecificEnergy deltaHc_H=10000
            "Fuel calorific value (higher heating value) in J/kg";
          parameter Modelica.SIunits.SpecificEnergy deltaHc_L=10
            "Fuel calorific value (lower heating value) in J/kg";
          parameter Real absIR_FS=0.4 "Absorptivity of floor shield -- fixme";
          parameter Real absIR_Fla=0.07 "Absorptivity of flame -- fixme";
          parameter Real fv=0.2 "view factor between flame and shield";
          parameter Real vfb=0.5 "view factor between the flame and the base";
          //parameter Real h_CB=10
          //  "Convective heat transfer coefficient between hot gas and tank bottom (see page 13) --fixme";
          parameter Modelica.SIunits.StoichiometricNumber stoich=16.20
            "stoichometric air fule ratio";
          parameter Real EA=0.5 "excess air fraction";
          parameter Modelica.SIunits.SpecificHeatCapacity cp_G=4186*0.28
            "mean specific heat of flue gas";
          WaterHeaterLib.BaseClasses.TFlame     T_AD_flame(
            deltaHc_H=deltaHc_H,
            stoich=stoich,
            EA=EA,
            cp_G=cp_G) annotation (Placement(transformation(
                extent={{-15,-15},{15,15}},
                rotation=0,
                origin={-105,-79})));
          WaterHeaterLib.BaseClasses.InteriorWH heaGasBas(
            each hFixed=hFixed,
            final til=datTanEnvBot.til,
            final A=datTanEnvBot.A,
            each conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature)
            "Heat transfer between the gas and the base of the tank"
                                       annotation (Placement(transformation(
                extent={{-14,14},{14,-14}},
                rotation=90,
                origin={0,90})));
          Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature
            hotGasTemperature1 annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={0,44})));
          WaterHeaterLib.BaseClasses.hRB  h_RB annotation (Placement(
                transformation(
                extent={{16,-16},{-16,16}},
                rotation=270,
                origin={48,-116})));
          Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor TtanBot
            "tank bottom temperature"
            annotation (Placement(transformation(extent={{-48,-60},{-32,-44}})));
          WaterHeaterLib.BaseClasses.LongWaveRadiationExchange radGasFlr(A=
                datTanEnvBot.A)
            "Radiative heat transfer between the gas in the burner and the floor"
                                                   annotation (Placement(
                transformation(
                extent={{17,-16},{-17,16}},
                rotation=90,
                origin={0,-277})));
          Modelica.Blocks.Sources.RealExpression realExpression5(y=1/(2/
                datTanEnv.layers.absIR_b + (1/absIR_FS)*(1/(absIR_Fla*fv) + 1)
                 - 1)) annotation (Placement(transformation(extent={{158,-246},{
                    104,-216}})));
          WaterHeaterLib.BaseClasses.THotGas  hotGasTemp(A_B=datTanEnvBot.A)
            annotation (Placement(transformation(
                extent={{16,-16},{-16,16}},
                rotation=270,
                origin={0,-2})));
          WaterHeaterLib.BaseClasses.TF0  T_F0(final deltaHc_H=deltaHc_H, final
              deltaHc_L=deltaHc_L)
            annotation (Placement(transformation(extent={{344,4},{376,36}})));
          Modelica.Blocks.Interfaces.RealInput QBurner annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={100,-378}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={216,-282})));
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{268,6},{290,28}})));
          WaterHeaterLib.BaseClasses.hCB  h_CB(DT=DTan, DF=DFlu) annotation (
              Placement(transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={0,-116})));
          Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-100,-376}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-122,-284})));
          Modelica.Blocks.Sources.RealExpression fsRadiationExchange4_Q_flow(y=
                radGasFlr.port.Q_flow)
            annotation (Placement(transformation(extent={{174,-20},{232,18}})));
          WaterHeaterLib.BaseClasses.cdotG  cdot_G annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={106,-114})));
          Modelica.Blocks.Sources.RealExpression heaCoef(y=h_GB)
            "heat transfer hot gas to tank base --fixme"
            annotation (Placement(transformation(extent={{-152,72},{-88,108}})));
          Modelica.Blocks.Interfaces.RealInput Q_B "heat flow rate of the base"
            annotation (Placement(transformation(
                extent={{20,-20},{-20,20}},
                rotation=90,
                origin={176,238}), iconTransformation(
                extent={{20,-20},{-20,20}},
                rotation=90,
                origin={8,142})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorTop
            "Heat port top of burner" annotation (Placement(transformation(extent=
                   {{-14,212},{14,240}}, rotation=0), iconTransformation(extent={
                    {-160,120},{-120,160}})));
          parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnv(
            each A=0,
            redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
            each til=0,
            each azi=0) "Data for exterior construction" annotation (Placement(
                transformation(extent={{406,106},{446,146}})),HideResult=true);
          Modelica.Blocks.Interfaces.RealOutput T_F0_y annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={274,236}), iconTransformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={134,140})));
          Modelica.Blocks.Interfaces.RealOutput cdot_G_y annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={332,236}), iconTransformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={258,136})));
        equation
          connect(hotGasTemperature1.port, heaGasBas.solid)   annotation (Line(
              points={{1.83697e-015,54},{1.83697e-015,76},{9.19104e-016,76}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(hotGasTemp.y, hotGasTemperature1.T) annotation (Line(
              points={{3.23307e-015,15.6},{3.23307e-015,28},{-2.20436e-015,28},{
                  -2.20436e-015,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TtanBot.T, hotGasTemp.T_WL) annotation (Line(
              points={{-32,-52},{-12.8,-52},{-12.8,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hotGasTemp.T_AD, T_AD_flame.y) annotation (Line(
              points={{-6.4,-21.2},{-6.4,-74.5},{-88.5,-74.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_CB.y, hotGasTemp.h_CB) annotation (Line(
              points={{1.07769e-015,-98.4},{1.07769e-015,-66.2},{-3.52698e-015,
                  -66.2},{-3.52698e-015,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_RB.y, hotGasTemp.h_RB) annotation (Line(
              points={{48,-98.4},{48,-80},{6.4,-80},{6.4,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cdot_G.y, hotGasTemp.C_dotG) annotation (Line(
              points={{106,-96.4},{106,-70},{12.8,-70},{12.8,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_CB.C_dotG, cdot_G.y) annotation (Line(
              points={{-1.17566e-015,-135.2},{-1.17566e-015,-150},{162,-150},{162,
                  -70},{106,-70},{106,-96.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heaCoef.y, heaGasBas.u)   annotation (Line(
              points={{-84.8,90},{-16.8,90}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_AD_flame.y, cdot_G.T_AD) annotation (Line(
              points={{-88.5,-74.5},{-74,-74.5},{-74,-176},{106,-176},{106,-133.52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(radGasFlr.u, realExpression5.y)            annotation (Line(
              points={{1.24914e-015,-256.6},{1.24914e-015,-232},{101.3,-232},{
                  101.3,-231}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(radGasFlr.port, heaPorBot)            annotation (Line(
              points={{-0.32,-294.68},{-0.32,-326.26},{1.77636e-015,-326.26},{
                  1.77636e-015,-368}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(heaPorBot, heaPorBot) annotation (Line(
              points={{1.77636e-015,-368},{1,-369},{0,-370},{1.77636e-015,-368}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(T_AD_flame.y, radGasFlr.T_In)            annotation (Line(
              points={{-88.5,-74.5},{-74,-74.5},{-74,-277},{-19.2,-277}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TDryBul, T_AD_flame.TDryBul) annotation (Line(
              points={{-100,-376},{-100,-316},{-142,-316},{-142,-70},{-123,-70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner, T_AD_flame.QBurner) annotation (Line(
              points={{100,-378},{100,-340},{-156,-340},{-156,-82},{-123,-82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TDryBul, cdot_G.TDryBul) annotation (Line(
              points={{-100,-376},{-100,-314},{194,-314},{194,-123.6},{125.2,-123.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner, cdot_G.QIn) annotation (Line(
              points={{100,-378},{100,-338},{242,-338},{242,-114},{125.2,-114}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(fsRadiationExchange4_Q_flow.y, add.u2) annotation (Line(
              points={{234.9,-1},{246,-1},{246,10.4},{265.8,10.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TDryBul, T_F0.TDryBul) annotation (Line(
              points={{-100,-376},{-100,-314},{322,-314},{322,20},{340.8,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Q_B, add.u1) annotation (Line(
              points={{176,238},{176,23.6},{265.8,23.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heaGasBas.fluid, heaPorTop)   annotation (Line(
              points={{2.63361e-015,104},{2.63361e-015,163},{1.77636e-015,163},{
                  1.77636e-015,226}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(TtanBot.port, heaPorTop) annotation (Line(
              points={{-48,-52},{-62,-52},{-62,200},{1.77636e-015,200},{
                  1.77636e-015,226}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(T_F0.y, T_F0_y) annotation (Line(
              points={{377.6,20},{402,20},{402,78},{274,78},{274,236}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cdot_G.y, cdot_G_y) annotation (Line(
              points={{106,-96.4},{106,102},{332,102},{332,236}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner, T_F0.QIn) annotation (Line(
              points={{100,-378},{100,-294},{350,-294},{350,0.8},{350.08,0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, T_F0.QLoss) annotation (Line(
              points={{291.1,17},{304,17},{304,-20},{358.08,-20},{358.08,0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cdot_G.y, T_F0.C_dot_G) annotation (Line(
              points={{106,-96.4},{106,-66},{366,-66},{366,0.8},{366.4,0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_RB.T_WL, TtanBot.T) annotation (Line(
              points={{67.2,-116},{74,-116},{74,-162},{-32,-162},{-32,-52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_AD_flame.y, h_RB.T_AD) annotation (Line(
              points={{-88.5,-74.5},{-58,-74.5},{-58,-194},{20,-194},{20,-116},{
                  28.8,-116}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-340,-360},
                    {460,220}}), graphics),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-340,-360},{
                    460,220}}), graphics={Bitmap(
                  extent={{-270,150},{364,-272}},
                  imageSource=
                      "/9j/4AAQSkZJRgABAQEAlgCWAAD/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCABaAJMDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDe8W+I9Z0/Upo7O+kiRZXUAKpwAgI6j1NdtodzLdaFZXE8heWSFWdjjk4rzTx6hTX7gZYbiXwT/sgf0ru/D2mQvoGnuZJuYFJUSHHSqno0bVIpNG75qqMs4AHUk1xtn4iunuL5ZdRUqlyyx5K8L2HSup/suyJ5hB7ck1w2n2dqbnUN1vHiO8cLx05rN3JSibkes3Uudl2Wx14HH6U/+1L7/n4b8h/hWTe6lY6bCZbiZEUEA45PPTOKh07Wo9SuXijt5lVRlZSPlb2z61dna4pRtqtjc/tS9/5+G/If4Uf2pe/8/DfkP8KZ5EcUJlnkCqBk1XjudPmRzHdg+X1yMYrOLlJtRi9DlliaUd5Fr+1b7/n4b8h/hR/at9/z8N+Q/wAKriWzVctJu4zhepoe701ULtKwAIHr1rSUKkVflMljqDe5YOq33/Pw35D/AAo/tS//AOfhvyH+FUZtT02xj3XUjDecKNvJpkGs6NctthnYt6EY4qnSrKPMoOwfXaP8xo/2rff8/DfkP8KX+1L7/n4b8h/hWc2r6RHIFkmkAYZHynio01nSrm4NvBcbZcZCuMBvoaXJVtdxZcMXSnLli9TV/tS+/wCfhvyH+FB1S+/5+G/If4VUBBGQcjHUUc+tTodWpYfUb5wMXciY6kAc/pXLeKvEWv6QbMQavNiZmz8iDp+FdD+Fcd8QOG03/eesqukGzWjL31oekeDL661LwpZXd5MZp5PM3OQMnDsB09gKKr/D3jwRp/8A21/9GNRTpO8I+hFT43bucp8RdQsLjU47SGRWvIA4mTHzBcAj+dS6b4ytbTSIIl1lUMMQzEbclhjtWp408LR3SvqtvDJPco2XjQDLLgA/XHWsG38TLpNgtrcaNDM0K4EzxbTgd2yK2U5ctjVVYqKT1LsPj0STHfq8ccWOCbc7s+47Vjw6lpE0dw8+uMr3ErOyCIjn1FaX/CwdHAy2h2vTJIdf8KyYtctIww/saFgzs3TsTnHSlzvoUq/K7pWM620+3a8Bhm+3STNtSDP3fRzXc2k0lpp0dteRxxsTnfGMKD6cVzsfiS3hbdHpEaN/eXg/nipG8W7l2tp2VPUFjz+lUqklBxepz1rVqqm9LdDY8QXF4NJZrOEzSKQNg/iB61zFvc6mkgeTQ7o7mG8gHt/Orsfix4UwbRn5wuWOQPfinnxg+c/Ym/77PP6VUMRUirJnJPA0W7tDLm+uTcXLw6NdsSVaJipGfU+1VW1u8sIzcz6FJEiNu3vkAN/9erv/AAmMn/Pix/4Gf8Kq6nr51SzNrJaeWrMCWJJHB9MVXt6ltWQsFQ/lKlzrc3iNd9tpDyCM4ZocnBx3pbdr2D5h4euGcHhjnj8K2/Cpj23vkrtTevRSueK38t/eNUsXVUeRS0H9Sw/8pxRub+S9Wd/D1wecMOTkVraFZpJcz3UtjLbeW5EMcw7Hr9a38t/eNIeRyc0niaslZsccHQjLmSIPsUaEvEzRO3dTx+VJm6iIwFmTuejVY7Yorlt2O5VO+pALyED94TEf+mgxXK/EDn+zGHTc3PrXYOqyDDqGHoRmuM8eRJC+nmMbQzNlewPtWdb+GzWjyuaWx6H8Pv8AkSNP/wC2n/oxqKPh9/yJGn/9tP8A0Y1FVS/hx9EZVf4kvVnQleaxfGAx4Q1T/r3atysLxsSPBmrFTg/Zm/lWii5vlXUhOzueFGPzIAmQvyjBxXSw+NdRigjiEFvhFC5x1xXAJqF0EUeceBS/2hdf89jXox4ZzBapo3eLovdHoP8AwnOpf8+9v+VH/Cc6jnH2e3/75rz7+0Lv/nsa6PwNpNz4o8RJZSyyfZo0LzspwQO3NRiMjx+HpupOSsiVXw8nZI3j441Egg29ufUY60yPxnqUWQsMOw9FI+7XcD4V+H+0l6B/12/+tR/wqzQP+et5/wB/v/rV4rhXf2jZVKK6HFf8JxqXa3t/++TR/wAJzqP/AD7wfka664+GGjxEPG13IgHzJ5vP1HFPh+GXhueMOk14ynv53/1qShXX2hOVHdI40+N9RP8Aywt/yNL/AMJvqH/PCD8jXbf8Kr8P4/1t5/3+/wDrUf8ACq9A/wCet7/3+/8ArVXJX/mFz0exxH/Cb6h/zwg/I0f8JxqP/PCD8jXb/wDCrPD/APz1vP8Av9/9aj/hVfh//nref9/v/rUuSv8AzBz0exxH/Ccah/zwg/I0f8JvqP8Az7wflXW6j8LdKXTpzYTXS3QjJiLy5Xd2zxXir3l7DI8TyMrxsVZSOhHBruwWXYvFtxpyVxSq0Ir4Tvf+E31H/nhB+RrM1nWbnWzB9oRE+zkldg65rkjqF3/z2NL/AGhdf89jXoy4azJq10SsVh4u9j6H+Hv/ACJGn/8AbT/0Y1FQfDGRpfh7pju25j5uT/21eivNlSlRbpS3jo/loYykpNyXU6qsLxt/yJerf9er/wAq3awvG3/Il6t/17P/ACrSh/Ej6ol7HzOv3R9KWkH3R9KWv1yD91HAL0Un0r334YeGP7B8PrcXMAS9u/ndu+zsK8m8A+HW8SeJoIGH+j25EsxIyCAen419GIqqoVV2hRgAdhXxfEWN5pLDx9WdNGPUfRRRXyRuIRWfcW0sM32mzB3L96HOFk/wNaNIRmgCva3UdwpKkhhwyt1U1ZHSqdxbPv8AOt2EcvckcN9adaXQnUow2Spw6dx7/SgbXYtUUgpaBDSK8Q+Lnhr+zdbXWLdMW98cOFGArgf1r3E1h+LfD8XiTw9c2Eg+crviPdXHSu7L8VLC4iNRbdSJxuj5oNJT5IpIHeGVdskbFXU9QQcGmV+p05qcVJdTieh9D/Cz/knOl/8Abb/0c9FHws/5J1pf/bb/ANHPRX5Vj/8Ae6v+KX5s7o/CjrawvG3/ACJerf8AXs/8q3awvG3/ACJerf8AXs/8q56P8SPqhvY+aB90fSlz7Z9BSL90fSum8BeHH8Q+J4IShNtbsJZ2B6AdP1r9SxFeOHw7qS6I4krux6r8LfDI0Xw4t5KGF1fgPIG42jsK7jFIgAGAAAOgFOr8trVZVqjqS3Z2pWVgpaKKzGFJS0lAB17VUubRZ2DoxjmTlXX+R9RVuigdynaXbO3k3ACXC9VHRvcVbBqC6gWdApJRgcq69VqGK7kScW10FWQ/6tgeHH+NAWuXqa1CsT1pSKBHhvxa8MjStbXVraHbbX3+sI6CTv8ATNefV9MeL9BXxJ4butNJCyOu6JiOjjpXzXNE8E0kMi7XiYow9wcV99w/jva0fYyesfyOWrCzufQnws/5J1pf/bb/ANHPRSfCz/knOl/9tv8A0c9FfG4//e6v+KX5s6I/Cjrap6vp8WraVc6dMzLHcxmNmXqAau0lcadnco80HwT0TaP+JjedPaun8I+DLDwhDPHaO8zztlpJPvY9K6SjFdE8VXqR5ZybQuVCAYp1FFc4wooooAKKKKACiiigBCKhuLeOdNsiA+h7ip6TAPUUAZ0U8llIIbpiyH/Vy/0b3q8GJOPSnPGkilHRWU9QRkGlAA6AUDYmM1wmt/CbRta1efUmubi3e4bc6R4259a7yirp1p0neDsS0nuZvh3RIPDmhW2k20jyRW+7az9TuYsf1NFadFTKTk3KW7Gf/9k=",
                  fileName="C:/Documents and Settings/user/Desktop/chamber.jpg")}),
            defaultComponentName="burn",
            Documentation(info="<html>
<p>
This is a model of a gas burner.
</p>
<p>
The tank has <code>nSeg</code> fluid volumes. The top volume has the index <code>1</code>.
Thus, to add a heating element to the bottom element, connect a heat input to
<code>heaPorVol[nSeg]</code>.
</p>
</html>",   revisions="<html>
<ul>
<li>
May 15, 2011 by Thierry S. Nouidui:<br>
First implementation.
</li>
</ul>
</html>"),  Icon(graphics={Rectangle(
                        extent={{-40,60},{40,20}},
                        lineColor={255,0,0},
                        fillColor={255,0,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-40,-20},{40,-60}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-76,2},{-90,-2}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{0,84},{-80,80}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-76,84},{-80,-2}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{82,0},{78,-86}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{0,84},{-4,60}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{82,-84},{2,-88}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{6,-60},{2,-84}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{92,2},{78,-2}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-40,20},{40,-20}},
                        lineColor={255,0,0},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.CrossDiag),Text(
                        extent={{100,106},{134,74}},
                        lineColor={0,0,127},
                        textString="QLoss"),Rectangle(
                        extent={{-10,10},{10,-10}},
                        lineColor={0,0,0},
                        fillPattern=FillPattern.Sphere,
                        fillColor={255,255,255}),Rectangle(
                        extent={{50,68},{40,-66}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-40,66},{-50,-68}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-48,68},{50,60}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-48,-60},{50,-68}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Line(
                        points={{26,72},{102,72},{100,72}},
                        color={127,0,0},
                        pattern=LinePattern.Dot),Line(
                        points={{56,6},{56,72},{58,72}},
                        color={127,0,0},
                        pattern=LinePattern.Dot),Line(
                        points={{22,-74},{70,-74},{70,72}},
                        color={127,0,0},
                        pattern=LinePattern.Dot)}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics));
        end Gas;

        package Examples
          model Gas
            import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
            Modelica.Blocks.Sources.Constant TDryBul(k=273.15 + 21)
              annotation (Placement(transformation(extent={{78,-36},{58,-16}})));
            Buildings.HeatTransfer.Sources.PrescribedTemperature TBCBot
              "Boundary condition for tank" annotation (Placement(transformation(
                  extent={{6,-6},{-6,6}},
                  rotation=180,
                  origin={-40,-34})));
            Modelica.Blocks.Sources.Constant TFloor(k=273.15 + 15) annotation (
                Placement(transformation(extent={{-96,-44},{-76,-24}})));
            Modelica.Blocks.Sources.Constant QBurner(k=13180)
              annotation (Placement(transformation(extent={{78,-70},{58,-50}})));
            Modelica.Blocks.Sources.Constant QLoss(k=0)
              annotation (Placement(transformation(extent={{80,40},{60,60}})));
            Modelica.Blocks.Sources.Constant TFloor1(k=273.15 + 30)
              annotation (Placement(transformation(extent={{-98,48},{-78,68}})));
            Buildings.HeatTransfer.Sources.PrescribedTemperature TBCBot1
              "Boundary condition for tank" annotation (Placement(transformation(
                  extent={{6,-6},{-6,6}},
                  rotation=180,
                  origin={-42,58})));
            WaterHeaterLib.BaseClasses.Burner.Gas burn
              annotation (Placement(transformation(extent={{-28,-20},{52,38}})));
          equation
            connect(TFloor.y, TBCBot.T) annotation (Line(
                points={{-75,-34},{-47.2,-34}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(TFloor1.y, TBCBot1.T) annotation (Line(
                points={{-77,58},{-49.2,58}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(TBCBot.port, burn.heaPorBot) annotation (Line(
                points={{-34,-34},{9.6,-34},{9.6,-12.4}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(TBCBot1.port, burn.heaPorTop) annotation (Line(
                points={{-36,58},{-8,58},{-8,30}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(TDryBul.y, burn.TDryBul) annotation (Line(
                points={{57,-26},{-6.2,-26},{-6.2,-12.4}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(QBurner.y, burn.QBurner) annotation (Line(
                points={{57,-60},{27.6,-60},{27.6,-12.2}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(QLoss.y, burn.Q_B) annotation (Line(
                points={{59,50},{6.8,50},{6.8,30.2}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end Gas;
        end Examples;
      end Burner;

      package Examples
        model cdotG "this is an example for cdotG"
          import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
          WaterHeaterLib.BaseClasses.cdotG  cdot_G
            annotation (Placement(transformation(extent={{12,26},{32,46}})));
          Modelica.Blocks.Sources.Constant T_AD_flame(k=273.15 + 1000)
            annotation (Placement(transformation(extent={{-46,26},{-26,46}})));
          Modelica.Blocks.Sources.Constant T_Dry_Bul(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-44,-18},{-24,2}})));
          Modelica.Blocks.Sources.Constant QBurner(k=13180)
            annotation (Placement(transformation(extent={{-44,-52},{-24,-32}})));
        equation
          connect(T_AD_flame.y, cdot_G.T_AD) annotation (Line(
              points={{-25,36},{9.8,36}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_Dry_Bul.y, cdot_G.TDryBul) annotation (Line(
              points={{-23,-8},{16,-8},{16,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner.y, cdot_G.QIn) annotation (Line(
              points={{-23,-42},{22,-42},{22,24}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end cdotG;

        model TFlame "this is an example for TFlame"
          import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
          WaterHeaterLib.BaseClasses.TFlame     t_AD_Flame
            annotation (Placement(transformation(extent={{22,-12},{42,8}})));
          Modelica.Blocks.Sources.Constant T_Dry_Bul(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-40,14},{-20,34}})));
          Modelica.Blocks.Sources.Constant QBurner(k=13180)
            annotation (Placement(transformation(extent={{-40,-30},{-20,-10}})));
        equation
          connect(T_Dry_Bul.y, t_AD_Flame.TDryBul) annotation (Line(
              points={{-19,24},{0,24},{0,4},{20,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner.y, t_AD_Flame.QBurner) annotation (Line(
              points={{-19,-20},{0,-20},{0,-4},{20,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end TFlame;

        model THotGas "this is an example for THotGas"
          import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
          WaterHeaterLib.BaseClasses.THotGas  t_hotGas
            annotation (Placement(transformation(extent={{58,6},{78,26}})));
          Modelica.Blocks.Sources.Constant h_RB(k=2)
            annotation (Placement(transformation(extent={{-80,22},{-60,42}})));
          Modelica.Blocks.Sources.Constant C_dot_G(k=1e4)
            annotation (Placement(transformation(extent={{-80,58},{-60,78}})));
          Modelica.Blocks.Sources.Constant h_CB(k=600)
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Blocks.Sources.Constant T_AD_Flame(k=1000)
            annotation (Placement(transformation(extent={{-80,-46},{-60,-26}})));
          Modelica.Blocks.Sources.Constant T_Wall(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-80,-80},{-60,-60}})));
        equation
          connect(C_dot_G.y, t_hotGas.C_dotG) annotation (Line(
              points={{-59,68},{-18,68},{-18,24},{56,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_RB.y, t_hotGas.h_RB) annotation (Line(
              points={{-59,32},{-18,32},{-18,20},{56,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_CB.y, t_hotGas.h_CB) annotation (Line(
              points={{-59,0},{-16,0},{-16,16},{56,16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_AD_Flame.y, t_hotGas.T_AD) annotation (Line(
              points={{-59,-36},{-18,-36},{-18,12},{56,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_Wall.y, t_hotGas.T_WL) annotation (Line(
              points={{-59,-70},{-2,-70},{-2,8},{56,8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end THotGas;

        model mDotDExample
          mDCal mDCal1(nSeg=3)
            annotation (Placement(transformation(extent={{-18,-6},{2,14}})));
          Modelica.Blocks.Sources.RealExpression mDotB(y=1)
            annotation (Placement(transformation(extent={{-92,10},{-72,30}})));
          Modelica.Blocks.Sources.RealExpression mDotIn[3](y=7/3)
            annotation (Placement(transformation(extent={{-92,-6},{-72,14}})));
          Modelica.Blocks.Sources.RealExpression mDotF[3](y=2)
            annotation (Placement(transformation(extent={{-92,-22},{-72,-2}})));
        equation
          connect(mDotF.y, mDCal1.mDotFlu) annotation (Line(
              points={{-71,-12},{-46,-12},{-46,-5},{-20,-5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotIn.y, mDCal1.mDotIn) annotation (Line(
              points={{-71,4},{-20,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotB.y, mDCal1.mDotBas) annotation (Line(
              points={{-71,20},{-46,20},{-46,13},{-20,13}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end mDotDExample;

        model dHBUExample
          package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          dHBU dHBU1(nSeg=3, redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-12,-6},{8,14}})));
          Modelica.Blocks.Sources.Constant TWat[3](k=45)
            annotation (Placement(transformation(extent={{-92,-6},{-72,14}})));
          Modelica.Blocks.Sources.Constant THotBas(k=70)
            annotation (Placement(transformation(extent={{-92,26},{-72,46}})));
          Modelica.Blocks.Sources.Constant mDotBas(k=0.05)
            annotation (Placement(transformation(extent={{-92,56},{-72,76}})));
          Modelica.Blocks.Sources.Constant mDotFlu[3](k=0.02)
            annotation (Placement(transformation(extent={{-92,-36},{-72,-16}})));
          Modelica.Blocks.Sources.Constant THotFlu[3](k=60)
            annotation (Placement(transformation(extent={{-92,-66},{-72,-46}})));
        equation
          connect(mDotBas.y, dHBU1.mDotBas) annotation (Line(
              points={{-71,66},{-28,66},{-28,12},{-14,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(THotBas.y, dHBU1.THotBas) annotation (Line(
              points={{-71,36},{-32,36},{-32,8},{-14,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TWat.y, dHBU1.TWat) annotation (Line(
              points={{-71,4},{-14,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotFlu.y, dHBU1.mDotFlu) annotation (Line(
              points={{-71,-26},{-32,-26},{-32,0},{-14,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(THotFlu.y, dHBU1.THotFlu) annotation (Line(
              points={{-71,-56},{-28,-56},{-28,-4},{-14,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end dHBUExample;

        model QBuoExample
          package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          QBuo qBuo(
            redeclare package Medium = Medium,
            nSeg=3,
            m_flow_C=0.0012)
                    annotation (Placement(transformation(extent={{-4,-10},{16,10}})));
          Modelica.Blocks.Sources.Constant mDotD[3](k=0.05)
            annotation (Placement(transformation(extent={{-90,20},{-70,40}})));
          Modelica.Blocks.Sources.Constant TWat[3](k=45)
            annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
          Modelica.Blocks.Sources.Constant dHBU[3](k=15)
            annotation (Placement(transformation(extent={{-90,-40},{-70,-20}})));
          Modelica.Blocks.Sources.Constant QBas(k=100)
            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));
          Modelica.Blocks.Sources.Constant QFlu[3](k=100)
            annotation (Placement(transformation(extent={{-90,-70},{-70,-50}})));
        equation
          connect(mDotD.y, qBuo.mDotD) annotation (Line(
              points={{-69,30},{-38,30},{-38,6},{-6,6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TWat.y, qBuo.TWat) annotation (Line(
              points={{-69,0},{-6,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(dHBU.y, qBuo.dHBU) annotation (Line(
              points={{-69,-30},{-38,-30},{-38,-6},{-6,-6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QFlu.y, qBuo.QFlu) annotation (Line(
              points={{-69,-60},{-26,-60},{-26,-10},{-6,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBas.y, qBuo.QBas) annotation (Line(
              points={{-69,60},{-26,60},{-26,10},{-6,10}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end QBuoExample;

        model buoHeaTraExample
          "Provides an example on the use of the model buoHeaTra"
            package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          buoHeaTra buoHeaTra1(nSeg=10, redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{58,0},{78,20}})));
          Modelica.Blocks.Sources.Constant QDotBas(k=-2000)
            annotation (Placement(transformation(extent={{-8,16},{12,36}})));
          Modelica.Blocks.Sources.Constant QDotFlu[10](k=-2000)
            annotation (Placement(transformation(extent={{-8,-100},{12,-80}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol[10](V=0.014, m_flow_nominal=0.001,
            redeclare package Medium = Medium)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-32,12})));
          Modelica.Blocks.Sources.RealExpression realExpression[10](y=buoHeaTra1.buoHeaTra)
            annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
          Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow
            prescribedHeatFlow[10]
            annotation (Placement(transformation(extent={{-46,-46},{-32,-32}})));
          Modelica.Blocks.Sources.Constant QLosTop(k=1000)
            annotation (Placement(transformation(extent={{-8,60},{12,80}})));
        equation
          connect(QDotBas.y, buoHeaTra1.QDotBas) annotation (Line(
              points={{13,26},{20.5,26},{20.5,0},{56,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QDotFlu.y, buoHeaTra1.QDotFlu) annotation (Line(
              points={{13,-90},{46,-90},{46,8},{56,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(vol.heatPort, buoHeaTra1.TWat) annotation (Line(
              points={{-22,12},{-22,-38},{36,-38},{36,13.6},{57.4,13.6}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(realExpression.y, prescribedHeatFlow.Q_flow) annotation (Line(
              points={{-59,-40},{-52,-40},{-52,-39},{-46,-39}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
              points={{-32,-39},{-28,-39},{-28,-38},{-22,-38},{-22,12}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(QLosTop.y, buoHeaTra1.QLosTop) annotation (Line(
              points={{13,70},{40,70},{40,18},{56,18}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end buoHeaTraExample;

        model T_F0Example
          TF0 tF0_1
            annotation (Placement(transformation(extent={{18,-12},{38,8}})));
          Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-64,-12},{-44,8}})));
          Modelica.Blocks.Sources.Constant Qin(k=10000)
            annotation (Placement(transformation(extent={{-22,-80},{-2,-60}})));
          Modelica.Blocks.Sources.Constant QLoss(k=-8000)
                                                         annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={28,-70})));
          Modelica.Blocks.Sources.Constant cDotG(k=7.9) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={72,-70})));
        equation
          connect(TAmb.y, tF0_1.TDryBul) annotation (Line(
              points={{-43,-2},{16,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QLoss.y, tF0_1.QLoss) annotation (Line(
              points={{28,-59},{28,-14},{26.8,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Qin.y, tF0_1.QIn) annotation (Line(
              points={{-1,-70},{6,-70},{6,-24},{21.8,-24},{21.8,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cDotG.y, tF0_1.C_dot_G) annotation (Line(
              points={{61,-70},{48,-70},{48,-20},{32,-20},{32,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end T_F0Example;

        model minFloInExample
          parameter Integer nSeg(min=1) = 5;
          minFloIn minFloIn1(
            nSeg=nSeg,
            perInA={4.0134,6.1873,-0.4415,2.8428,-1.0033},
            perInB={-2.0619,-2.8662,-0.2213,0.102,1.1405},
            perInC={0.4896,0.5048,0.2329,-0.0032,-0.0224})
            annotation (Placement(transformation(extent={{-10,0},{10,20}})));
          Modelica.Blocks.Sources.Constant const[nSeg](k=0.12)
            annotation (Placement(transformation(extent={{-80,8},{-60,28}})));
        equation
          connect(const.y, minFloIn1.m_flow_in) annotation (Line(
              points={{-59,18},{-12,18}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end minFloInExample;

        model timDelExample
          "Provides an example using the time delay (timDel) model"
          parameter Integer nSeg(min=1) = 8;
          timDel timDel1(nSeg=nSeg,
            timDelB={0,-14.047,79.1,475.76,805.42,792.21,802.41,812.61},
            timDelC={0,0.2408,21.676,14.305,8.1676,8.2512,7.9334,7.6157},
            timDelA={0,100.33,-567.21,-1971.9,-3112.4,-2660.9,-2376.6,-2092.3})
            annotation (Placement(transformation(extent={{-18,6},{2,26}})));
          Modelica.Blocks.Sources.Constant const[nSeg](k=0.02)
            annotation (Placement(transformation(extent={{-86,14},{-66,34}})));
        equation
          connect(const.y, timDel1.m_flow_in) annotation (Line(
              points={{-65,24},{-20,24}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end timDelExample;

        model draHeaTraExample "Provides an example of how draHeaTra is used"
            package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          parameter Integer nSeg(min=1) = 8;
          draHeaTra draHeaTra1(nSeg=nSeg, redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{0,8},{20,28}})));
          Modelica.Blocks.Tables.CombiTable1Ds combiTable1Ds[nSeg](
            tableOnFile=true,
            tableName="Flow",
            fileName="StorageTankDrawProfile.txt")
            annotation (Placement(transformation(extent={{-64,4},{-44,24}})));
          Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=time)
            annotation (Placement(transformation(extent={{-98,4},{-78,24}})));
          Modelica.Blocks.Sources.Constant const[nSeg](k={273.105 + 20,273.105 +
                30,273.105 + 40,273.105 + 50,273.105 + 60,273.105 + 70,273.105 +
                80,273.105 + 90})
            annotation (Placement(transformation(extent={{-68,36},{-48,56}})));
        equation
          connect(realExpression.y, combiTable1Ds.u) annotation (Line(
              points={{-77,14},{-66,14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(combiTable1Ds.y[1], draHeaTra1.mFloIn) annotation (Line(
              points={{-43,14},{-22,14},{-22,13},{-2,13}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const.y, draHeaTra1.TWat) annotation (Line(
              points={{-47,46},{-22,46},{-22,25.2},{-2,25.2}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end draHeaTraExample;
      end Examples;

      model strLay "Identifies the height of the boundary layer"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Integer nSeg(min=2) = 3;
        Real smoDel = 0.0001;
        parameter Real QDotPilot;
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput strLay[nSeg]
          annotation (Placement(transformation(extent={{100,-16},{132,16}})));
      equation
        //Defines the bottom segment as always being below the stratification layer
        strLay[nSeg] = 0;
        for i in 1:(nSeg-1) loop
          //Checks the location of each segment relative to the stratification layer. Two checks:
          //  1) Compares the temperature of the active segment to the temperature of the segment below. If the temperature difference is less than the smoothing range it is considered to be under the stratification layer
          //  2) Checks the status of the segment below. If that segment is below the stratification layer, then the top layer can also be considered below the stratification layer
      //    if timer.y > 0 and strLay[nSeg-i] > 0 then
            strLay[nSeg-i] = min(1,Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg-i] - TWat[nSeg-i+1] - 0.2 - smoDel, smoDel) + Buildings.Utilities.Math.Functions.smoothHeaviside(strLay[nSeg-i+1]-0.1,smoDel));
      //     elseif timer.y < 1 then
      //       strLay[nSeg-i] = 1;
      //     else
      //       strLay[nSeg-i] = 0;
      //     end if;
        end for;
        annotation (Diagram(graphics));
      end strLay;

      model heaSum
        "Sums all the heat entering the water below the stratification layer"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 3;
        Real heaBelStr[nSeg];
        Real smoDel = 0.0001;
        Modelica.Blocks.Interfaces.RealInput strLay[nSeg]
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealOutput QBelStrTot
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput QLosTop
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      equation
        // Identifies the heat transfer below the stratification layer caused by the top segment. Includes both heat in from the flue, and losses out through the top. In from the flue is only included if the segment is considered below the stratification layer
        heaBelStr[1] = QDotFlu[1] * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[1] - 0.1,smoDel) - QLosTop;
        // Identifies the heat below the stratification layer caused by flue heat transfer for each segment in the tank. The value is only included if a segment is considered below the stratification layer
        for i in 2:(nSeg - 1) loop
          heaBelStr[i] = QDotFlu[i] * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[i] - 0.1,smoDel);
        end for;
        //  Identifies the heat below the stratification layer caused by heat transfer into the bottom segment. Includes both the flue and base heat transfer. Only added if the bottom segment is considered below the stratification layer
        heaBelStr[nSeg] =  QDotFlu[nSeg] * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[nSeg] - 0.1,smoDel) + QDotBas * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[nSeg] - 0.1,smoDel);
        //  Sums up all of the heat added below the stratification layer. It will be divided evenly between all segments below the stratification layer in a separate model
        QBelStrTot = sum(heaBelStr[1:nSeg]);
        annotation (Diagram(graphics));
      end heaSum;

      model QIn "Identifies the amount of heat entering each segment"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 2;
        Real smoDel = 0.0001;
        Real QIn[nSeg];
        Real heaPerSeg;
        Modelica.Blocks.Interfaces.RealInput strLay[nSeg]
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealInput heaBelStrTot
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealOutput QInCom[nSeg]
          "Identifies the heat entering each segment"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput QLosTop
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      equation
        //  Identifies the amount of heat to add to each segment below the stratification layer. Accomplished by dividing the total heat below the stratification layer by the number of segments below the stratification layer
        heaPerSeg = heaBelStrTot / (nSeg - sum(strLay[1:nSeg]));
        for i in 1:(nSeg-1) loop
          //  Calculates the heat entering each segment. If a segment is below the stratification layer, value is heaPerSeg. If above the stratification layer, value is QDotFlu
          QIn[i] = heaPerSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i+1] - TWat[i] + 0.1 - smoDel, smoDel) + QDotFlu[i] * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i] - TWat[i+1] - 0.1, smoDel);
        end for;
        //  Performs the same calculation for the bottom segment
        QIn[nSeg] = heaPerSeg * Buildings.Utilities.Math.Functions.smoothHeaviside((1 - smoDel) - strLay[nSeg], smoDel) + QDotBas * Buildings.Utilities.Math.Functions.smoothHeaviside(strLay[nSeg] - smoDel, smoDel);
        //  Identifies the final heat transfer into each segment. Does so combining flu/base/loss heat transfers to Qin to ensure that no heat transfer is double counted
        QInCom[1] = QIn[1] - QDotFlu[1] - QLosTop;
        for i in 2:(nSeg-1) loop
          QInCom[i] = QIn[i] - QDotFlu[i];
        end for;
        QInCom[nSeg] = QIn[nSeg] - QDotFlu[nSeg] - QDotBas;
        annotation (Diagram(graphics));
      end QIn;

      model minFloIn
        "Identifies the minimum inlet water flow entering each segment"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Real perInA[nSeg]= {4.0134};
        parameter Real perInB[nSeg] = {-2.0619};
        parameter Real perInC[nSeg] = {0.4896};
        parameter Integer nSeg(min = 1) = 1;
        Modelica.Blocks.Interfaces.RealInput m_flow_in[nSeg]
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=perInA)
          annotation (Placement(transformation(extent={{-70,36},{-50,56}})));
        Modelica.Blocks.Sources.RealExpression realExpression1[nSeg](y=perInB)
          annotation (Placement(transformation(extent={{-70,4},{-50,24}})));
        Modelica.Blocks.Sources.RealExpression realExpression2[nSeg](y=perInC)
          annotation (Placement(transformation(extent={{-70,-26},{-50,-6}})));
        Modelica.Blocks.Math.Product product1[nSeg]
          annotation (Placement(transformation(extent={{-30,64},{-10,84}})));
        Modelica.Blocks.Math.Product product2[nSeg]
          annotation (Placement(transformation(extent={{2,42},{22,62}})));
        Modelica.Blocks.Math.Product product3[nSeg]
          annotation (Placement(transformation(extent={{0,10},{20,30}})));
        Modelica.Blocks.Math.Add3 add3_1[nSeg]
          annotation (Placement(transformation(extent={{64,10},{84,30}})));
        Modelica.Blocks.Interfaces.RealOutput y[nSeg]
          annotation (Placement(transformation(extent={{100,10},{120,30}})));
      equation
        connect(m_flow_in, product1.u1) annotation (Line(
            points={{-120,80},{-32,80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in, product1.u2) annotation (Line(
            points={{-120,80},{-58,80},{-58,68},{-32,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y, product2.u1) annotation (Line(
            points={{-9,74},{-6,74},{-6,58},{0,58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, product2.u2) annotation (Line(
            points={{-49,46},{0,46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product2.y, add3_1.u1) annotation (Line(
            points={{23,52},{46,52},{46,28},{62,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in, product3.u1) annotation (Line(
            points={{-120,80},{-86,80},{-86,26},{-2,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, product3.u2) annotation (Line(
            points={{-49,14},{-2,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y, add3_1.u2) annotation (Line(
            points={{21,20},{62,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression2.y, add3_1.u3) annotation (Line(
            points={{-49,-16},{48,-16},{48,12},{62,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add3_1.y, y) annotation (Line(
            points={{85,20},{110,20}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end minFloIn;

      function readIntegerParameter
        "Read the value of a Real parameter from file"
        import Modelica.Utilities.*;
        extends Modelica.Icons.Function;
        input String fileName "Name of file"       annotation(Dialog(
                               __Dymola_loadSelector(filter="Text files (*.txt)",
                               caption="Open file in which Real parameters are present")));
        input String name "Name of parameter";
        output Integer result "Actual value of parameter on file";
      protected
        String line;
        String identifier;
        String delimiter;
        Integer nextIndex;
        Integer iline=1;
        Modelica.Utilities.Types.TokenValue token;
        String message = "in file \"" + fileName + "\" on line ";
        String message2;
        Boolean found = false;
        Boolean endOfFile=false;
      algorithm
       (line, endOfFile) :=Modelica.Utilities.Streams.readLine(fileName, iline);
        while not found and not endOfFile loop
          (token, nextIndex) := Modelica.Utilities.Strings.scanToken(line);
           if token.tokenType == Modelica.Utilities.Types.TokenType.NoToken then
              // skip line
              iline := iline + 1;
           elseif token.tokenType == Modelica.Utilities.Types.TokenType.IdentifierToken then
              if token.string == name then
                 // name found, get value of "name = value;"
                 message2 := message + String(iline);
                 (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(line, nextIndex, {"="}, message2);
              (result,nextIndex) := integerExpression(
                      line,
                      nextIndex,
                      message2);
                 (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(line, nextIndex, {";", ""}, message2);
                 Modelica.Utilities.Strings.scanNoToken(line, nextIndex, message2);
                 found := true;
              else
                 // wrong name, skip line
                 iline := iline + 1;
              end if;
           else
              // wrong token
              Modelica.Utilities.Strings.syntaxError(line, nextIndex, "Expected identifier " + message + String(iline));
           end if;
           // read next line
           (line, endOfFile) :=Modelica.Utilities.Streams.readLine(fileName, iline);
        end while;
        if not found then
           Modelica.Utilities.Streams.error("Parameter \"" + name + "\" not found in file \"" + fileName + "\"");
        end if;
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
result = <b>readRealParameter</b>(fileName, name);
</pre></blockquote>
<h4>Description</h4>
<p>
This function demonstrates how a function can be implemented
that reads the value of a parameter from file. The function
performs the following actions:
</p>
<ol>
<li> It opens file \"fileName\" and reads the lines of the file.</li>
<li> In every line, Modelica line comments (\"// ... end-of-line\")
     are skipped </li>
<li> If a line consists of \"name = expression\" and the \"name\"
     in this line is identical to the second argument \"name\"
     of the function call, the expression calculator Examples.expression
     is used to evaluate the expression after the \"=\" character.
     The expression can optionally be terminated with a \";\".</li>
<li> The result of the expression evaluation is returned as
     the value of the parameter \"name\". </li>
</ol>
<h4>Example</h4>
<p>
On file \"test.txt\" the following lines might be present:
</p>
<blockquote><pre>
// Motor data
J        = 2.3     // inertia
w_rel0   = 1.5*2;  // relative angular velocity
phi_rel0 = pi/3
</pre></blockquote>
<p>
The function returns the value \"3.0\" when called as:
</p>
<blockquote><pre>
readRealParameter(\"test.txt\", \"w_rel0\")
</pre></blockquote>
</html>"));
      end readIntegerParameter;

      function integerExpression
        "Expression interpreter that returns with the position after the expression (expression may consist of +,-,*,/,(),sin(), cos(), tan(), sqrt(), pi"
        import Modelica.Utilities.Types;
        import Modelica.Utilities.Strings;
        import Modelica.Math;
        import Modelica.Constants;
        extends Modelica.Icons.Function;
        input String string "Expression that is evaluated";
        input Integer startIndex=1
          "Start scanning of expression at character startIndex";
        input String message=""
          "Message used in error message if scan is not successful";
        output Integer result "Value of expression";
        output Integer nextIndex "Index after the scanned expression";
      protected
      function term "Evaluate term of an expression"
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Real result;
        output Integer nextIndex;
        protected
        Integer result2;
        Boolean scanning=true;
        String opString;
      algorithm
        // scan for "primary * primary" or "primary / primary"
        (result, nextIndex) := primary(string, startIndex, message);
        while scanning loop
          (opString, nextIndex) := Strings.scanDelimiter(
                                          string, nextIndex, {"*","/",""}, message);
          if opString == "" then
             scanning := false;
          else
             (result2, nextIndex) := primary(string, nextIndex, message);
             result := if opString == "*" then result*result2 else result/result2;
          end if;
        end while;
      end term;

      function primary "Evaluate primary of an expression"
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Real result;
        output Integer nextIndex;
        protected
        Types.TokenValue token;
        Real result2;
        String delimiter;
        String functionName;
        Real pi = Modelica.Constants.pi;
      algorithm
        (token,nextIndex) := Strings.scanToken(string, startIndex,unsigned=true);
        if token.tokenType == Types.TokenType.DelimiterToken and token.string == "(" then
          (result,nextIndex) := expression(string, nextIndex,message);
          (delimiter,nextIndex) := Strings.scanDelimiter(string,nextIndex,{")"}, message);
        elseif token.tokenType == Types.TokenType.RealToken then
          result := token.real;
        elseif token.tokenType == Types.TokenType.IntegerToken then
          result := token.integer;
        elseif token.tokenType == Types.TokenType.IdentifierToken then
          if token.string == "pi" then
             result := pi;
          else
             functionName := token.string;
             (delimiter,nextIndex) := Strings.scanDelimiter(string,nextIndex,{"("}, message);
             (result,nextIndex)    := expression(string, nextIndex, message);
             (delimiter,nextIndex) := Strings.scanDelimiter(string,nextIndex,{")"}, message);
             if functionName == "sin" then
               result := Math.sin(result);
             elseif functionName == "cos" then
               result := Math.cos(result);
             elseif functionName == "tan" then
               result := Math.tan(result);
             elseif functionName == "sqrt" then
               if result < 0.0 then
                  Strings.syntaxError(string, startIndex, "Argument of call \"sqrt(" + String(result) + ")\" is negative.\n" +
                              "Imaginary numbers are not supported by the calculator.\n" + message);
               end if;
               result := sqrt(result);
             else
               Strings.syntaxError(string, startIndex, "Function \"" + functionName + "\" is unknown (not supported)\n" +
                                               message);
             end if;
          end if;
        else
          Strings.syntaxError(string, startIndex, "Invalid primary of expression.\n" + message);
        end if;
      end primary;
        Integer result2;
        String signOfNumber;
        Boolean scanning=true;
        String opString;
      algorithm
        // scan for optional leading "+" or "-" sign
        (signOfNumber, nextIndex) :=Modelica.Utilities.Strings.scanDelimiter(
                                         string, startIndex, {"+","-",""}, message);
        // scan for "term + term" or "term - term"
        (result,nextIndex) := integerTerm(
                string,
                nextIndex,
                message);
        if signOfNumber == "-" then
           result := -result;
        end if;
        while scanning loop
          (opString, nextIndex) := Modelica.Utilities.Strings.scanDelimiter(
                                          string, nextIndex, {"+","-",""}, message);
          if opString == "" then
             scanning := false;
          else
            (result2,nextIndex) := integerTerm(
                    string,
                    nextIndex,
                    message);
             result := if opString == "+" then result+result2 else result-result2;
          end if;
        end while;
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
             result = <b>expression</b>(string);
(result, nextIndex) = <b>expression</b>(string, startIndex=1, message=\"\");
</pre></blockquote>
<h4>Description</h4>
<p>
This function is nearly the same as Examples.<b>calculator</b>.
The essential difference is that function \"expression\" might be
used in other parsing operations: After the expression is
parsed and evaluated, the function returns with the value
of the expression as well as the position of the character
directly after the expression.
</p>
<p>
This function demonstrates how a simple expression calculator
can be implemented in form of a recursive decent parser
using basically the Strings.scanToken(..) and scanDelimiters(..)
function. There are 2 local functions (term, primary) that
implement the corresponding part of the grammar.
</p>
<p>
The following operations are supported (pi=3.14.. is a predefined constant):
</p>
<pre>
   +, -
   *, /
   (expression)
   sin(expression)
   cos(expression)
   tan(expression)
   sqrt(expression)
   pi
</pre>
<p>
The optional argument \"startIndex\" defines at which position
scanning of the expression starts.
</p>
<p>
In case of error,
the optional argument \"message\" is appended to the error
message, in order to give additional information where
the error occured.
</p>
<p>
This function parses the following grammaer
</p>
<pre>
  expression: [ add_op ] term { add_op term }
  add_op    : \"+\" | \"-\"
  term      : primary { mul_op primary }
  mul_op    : \"*\" | \"/\"
  primary   : UNSIGNED_NUMBER
              | pi
              | ( expression )
              | functionName( expression )
  function  :   sin
              | cos
              | tan
              | sqrt
</pre>
<p>
Note, in Examples.readRealParameter it is shown, how the expression
function can be used as part of another scan operation.
</p>
<h4>Example</h4>
<blockquote><pre>
  expression(\"2+3*(4-1)\");  // returns 11
  expression(\"sin(pi/6)\");  // returns 0.5
</pre></blockquote>
</html>"));
      end integerExpression;

      function integerTerm
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Integer result;
        output Integer nextIndex;
      protected
        Integer result2;
        Boolean scanning=true;
        String opString;
      algorithm
        // scan for "primary * primary" or "primary / primary"
        (result,nextIndex) := integerPrimary(
                string,
                startIndex,
                message);
        while scanning loop
          (opString, nextIndex) := Modelica.Utilities.Strings.scanDelimiter(
                                          string, nextIndex, {"*","/",""}, message);
          if opString == "" then
             scanning := false;
          else
            (result2,nextIndex) := integerPrimary(
                    string,
                    nextIndex,
                    message);
             result :=result2; // if opString == "*" then result*result2 else result/result2;
          end if;
        end while;
      end integerTerm;

      function integerPrimary
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Integer result;
        output Integer nextIndex;
      protected
        Modelica.Utilities.Types.TokenValue token;
        Integer result2;
        String delimiter;
        String functionName;
        Real pi = Modelica.Constants.pi;
      algorithm
        (token,nextIndex) := Modelica.Utilities.Strings.scanToken(string, startIndex,unsigned=true);
        if token.tokenType == Modelica.Utilities.Types.TokenType.DelimiterToken and token.string == "(" then
          (result,nextIndex) := integerExpression(
                  string,
                  nextIndex,
                  message);
          (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(string,nextIndex,{")"}, message);
      //  elseif token.tokenType == Modelica.Utilities.Types.TokenType.RealToken then
      //    result := token.real;
        elseif token.tokenType == Modelica.Utilities.Types.TokenType.IntegerToken then
          result := token.integer;
      //  elseif token.tokenType == Modelica.Utilities.Types.TokenType.IdentifierToken then
      //    if token.string == "pi" then
      //       result := pi;
      //    else
      //       functionName := token.string;
      //       (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(string,nextIndex,{"("}, message);
      //       (result,nextIndex)    := WaterHeaterLib.BaseClasses.integerExpression(string, nextIndex, message);
      //       (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(string,nextIndex,{")"}, message);
      //       if functionName == "sin" then
      //         result := Modelica.Math.sin(result);
      //       elseif functionName == "cos" then
      //         result := Modelica.Math.cos(result);
      //       elseif functionName == "tan" then
      //         result := Modelica.Math.tan(result);
      //       elseif functionName == "sqrt" then
      //         if result < 0.0 then
      //            Modelica.Utilities.Strings.syntaxError(string, startIndex, "Argument of call \"sqrt(" + String(result) + ")\" is negative.\n" +
      //                        "Imaginary numbers are not supported by the calculator.\n" + message);
      //         end if;
      //         result := sqrt(result);
      //       else
      //         Modelica.Utilities.Strings.syntaxError(string, startIndex, "Function \"" + functionName + "\" is unknown (not supported)\n" +
      //                                         message);
      //       end if;
      //    end if;
        else
          Modelica.Utilities.Strings.syntaxError(string, startIndex, "Invalid primary of expression.\n" + message);
        end if;
      end integerPrimary;

      model timDel
        "Calculates the time delay for each segment at the given flow rate"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min = 1) = 1;
        parameter Real timDelA[nSeg] = {0};
        parameter Real timDelB[nSeg] = {0};
        parameter Real timDelC[nSeg] = {0};
        Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=timDelA)
          annotation (Placement(transformation(extent={{-70,36},{-50,56}})));
        Modelica.Blocks.Sources.RealExpression realExpression1[nSeg](y=timDelB)
          annotation (Placement(transformation(extent={{-70,4},{-50,24}})));
        Modelica.Blocks.Sources.RealExpression realExpression2[nSeg](y=timDelC)
          annotation (Placement(transformation(extent={{-70,-26},{-50,-6}})));
        Modelica.Blocks.Math.Product product1[nSeg]
          annotation (Placement(transformation(extent={{-30,64},{-10,84}})));
        Modelica.Blocks.Math.Product product2[nSeg]
          annotation (Placement(transformation(extent={{2,42},{22,62}})));
        Modelica.Blocks.Math.Product product3[nSeg]
          annotation (Placement(transformation(extent={{0,10},{20,30}})));
        Modelica.Blocks.Math.Add3 add3_1[nSeg]
          annotation (Placement(transformation(extent={{64,10},{84,30}})));
        Modelica.Blocks.Interfaces.RealInput m_flow_in[nSeg]
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealOutput y[nSeg]
          annotation (Placement(transformation(extent={{100,10},{120,30}})));
      equation
        connect(m_flow_in,product1. u1) annotation (Line(
            points={{-120,80},{-32,80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in,product1. u2) annotation (Line(
            points={{-120,80},{-58,80},{-58,68},{-32,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y,product2. u1) annotation (Line(
            points={{-9,74},{-6,74},{-6,58},{0,58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y,product2. u2) annotation (Line(
            points={{-49,46},{0,46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product2.y,add3_1. u1) annotation (Line(
            points={{23,52},{46,52},{46,28},{62,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in,product3. u1) annotation (Line(
            points={{-120,80},{-86,80},{-86,26},{-2,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y,product3. u2) annotation (Line(
            points={{-49,14},{-2,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y,add3_1. u2) annotation (Line(
            points={{21,20},{62,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression2.y,add3_1. u3) annotation (Line(
            points={{-49,-16},{48,-16},{48,12},{62,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add3_1.y,y)  annotation (Line(
            points={{85,20},{110,20}},
            color={0,0,127},
            smooth=Smooth.None));
      end timDel;

      model perFloIn
        "Calculates the percentage of inlet water entering a segment for a given flow rate and time"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 10;
        Modelica.Blocks.Interfaces.RealInput minFloIn[nSeg]
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.IntegerInput Active[nSeg]
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealOutput perFlo[nSeg]
          annotation (Placement(transformation(extent={{100,0},{120,20}})));
      equation
        for i in (1:nSeg) loop
          perFlo[i] = minFloIn[i] * Active[i];
        end for;
      end perFloIn;

      model hGasFlu
        "Calculates the heat transfer coefficient between the hot gas and the flue wall based on the temperature of the water in the tank"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg=2
          "Number of segments in the connected heat port";
        parameter Real a=1 "a value in the polynomial (see documentation)";
        parameter Real b=1 "b value in the polynomial (see documentation)";
        parameter Real c=1 "c value in the polynomial (See documentation)";
        Modelica.SIunits.Temp_C TWatAvg
          "Average temperature of water in the storage tank. Calcualted using temperatures pulled from the connected heat port.";
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a TWat[nSeg]
          "Connects to the heat port of the water heater. Used to report water temperatures in the tank."
          annotation (Placement(transformation(extent={{-120,-10},{-80,30}})));
        Modelica.Blocks.Interfaces.RealOutput y
          "Out put from the model. Used to send the convection coefficient to the tank model"
          annotation (Placement(transformation(extent={{100,-8},{136,28}})));
        Modelica.Thermal.HeatTransfer.Celsius.TemperatureSensor temperatureSensor[nSeg]
          "Temperature sensor used to convert the temperatures in the heat port to a real value"
                                                                                                              annotation (Placement(transformation(extent={{-74,-2},{-50,22}})));
      equation
        //Calcualtes the average temperature of the water. Used in the polynomial to describe the convection coefficient between the flue gas and flue wall
        TWatAvg = sum(temperatureSensor[1:nSeg].T)/nSeg;
        //Polynomial calculating the convection coefficient between the flue gas and the flue wall. a, b, c are supplied by the user.
        y = a * TWatAvg^2 + b * TWatAvg + c;
        connect(TWat, temperatureSensor.port) annotation (Line(
            points={{-100,10},{-74,10}},
            color={191,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics),
        defaultComponentName = "hGasFlu",
        Documentation(info="<html>
  <p>
  This model calcualtes the convection coefficient between the flue gas and the flue wall. It is intended to be used in condensing water heaters, where heat transfer efficiency will depend on tank water temperature.
  </p>
  <p>
  The calculation is performed using a user-defined polynomial curve. The equation is y = a * T_WatAvg^s + b * T_WatAvg + c. a, b and c are user defined inputs.
  T_WatAvg is calculated by taking the temperatures from a heat port, summing the values from the heat port and dividing by the number of segments in the simulation.
  </p>
  </html>",
        revisions="<html>
  <p>
  <ul>
  <li><i> October 31, 2012</i> by Peter Grant: <br>
  First implementation.
  </li>
  </html>"));
      end hGasFlu;

      model EffTankCond
        "Calculates the efficiency of a condensing water heater based on the average tank temperature"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg=2
          "Number of segments in the connected heat port";
        parameter Real a=1 "a value in the polynomial (see documentation)";
        parameter Real b=1 "b value in the polynomial (see documentation)";
        parameter Real c=1 "c value in the polynomial (See documentation)";
        Modelica.Blocks.Interfaces.RealOutput y
          "Out put from the model. Used to send the convection coefficient to the tank model"
          annotation (Placement(transformation(extent={{100,-8},{136,28}})));
        Modelica.Blocks.Interfaces.RealInput TWatAvg "Temperature of the fluid"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      equation
        //Polynomial calculating the convection coefficient between the flue gas and the flue wall. a, b, c are supplied by the user.
        y = a * TWatAvg^2 + b * TWatAvg + c;
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                            graphics),
        defaultComponentName = "nEffTan",
        Documentation(info="<html>
  <p>
  This model calcualtes the efficiency of a condensing storage tank water heater based on the average temperature of the water in the tank.
  </p>
  <p>
  The calculation is performed using a user-defined polynomial curve. The equation is y = a * T_WatAvg^s + b * T_WatAvg + c. a, b and c are user defined inputs.
  T_WatAvg is calculated by taking the temperatures from a heat port, summing the values from the heat port and dividing by the number of segments in the simulation.
  </p>
  </html>",
        revisions="<html>
  <p>
  <ul>
  <li><i> October 31, 2012</i> by Peter Grant: <br>
  First implementation.
  </li>
  </html>"));
      end EffTankCond;
    end BaseClasses;

    model CondensingTank "Storage tank in a gas-fired water heater"
      import SI = Modelica.SIunits;
      import Modelica.Constants;
      import WaterHeaterLib = WaterHeatingLibrary.CondensingTank;
      replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
        "Medium in the component" annotation (choicesAllMatching=true);
      //   replaceable package MediumB = Modelica.Media.Interfaces.PartialMedium
      //     "Medium in the component" annotation (choicesAllMatching=true);
      import Modelica.Fluid.Types;
      import Modelica.Fluid.Types.Dynamics;
      import Modelica.Constants;
      parameter Modelica.SIunits.Volume VTan=1 "Tank volume";
      parameter Modelica.SIunits.Length DFlu=0.5 "diameter of the flue";
      parameter Modelica.SIunits.Length LFlu=1 "Length of flue";
      parameter Real TIn = 273.15 + 15;
      parameter Real perInA[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real perInB[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real perInC[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real timDelA[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real timDelB[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real timDelC[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Buildings.HeatTransfer.Types.InteriorConvection conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature
        "Convective heat transfer model for opaque constructions"
        annotation (Dialog(group="Convective heat transfer"));
      parameter Modelica.SIunits.Temperature T_Initial[nSeg] = {273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20};
    //  Modelica.SIunits.Temperature T_start;
      // Get the specific heat capacity of MediumB. This will be used later on for the calculation of Q_flow_tot
      Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
      parameter Boolean allowFlowReversal=system.allowFlowReversal
        "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
        annotation (Dialog(tab="Assumptions"),Evaluate=true);
      parameter Modelica.SIunits.CoefficientOfHeatTransfer hFixed=3.0
        "Constant convection coefficient for opaque constructions" annotation (
          Dialog(group="Convective heat transfer", enable=(conMod == Buildings.HeatTransfer.Types.InteriorConvection.Fixed)));
      parameter Real QDotPilot = 158;
      parameter Medium.MassFlowRate m_flow_nominal "Nominal mass flow rate"
        annotation (Dialog(group="Nominal condition"));
      parameter Integer nSeg(min=2) = 20 "Number of volume segments";
      ////////////////////////////////////////////////////////////////////
      //   // Assumptions
      parameter Modelica.Fluid.Types.Dynamics energyDynamics=system.energyDynamics
        "Formulation of energy balance"
        annotation (Evaluate=true, Dialog(tab="Dynamics", group="Equations"));
      parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
        "Formulation of mass balance"
        annotation (Evaluate=true, Dialog(tab="Dynamics", group="Equations"));
      // Initialization
      parameter Medium.AbsolutePressure p_start=Medium.p_default
        "Start value of pressure" annotation (Dialog(tab="Initialization"));
    //    parameter Medium.Temperature T_start =60+273.15 "Start value of temperature"
    //                                   annotation (Dialog(tab="Initialization"));
    //  Modelica.SIunits.Temperature T_start;
      parameter Medium.MassFraction X_start[Medium.nX]=Medium.X_default
        "Start value of mass fractions m_i/m"
        annotation (Dialog(tab="Initialization", enable=Medium.nXi > 0));
      parameter Medium.ExtraProperty C_start[Medium.nC](quantity=Medium.extraPropertiesNames)=
           fill(0, Medium.nC) "Start value of trace substances"
        annotation (Dialog(tab="Initialization", enable=Medium.nC > 0));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow        prescribedHeatFlow[
        nSeg]                 annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={102,-46})));
      ////////////////////////////////////////////////////////////////////
      Buildings.Rooms.Constructions.Construction flueWall[nSeg](
        each A=datFlueWall.A/nSeg,
        each til=datFlueWall.til,
        each final layers=datFlueWall.layers,
        each steadyStateInitial=datFlueWall.steadyStateInitial,
        each T_a_start=datFlueWall.T_a_start,
        each T_b_start=datFlueWall.T_b_start)
        "Heat conduction through partitions that have both sides inside the thermal zone"
        annotation (Placement(transformation(extent={{-118,-36},{-184,30}})));
      WaterHeaterLib.BaseClasses.InteriorWH heaFluWat[nSeg](
        each final A=datFlueWall.A/nSeg,
        each final til=datFlueWall.til,
        each final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each hFixed=hFixed) "Heat transfer between the flue wall and water"
        annotation (Placement(transformation(extent={{-62,34},{-32,4}})));
      Buildings.Rooms.Constructions.Construction tanJac[nSeg](
        each A=datTanEnv.A/nSeg,
        each til=datTanEnv.til,
        each final layers=datTanEnv.layers,
        each steadyStateInitial=datTanEnv.steadyStateInitial,
        each T_a_start=datTanEnv.T_a_start,
        each T_b_start=datTanEnv.T_b_start)
        "Representation of the jacket of the water heater"
        annotation (Placement(transformation(extent={{188,-30},{248,30}})));
      Buildings.Fluid.MixingVolumes.MixingVolume[nSeg] vol(
        redeclare each package Medium = Medium,
        each energyDynamics=energyDynamics,
        each massDynamics=massDynamics,
        each p_start=p_start,
        T_start=T_Initial[nSeg],
        each X_start=X_start,
        each C_start=C_start,
        each V=VTan/nSeg,
        each m_flow_nominal=m_flow_nominal,
        nPorts=1) "Tank segment"                           annotation (Placement(
            transformation(
            extent={{-22,-22},{22,22}},
            rotation=90,
            origin={82,42})));
      Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorBot
        "Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition"
        annotation (Placement(transformation(extent={{-14,-378},{14,-350}},
              rotation=0), iconTransformation(extent={{-48,-400},{-8,-360}})));
    protected
      constant Integer nPorts=2 "Number of ports of volume";
    //   Modelica.SIunits.HeatFlowRate deltaH_flow_BU[nSeg](each start=0)
    //     "Total heat enthalpy of zone i";
    //   Modelica.SIunits.HeatFlowRate deltaH_flow_F[nSeg](each start=0)
    //     "Heat enthalpy of zone induced by the flue wall";
    //   Modelica.SIunits.HeatFlowRate Q_flow_tot[nSeg]( each start=0)
    //    "Total heat flux that will be added to vol port ofr energy balance of zone i";
      Modelica.Blocks.Sources.RealExpression Q_flow_total[nSeg](y=-buoHeaTra.buoHeaTra)
        annotation (Placement(transformation(extent={{196,-62},{142,-30}})));
    public
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datFlueWall(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for partition construction"
                                                      annotation (Placement(
            transformation(extent={{582,340},{622,380}})), HideResult=true);
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnv(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for exterior construction"
                                                     annotation (Placement(
            transformation(extent={{520,342},{560,382}})),HideResult=true);
      Buildings.Rooms.Constructions.Construction tanTop(
        A=datTanEnvTop.A,
        til=datTanEnvTop.til,
        final layers=datTanEnvTop.layers,
        steadyStateInitial=datTanEnvTop.steadyStateInitial,
        T_a_start=datTanEnvTop.T_a_start,
        T_b_start=datTanEnvTop.T_b_start)
        "Representation of the top of the tank"
                                          annotation (Placement(transformation(
            extent={{-28,-28},{28,28}},
            rotation=90,
            origin={18,204})));
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnvTop(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for exterior construction"
                                                     annotation (Placement(
            transformation(extent={{520,400},{560,440}})), HideResult=true);
      Buildings.Rooms.Constructions.Construction tanBas(
        A=datTanEnvBot.A,
        til=datTanEnvBot.til,
        final layers=datTanEnvBot.layers,
        steadyStateInitial=datTanEnvBot.steadyStateInitial,
        T_a_start=datTanEnvBot.T_a_start,
        T_b_start=datTanEnvBot.T_b_start)
        "Representation of the base of the tank"
                                          annotation (Placement(transformation(
            extent={{30,-30},{-30,30}},
            rotation=90,
            origin={20,-282})));
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnvBot(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for exterior construction"
                                                     annotation (Placement(
            transformation(extent={{580,400},{620,440}})), HideResult=true);
      // parameters defined for the water heater model.
      parameter Real h_cw_B_cons=1
        "value should be obtained from Mac Gregor & Emery Journal of Heat Transfer (page 8) --fixme";
      parameter Modelica.SIunits.MassFlowRate m_flow_sr=0.01*0.063
        "Mass flow rate for secondary recirculation in Stagnant region (page 8)";
      parameter Real c_sr=2
        "Empirical factor for scaling mass flow rate for secondary recirculation in stirred region(page 8)";
      parameter Real c_wB=1/15
        "Empirical value determined based on experimental data (see page 8)";
      parameter Real c_wI=1/2
        "Empirical value determined based on experimental data (see page 8)";
      parameter Real h_WF_cons=2
        "Convective heat transfer coefficient between water and flue wall (page 8) --fixme";
      // the assumption is that there is no recirculation in zone nSeg at the top of tank
      final parameter Modelica.SIunits.MassFlowRate m_flow_C[nSeg]=cat(
            1,
            c_sr*m_flow_sr*ones(nSeg - 1),
            {m_flow_sr}) "Secondary recirculation mass flow ratein all zones";
    //   Modelica.SIunits.Temperature T_HB(start=273.15 + 30)
    //    "Effective temperature induced by the heat flux into the tank through the base";
    //   Modelica.SIunits.MassFlowRate m_flow_B
    //    "Mass flow rate induced by the heat flux into the tank through the base";
    //   Modelica.SIunits.Temperature T_H[nSeg](each start=273.15 + 30)
    //    "Temperature of the flue wall for each zone";
    //   Modelica.SIunits.MassFlowRate m_flow_F[nSeg](each start=0)
    //    "Mass flow rate induced by the flue for each zone";
    //   Modelica.SIunits.HeatFlowRate Q_flow_W[nSeg]( each start=0)
    //     "Heat flow rate leaving zone i";
    //   Modelica.SIunits.HeatFlowRate Q_flow_WB "Heat flow rate from the base";
      Modelica.SIunits.Temperature T_WL_mean
        "mean temperature along the flue wall";
       Modelica.SIunits.Temperature T_F[nSeg]( each start = 0)
        "Temperature of flue wall";
      Real smoDel = 0.00001;
      WaterHeaterLib.BaseClasses.InteriorWH heaBasWat(
        final A=datTanEnvBot.A,
        final til=datTanEnvBot.til,
        hFixed=hFixed,
        final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature)
        "Heat transfer between the base of the tank and the water"
                                   annotation (Placement(transformation(
            extent={{14,-14},{-14,14}},
            rotation=-90,
            origin={0,-50})));
      WaterHeaterLib.BaseClasses.InteriorWH convConBou3(
        final A=datTanEnvTop.A,
        final til=datTanEnvTop.til,
        final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each hFixed=hFixed) "Convective heat transfer" annotation (Placement(
            transformation(
            extent={{-14,-14},{14,14}},
            rotation=-90,
            origin={0,110})));
      WaterHeaterLib.BaseClasses.InteriorWH heaWatJac[nSeg](
        each final A=datTanEnv.A/nSeg,
        each final til=datTanEnv.til,
        each final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each hFixed=hFixed) "Heat transfer between the water and the jacket"
        annotation (Placement(transformation(extent={{166,34},{138,6}})));
      Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature flueTemperature[
        nSeg] annotation (Placement(transformation(extent={{-292,4},{-262,34}})));
      Modelica.Blocks.Sources.RealExpression flueTemp[nSeg](y=T_F_avg)
        annotation (Placement(transformation(extent={{-334,4},{-304,34}})));
      Modelica.Blocks.Interfaces.RealVectorInput m_flow_in[nSeg] annotation (
          Placement(transformation(extent={{-178,444},{-138,484}}),
            iconTransformation(extent={{-162,444},{-122,484}})));
      WaterHeaterLib.BaseClasses.draHeaTra draHeaTra(
        nSeg=nSeg,
        TIn=TIn,
        redeclare package Medium = Medium,
        perInA=perInA,
        perInB=perInB,
        perInC=perInC,
        timDelA=timDelA,
        timDelB=timDelB,
        timDelC=timDelC)
        "Calculates the heat transfer in each segment caused by a hot water draw"
                                                                      annotation (
          Placement(transformation(
            extent={{-23,-23},{23,23}},
            rotation=-90,
            origin={-141,371})));
      Modelica.Blocks.Sources.RealExpression draHea[nSeg](y=draHeaTra.draHeaTra)
                                                          annotation (Placement(
            transformation(
            extent={{-28,-14},{28,14}},
            rotation=180,
            origin={170,-84})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow        prescribedHeatFlow1[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-84})));
      Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temperatureSensor[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-70,396})));
      Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor
        "Sensor reporting the heat transfer between the base of the tank and the water"
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={0,-152})));
      Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor1[nSeg]
        "Sensor reporting the heat flow between the flu wall and the water"
        annotation (Placement(transformation(
            extent={{-13,-13},{13,13}},
            rotation=180,
            origin={-93,19})));
      WaterHeaterLib.BaseClasses.InteriorWH heaWatFit[nSeg](
        each hFixed=hFixed,
        each conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each final til=datTanEnv.til,
        each final A=datTanEnv.A/nSeg)
        "Heat transfer between the water and assorted fittings (inlet/outlet pipe, PRV, drain)"
        annotation (Placement(transformation(extent={{238,132},{210,104}})));
      Modelica.Blocks.Sources.RealExpression finCoef[nSeg](each y=0.2)
        "--fixme see and add the correct coefficient as on page 19 --fixme"
        annotation (Placement(transformation(extent={{344,184},{316,214}})));
      Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor T_WL[nSeg]
        "flue wall temperature" annotation (Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-226,-32})));
      Modelica.SIunits.Temperature T_WL_avg[nSeg];
      Modelica.SIunits.Temperature T_F_avg;
      Modelica.Blocks.Sources.RealExpression h_cw_B(y=h_cw_B_cons)
        annotation (Placement(transformation(extent={{-438,-64},{-390,-36}})));
      Modelica.Blocks.Sources.RealExpression h_WF[nSeg](each y=h_WF_cons)
        annotation (Placement(transformation(extent={{-360,256},{-320,288}})));
      Modelica.Blocks.Math.Gain gain2[nSeg](each k=2)
        annotation (Placement(transformation(extent={{-220,262},{-200,282}})));
      Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPor[nSeg]
        "Heat port for sensor" annotation (Placement(transformation(extent={{638,-148},
                {656,-130}},      rotation=0), iconTransformation(extent={{306,-42},
                {348,0}})));
      Buildings.HeatTransfer.Convection.Interior convJacAmb[nSeg](
        each conMod=conMod,
        each hFixed=hFixed,
        each final A=datTanEnv.A/nSeg,
        each final til=datTanEnv.til)
        "Convective heat transfer between the tank and the surroundings"
        annotation (Placement(transformation(extent={{308,62},{336,90}})));
    public
      Modelica.Thermal.HeatTransfer.Components.ThermalCollector theCol(m=nSeg)
        "Connector to assign multiple heat ports to one heat port" annotation (
          Placement(transformation(
            extent={{-13,-13},{13,13}},
            rotation=90,
            origin={399,43})));
      WaterHeaterLib.BaseClasses.LongWaveRadiationExchange radJacAmb[nSeg](each A=
           datTanEnv.A/nSeg)
        "Radiative heat exchange between the tank and the surroundings"
        annotation (Placement(transformation(extent={{342,-16},{316,-42}})));
      Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature Tair
        annotation (Placement(transformation(extent={{456,36},{436,56}})));
      Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={658,46}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={328,128})));
      Modelica.Blocks.Interfaces.RealInput TRadMea  annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={660,-82}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={322,-188})));
      Modelica.Blocks.Routing.Replicator replicator1(nout=nSeg)
        annotation (Placement(transformation(extent={{436,-96},{406,-66}})));
      Modelica.Blocks.Sources.RealExpression absIRJac2[nSeg](each y=datTanEnv.layers.absIR_b)
        annotation (Placement(transformation(extent={{440,-48},{388,-12}})));
      WaterHeaterLib.BaseClasses.InteriorWH heaGasFlu[nSeg](
        each hFixed=hFixed,
        each final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each final A=datFlueWall.A/nSeg,
        each final til=datFlueWall.til)
        "Heat transfer between the hot gas and flue wall" annotation (Placement(
            transformation(
            extent={{-17,-17},{17,17}},
            rotation=180,
            origin={-231,19})));
      Modelica.Blocks.Sources.RealExpression heaCoe[nSeg](each y=h_cv_F)
        "combined convective and radiative coefficient -- fixme"
        annotation (Placement(transformation(extent={{-336,42},{-306,72}})));
      Buildings.HeatTransfer.Convection.Interior convTopAmb(
        each conMod=conMod,
        each hFixed=hFixed,
        each final A=datTanEnvTop.A,
        each final til=datTanEnvTop.til)
        "Convective heat transfer between the top of the tank and the surroundings"
                                                                    annotation (
          Placement(transformation(
            extent={{-14,-14},{14,14}},
            rotation=90,
            origin={-44,328})));
      WaterHeaterLib.BaseClasses.LongWaveRadiationExchange radTopAmb(A=
            datTanEnvTop.A)
        "Radiative heat transfer between the top of the tank and the surroundings"
                           annotation (Placement(transformation(
            extent={{13,13},{-13,-13}},
            rotation=90,
            origin={41,327})));
      Modelica.Blocks.Sources.RealExpression absIRJac1(y=datTanEnv.layers.absIR_b)
        annotation (Placement(transformation(extent={{136,332},{72,370}})));
      Modelica.Blocks.Sources.RealExpression heaTraBas(y=-tanBas.opa_b.Q_flow)
        "Expression of the heat transfer rate from the gas to the base"
        annotation (Placement(transformation(
            extent={{22,-22},{-22,22}},
            rotation=90,
            origin={80,-284})));
      Modelica.Blocks.Interfaces.RealOutput Q_B "heat flow rate of the base"
        annotation (Placement(transformation(
            extent={{-23,-23},{23,23}},
            rotation=270,
            origin={81,-383}), iconTransformation(
            extent={{-23,-23},{23,23}},
            rotation=270,
            origin={68,-380})));
      Modelica.Blocks.Interfaces.RealInput T_F0_y annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={232,-380}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={154,-370})));
      Modelica.Blocks.Interfaces.RealInput cdot_G_y annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={318,-380}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={238,-370})));
      WaterHeaterLib.BaseClasses.buoHeaTra buoHeaTra(
        nSeg=nSeg, QDotPilot=QDotPilot)
        "Calculates the heat transfer between segments in the heater caused by buoyant flow"
                                                     annotation (Placement(
            transformation(
            extent={{-18,-18},{18,18}},
            rotation=270,
            origin={70,142})));
      Modelica.Fluid.Sources.FixedBoundary boundary[nSeg](
        nPorts=1,
        use_p=true,
        redeclare package Medium = Medium,
        p=347700) annotation (Placement(transformation(
            extent={{-21,-25},{21,25}},
            rotation=270,
            origin={131,197})));
      Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor2
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,264})));
      Modelica.Blocks.Interfaces.RealInput h_cv_F annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={662,330}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={332,330})));
    equation
      for i in (1:nSeg) loop
        T_WL_avg[i] = sum(T_WL[i:nSeg].T)/(nSeg-i+1);
        T_F[i] = (T_F0_y - T_WL_avg[i])*exp(-((h_cv_F*Modelica.Constants.pi*DFlu/cdot_G_y)
        *((nSeg-i+1)*LFlu/nSeg))) + T_WL[i].T;
      end for;
      T_F_avg = sum(T_F[1:nSeg])/nSeg;
      T_WL_mean =  sum(T_WL[1:nSeg].T)/nSeg;
      connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
          points={{92,-46},{82,-46},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaBasWat.fluid, vol[nSeg].heatPort)   annotation (Line(
          points={{7.95401e-016,-36},{7.95401e-016,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convConBou3.solid,tanTop. opa_a) annotation (Line(
          points={{4.34812e-15,124},{4.34812e-15,176},{-0.666667,176}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaWatJac.solid, tanJac.opa_a)   annotation (Line(
          points={{166,20},{188,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaWatJac.fluid, vol.heatPort)   annotation (Line(
          points={{138,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor.port_a, heaBasWat.solid)   annotation (Line(
          points={{1.83697e-015,-142},{0,-130},{-2.66453e-015,-108},{
              -4.34812e-015,-108},{-4.34812e-015,-64}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor.port_b, tanBas.opa_a)  annotation (Line(
          points={{-1.83697e-015,-162},{-1.83697e-015,-252},{3.55271e-015,-252}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(finCoef.y, heaWatFit.u)   annotation (Line(
          points={{314.6,199},{224,199},{224,134.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaWatFit.fluid, vol.heatPort)   annotation (Line(
          points={{210,118},{114,118},{114,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convConBou3.fluid, vol[1].heatPort) annotation (Line(
          points={{-7.95401e-016,96},{0,96},{0,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.heatPort, heaPor) annotation (Line(
          points={{82,20},{82,-139},{647,-139}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(Tair.port, theCol.port_b) annotation (Line(
          points={{436,46},{436,43},{412,43}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(TRadMea, replicator1.u)  annotation (Line(
          points={{660,-82},{536,-82},{536,-81},{439,-81}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Tair.T, TDryBul) annotation (Line(
          points={{458,46},{658,46}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaWatFit.solid, theCol.port_a)   annotation (Line(
          points={{238,118},{386,118},{386,43}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(radJacAmb.port, tanJac.opa_b)            annotation (Line(
          points={{315.48,-29.26},{276.74,-29.26},{276.74,20},{248.2,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convJacAmb.fluid, theCol.port_a)  annotation (Line(
          points={{336,76},{360,76},{360,43},{386,43}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convJacAmb.solid, tanJac.opa_b)  annotation (Line(
          points={{308,76},{276,76},{276,20},{248.2,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(flueTemp.y, flueTemperature.T) annotation (Line(
          points={{-302.5,19},{-295,19}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(flueTemperature.port, heaGasFlu.fluid)   annotation (Line(
          points={{-262,19},{-246,20},{-248,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaCoe.y, heaGasFlu.u)    annotation (Line(
          points={{-304.5,57},{-231,57},{-231,39.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaGasFlu.solid, flueWall.opa_b)   annotation (Line(
          points={{-214,19},{-192,20},{-184.22,20},{-184.22,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(flueWall.opa_a, heatFlowSensor1.port_b) annotation (Line(
          points={{-118,19},{-106,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor1.port_a, heaFluWat.solid)   annotation (Line(
          points={{-80,19},{-62,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaFluWat.fluid, vol.heatPort)   annotation (Line(
          points={{-32,19},{1,19},{1,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(theCol.port_b, convTopAmb.fluid)   annotation (Line(
          points={{412,43},{420,43},{420,374},{-44,374},{-44,342}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(Q_flow_total.y, prescribedHeatFlow.Q_flow) annotation (Line(
          points={{139.3,-46},{112,-46}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(gain2[1].y, convConBou3.u) annotation (Line(
          points={{-199,272},{-76,272},{-76,110},{-16.8,110}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(T_WL.port, flueWall.opa_b) annotation (Line(
          points={{-214,-32},{-184.22,-32},{-184.22,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(tanBas.opa_b, heaPorBot)  annotation (Line(
          points={{-3.55271e-015,-312.2},{-3.55271e-015,-337.1},{1.77636e-015,
              -337.1},{1.77636e-015,-364}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaTraBas.y, Q_B)      annotation (Line(
          points={{80,-308.2},{81,-308.2},{81,-383}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(h_WF.y, gain2.u) annotation (Line(
          points={{-318,272},{-222,272}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaFluWat.u, gain2.y)   annotation (Line(
          points={{-47,37},{-47,60},{-76,60},{-76,272},{-199,272}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaWatJac.u, gain2.y)   annotation (Line(
          points={{152,36.8},{152,80},{-76,80},{-76,272},{-199,272}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(m_flow_in, draHeaTra.mFloIn) annotation (Line(
          points={{-158,464},{-152.5,464},{-152.5,398.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(draHea.y, prescribedHeatFlow1.Q_flow) annotation (Line(
          points={{139.2,-84},{114,-84}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(prescribedHeatFlow1.port, vol.heatPort) annotation (Line(
          points={{94,-84},{82,-84},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.heatPort, temperatureSensor.port) annotation (Line(
          points={{82,20},{-24,20},{-24,234},{-70,234},{-70,386}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(temperatureSensor.T, draHeaTra.TWat) annotation (Line(
          points={{-70,406},{-70,428},{-124.44,428},{-124.44,398.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(absIRJac2.y, radJacAmb.u)            annotation (Line(
          points={{385.4,-30},{365,-30},{365,-29},{344.6,-29}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(radJacAmb.T_In, replicator1.y)            annotation (Line(
          points={{329,-44.6},{329,-80},{380,-80},{380,-81},{404.5,-81}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(absIRJac1.y, radTopAmb.u)            annotation (Line(
          points={{68.8,351},{41,351},{41,342.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(radTopAmb.T_In, TRadMea)            annotation (Line(
          points={{56.6,327},{484,327},{484,-82},{660,-82}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(h_cw_B.y, heaBasWat.u)   annotation (Line(
          points={{-387.6,-50},{-16.8,-50}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heatFlowSensor1.Q_flow, buoHeaTra.QDotFlu) annotation (Line(
          points={{-93,32},{-88,32},{-88,163.6},{66.4,163.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(buoHeaTra.QDotBas, heatFlowSensor.Q_flow) annotation (Line(
          points={{52,163.6},{52,166},{20,166},{20,-136},{-10,-136},{-10,-152}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(buoHeaTra.TWat, vol.heatPort) annotation (Line(
          points={{76.48,161.08},{-34,161.08},{-34,62},{-12,62},{-12,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.ports[1], boundary.ports[1]) annotation (Line(
          points={{104,42},{131,42},{131,176}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tanTop.opa_b, heatFlowSensor2.port_a) annotation (Line(
          points={{-0.666667,232.187},{-0.666667,242.094},{-6.12323e-16,242.094},
              {-6.12323e-16,254}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor2.port_b, radTopAmb.port) annotation (Line(
          points={{6.12323e-016,274},{6.12323e-016,298},{41.26,298},{41.26,313.48}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor2.port_b, convTopAmb.solid) annotation (Line(
          points={{6.12323e-016,274},{6.12323e-016,298},{-44,298},{-44,314}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor2.Q_flow, buoHeaTra.QLosTop) annotation (Line(
          points={{10,264},{84.4,264},{84.4,163.6}},
          color={0,0,127},
          smooth=Smooth.None));
                                                                  annotation (
          Placement(transformation(extent={{322,444},{362,484}}),
            iconTransformation(extent={{322,444},{362,484}})),
        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-420,-360},{
                640,460}}), graphics),
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-420,-360},{640,
                460}}), graphics={Bitmap(
              extent={{-336,514},{534,-360}},
              imageSource=
                  "",
              fileName="C:/Documents and Settings/user/Desktop/waterheater.jpg")}),
        defaultComponentName="tan",
        Documentation(info="<html>
<p>
This model, while still available, is obsolete. It is intended to be replaced with the SimplifiedStorageTankMediumModel. The difference between simulating a condensing
and non-condensing model is in how the efficiency is handled. There is a real input which can be used to pass in the efficiency of the unit at any point in time. A
non-condensing model would have a constant efficiency value, while a condensing model will have a function for the efficiency. There is a model included in 
WaterHeatingLibrary.CondensingTank.BaseClasses called EffTankCond which uses a polynomial to output a tank efficiency based on the temperature of the stored water.
</p>
<p>
This model has been very loosely validated, and should not be treated as a released model.
</p>
</html>",   revisions="<html>
<ul>
<li>
September 01, 2011 by Thierry S. Nouidui:<br>
First implementation.
</li>
</ul>
</html>"),
        Icon(graphics={Rectangle(
                extent={{-40,60},{40,20}},
                lineColor={255,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,-20},{40,-60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-76,2},{-90,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{0,84},{-80,80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-76,84},{-80,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{82,0},{78,-86}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{0,84},{-4,60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{82,-84},{2,-88}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{6,-60},{2,-84}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{92,2},{78,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,20},{40,-20}},
                lineColor={255,0,0},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.CrossDiag),Text(
                extent={{100,106},{134,74}},
                lineColor={0,0,127},
                textString="QLoss"),Rectangle(
                extent={{-10,10},{10,-10}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}),Rectangle(
                extent={{50,68},{40,-66}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,66},{-50,-68}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-48,68},{50,60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-48,-60},{50,-68}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Line(
                points={{26,72},{102,72},{100,72}},
                color={127,0,0},
                pattern=LinePattern.Dot),Line(
                points={{56,6},{56,72},{58,72}},
                color={127,0,0},
                pattern=LinePattern.Dot),Line(
                points={{22,-74},{70,-74},{70,72}},
                color={127,0,0},
                pattern=LinePattern.Dot)}),
        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics));
    end CondensingTank;
    annotation (
      conversion(noneFromVersion=""));
  end CondensingTank;

  package HWDis "Hot Water Distribution Systems"

    package Components
      model FlowReduction
        extends Modelica.Blocks.Interfaces.BlockIcon;

        parameter Integer nDra(min=1) = 1 "Number of hot water draws";

        Modelica.Blocks.Interfaces.RealInput conFlo
          "Controlled flow rate leaving heater"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput desFlo[nDra]
          "Desired flow rate at the fixtures"
          annotation (Placement(transformation(extent={{-140,-94},{-100,-54}})));
        Modelica.Blocks.Interfaces.RealOutput draFlo[nDra]
          "Controlled water flow rate at each fixture"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Math.Sum sum(nin=nDra)
          annotation (Placement(transformation(extent={{-90,-68},{-70,-48}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{-52,64},{-32,84}})));
        Modelica.Blocks.Math.Min min1
          annotation (Placement(transformation(extent={{-6,4},{14,24}})));
        Modelica.Blocks.Routing.Replicator replicator(nout=nDra)
          annotation (Placement(transformation(extent={{28,4},{48,24}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-44,-2},{-24,18}})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-66,14})));
        Modelica.Blocks.Sources.Constant const1(k=1e-6) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-80,-28})));
        Modelica.Blocks.Math.Product product[nDra]
          annotation (Placement(transformation(extent={{66,-10},{86,10}})));
      equation
        connect(conFlo, division.u1) annotation (Line(
            points={{-120,80},{-54,80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(division.y, min1.u1) annotation (Line(
            points={{-31,74},{-20,74},{-20,20},{-8,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const.y, min1.u2) annotation (Line(
            points={{-23,8},{-8,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(min1.y, replicator.u) annotation (Line(
            points={{15,14},{26,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.y, product.u1) annotation (Line(
            points={{49,14},{56,14},{56,6},{64,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(desFlo, sum.u) annotation (Line(
            points={{-120,-74},{-96,-74},{-96,-58},{-92,-58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(desFlo, product.u2) annotation (Line(
            points={{-120,-74},{40,-74},{40,-6},{64,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, draFlo) annotation (Line(
            points={{87,0},{110,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sum.y, add.u2) annotation (Line(
            points={{-69,-58},{-60,-58},{-60,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, add.u1) annotation (Line(
            points={{-80,-17},{-80,-8},{-72,-8},{-72,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, division.u2) annotation (Line(
            points={{-66,25},{-66,68},{-54,68}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics),
                  Documentation(info="<html>
            <p>
            This model can be used to reduce draw flow rate at fixtures. The user inputs the draw flow rate of each draw as well as a maximum flow rate. The model then
            times when the desired draw flow rate exceeds the maximum and scales down the flow such that the total flow matches the maximum. The equation is:<br>
            <p align=\"center\" style=\"font-style:italic;\">
            m<sub>flo,red</sub>[i] = m<sub>flow,des</sub>[i]*sum(m<sub>flow,des</sub>)/m<sub>flow,max</sub>
            </p>
            In the above equation all terms are mass flow rates. The subscript <sub>red</sub> implies that the term is a reduced flow rate, output from the model. The subscript
            <sub>des</sub> implies that it is the desired flow rate input to the model. The subscript <sub>max</sub> implies that it is the maximum flow rate input by the user. [i]
            is an index value representing which draw in the draw flow rate array is being calculated.
            </p>
            <p>
            An example of when this model would be used is modeling a hot water distribution system served by a tankless water heater. Many tankless water heaters have
            flow limiters which, in cases with very high hot water demand, reduce the flow rate of water such that the heater can't meet set temperature at full capacity.
            In this case, the user would input a maximum flow rate signal from the water heater to the input for conFlo.<br>
            </p>
            </html>",
                  revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
      end FlowReduction;

      model EndUse
        "Model of a pipe in a hot water distribution system. Assumes input flow units are L/s"
        extends Modelica.Blocks.Interfaces.BlockIcon;

        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Fluid in the system";

        Modelica.Fluid.Interfaces.FluidPort_a Inlet(redeclare package Medium = Medium)
          "Inlet for water coming from the branch"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Buildings.Fluid.Sources.MassFlowSource_T draFlo(
          redeclare package Medium = Medium,
          nPorts=1,
          use_m_flow_in=true) "Sets the water flow rate" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={60,0})));
         Modelica.Blocks.Interfaces.RealInput watFlo "Water flow rate in gpm"
           annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
         Modelica.Blocks.Math.Gain valPosId(k=-1)
          "Identifies the position of the valve needed for the desired flow rate"
           annotation (Placement(transformation(extent={{-88,-60},{-68,-40}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                            senTem(redeclare package Medium = Medium,
          m_flow_nominal=0.063,
          tau=0.00001)
          annotation (Placement(transformation(extent={{20,-10},{40,10}})));
        Modelica.Blocks.Interfaces.RealOutput TOut( unit = "K")
          "Temperature of fluid exiting the fixture"
          annotation (Placement(transformation(extent={{100,16},{120,36}})));
      equation
        connect(watFlo, valPosId.u)  annotation (Line(
            points={{-120,-50},{-90,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senTem.T, TOut) annotation (Line(
            points={{30,11},{30,26},{110,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senTem.port_b, draFlo.ports[1])
                                              annotation (Line(
            points={{40,0},{50,0}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(senTem.port_a, Inlet) annotation (Line(
            points={{20,0},{-100,0}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(valPosId.y, draFlo.m_flow_in) annotation (Line(
            points={{-67,-50},{80,-50},{80,-8},{70,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics),
                  Documentation(info="<html>
            <p>
            This model can be used to control a fluid flow rate to the user-specified flow rate. The inputs are a connection to the hot water system and a hot water draw flow rate.
            This version of the model is intended to be used with water flow rate in L/s used as the input. Because the valve model works in kg/s no unit conversions are
            performed to make the output flow rate read in L/s (Assumption: The density of water is constantly 1 kg/L).
            </p>
            <p>
            The water flow rate is controlled by opening/closing the valve such that the water flow rate in the fluid line matches the flow rate specified by the user. The intent
            is that the user can specify a flow rate in a text input file and the valve controls the fluid path to match that flow rate. When using this component to create models
            the gain value must be adjusted until the system flow matches the intended flow.<br>
            </p>
            </html>",
                  revisions="<html>
            <ul>
            <li>
            Mar 28, 2013 by Peter Grant:<br>
            First implementation            
            </ul>
            </li>
            </html>"));
      end EndUse;

      model EndUseGPM
        "Model of a pipe in a hot water distribution system. Assumes input flow units are gal/min"
        extends WaterHeatingLibrary.HWDis.Components.EndUse(valPosId(k=-0.063));

        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Fluid in the system";

       annotation (Placement(transformation(extent={{62,-70},{82,-50}})),
                    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics),
                  Documentation(info="<html>
            <p>
            This model can be used to control a fluid flow rate to the user-specified flow rate. The inputs are a connection to the hot water system and a hot water draw flow rate.
            This version of the model is intended to be used with water flow rate in gal/min used as the input. Because the valve model works in kg/s unit conversions are
            performed to make the output flow rate read in gal/min (Assumption: The density of water is constantly 1 kg/L).
            </p>
            <p>
            The water flow rate is controlled by opening/closing the valve such that the water flow rate in the fluid line matches the flow rate specified by the user. The intent
            is that the user can specify a flow rate in a text input file and the valve controls the fluid path to match that flow rate. When using this component to create models
            the gain value must be adjusted until the system flow matches the intended flow.<br>
            </p>
            </html>",
                  revisions="<html>
            <ul>
            <li>
            Mar 28, 2013 by Peter Grant:<br>
            First implementation
            </ul>
            </li>
            </html>"));
      end EndUseGPM;

      model EndUseTwoBranch
        "Model of a pipe in a water distribution system. Assumes input flow units are L/s. Includes pipes for both hot and cold water"
        extends Modelica.Blocks.Interfaces.BlockIcon;

        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Fluid in the system";

        parameter Modelica.SIunits.Temperature T_start
          "Initial temperature in the valve";

        parameter Real PID_P_3
          "Proportional term for the PID controller for the 3-way valve";
        parameter Modelica.SIunits.Time PID_I_3
          "Integral term for the PID controller for the 3-way valve";
        parameter Modelica.SIunits.Time PID_D_3
          "Derivative term for the PID controller for the 3-way valve";
        parameter Real PID_P_2
          "Proportional term for the PID controller for the 2-way valve";
        parameter Modelica.SIunits.Time PID_I_2
          "Integral term for the PID controller for the 2-way valve";
        parameter Modelica.SIunits.Time PID_D_2
          "Derivative term for the PID controller for the 2-way valve";

        Modelica.Fluid.Interfaces.FluidPort_a hotIn(redeclare package Medium = Medium)
          "Inlet for hot water coming from the branch"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
         Buildings.Fluid.Actuators.Valves.ThreeWayLinear
                                                       val(
             y_start=0,
           redeclare package Medium = Medium,
           m_flow_nominal=0.06,
           dpValve_nominal=1,
          l={1e-10,1e-10},
          T_start=T_start,
          tau=0.00001,
          riseTime=0.00001,
          fraK=1)
           annotation (Placement(transformation(extent={{-38,10},{-18,-10}})));
         Modelica.Blocks.Interfaces.RealInput TOutDes
          "Desired outlet water temperature"
           annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                            senTem(redeclare package Medium = Medium,
          m_flow_nominal=0.063,
          tau=0.000001,
          T_start=T_start)
          annotation (Placement(transformation(extent={{0,10},{20,-10}})));
        Modelica.Blocks.Interfaces.RealOutput TOut( unit = "K")
          "Temperature of fluid exiting the fixture"
          annotation (Placement(transformation(extent={{100,-44},{120,-24}})));
        Modelica.Fluid.Interfaces.FluidPort_a colIn(redeclare package Medium = Medium)
          "Inlet connected to the cold water branch"
          annotation (Placement(transformation(extent={{-110,26},{-90,46}})));
        BaseClasses.FeedForwardController    conPID(redeclare package Medium =
              Medium)
          annotation (Placement(transformation(extent={{-58,-54},{-38,-34}})));
        Modelica.Blocks.Interfaces.RealInput WatFlowDes
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          nPorts=1,
          redeclare package Medium = Medium,
          use_m_flow_in=true)
          annotation (Placement(transformation(extent={{80,10},{60,-10}})));
        Modelica.Blocks.Math.Gain gain(k=-1)
          annotation (Placement(transformation(extent={{-40,70},{-20,90}})));
        Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort colEnt(
          redeclare package Medium = Medium,
          m_flow_nominal=0.063,
          tau=0.00001)
          annotation (Placement(transformation(extent={{-92,46},{-72,26}})));
        Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hotEnt(
          redeclare package Medium = Medium,
          m_flow_nominal=0.063,
          tau=0.00001)
          annotation (Placement(transformation(extent={{-76,10},{-56,-10}})));
      equation
        connect(senTem.T, TOut) annotation (Line(
            points={{10,-11},{10,-34},{110,-34}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(conPID.y, val.y) annotation (Line(
            points={{-37,-44},{-28,-44},{-28,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(val.port_2, senTem.port_a) annotation (Line(
            points={{-18,0},{0,0}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(senTem.port_b, boundary.ports[1]) annotation (Line(
            points={{20,0},{60,0}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(WatFlowDes, gain.u) annotation (Line(
            points={{-120,80},{-42,80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain.y, boundary.m_flow_in) annotation (Line(
            points={{-19,80},{0,80},{0,20},{94,20},{94,-8},{80,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(colIn, colEnt.port_a) annotation (Line(
            points={{-100,36},{-92,36}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(colEnt.port_b, val.port_3) annotation (Line(
            points={{-72,36},{-28,36},{-28,10}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(hotIn, hotEnt.port_a) annotation (Line(
            points={{-100,4.44089e-16},{-98,4.44089e-16},{-98,-6.66134e-16},{
                -76,-6.66134e-16}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(hotEnt.port_b, val.port_1) annotation (Line(
            points={{-56,0},{-38,0}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TOutDes, conPID.TOutDes) annotation (Line(
            points={{-120,-50},{-60,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(colEnt.h_out, conPID.colEnt) annotation (Line(
            points={{-82,25},{-82,-44},{-60,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(hotEnt.h_out, conPID.hotEnt) annotation (Line(
            points={{-66,-11},{-66,-38},{-60,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics),
                  Documentation(info="<html>
            <p>
            This model allows the user to describe a hot water draw in terms of the conditions leaving the fixutre. The model then uses two separate valves to control the system
            (system referring to water heater combined with distribution system) such that the desired water flow leaves the fixture. Progressing from the draw to the water
            heater the two valves are:<br>
            A two-way valve using a PID controller to control the flow rate out of the fixture. The PID controller adjusts the two-way valvue position until the flow rate matches
            the input from the user.<br>
            A three-way valve using a PID controller to determine the mixture of hot and cold water. The PID controller adjusts the three-way valve position until the outlet
            temperature matches the input from the user.
            </p>
            <p>
            The water flow rate is controlled by opening/closing the valve such that the water flow rate in the fluid line matches the flow rate specified by the user. The intent
            is that the user can specify a flow rate in a text input file and the valve controls the fluid path to match that flow rate.
            </p>     
            <p>   
            This version of the model is intended to be used with water flow rate in L/s used as the input. Because the valve model works in kg/s no unit conversions are
            performed to make the output flow rate read in L/s (Assumption: The density of water is constantly 1 kg/L).<br>
            </p>    
            </html>",
                  revisions="<html>
            <ul>
            <li>
            Mar 28, by Peter Grant:<br>
            First implementation
            </ul>
            </li>
            </html>"));
      end EndUseTwoBranch;

      model EndUseGPMTwoBranch
        "Model of a pipe in a water distribution system. Assumes input flow units are L/s. Includes pipes for both hot and cold water"
        extends WaterHeatingLibrary.HWDis.Components.EndUseTwoBranch;

        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics),
                  Documentation(info="<html>
            <p>
            This model allows the user to describe a hot water draw in terms of the conditions leaving the fixutre. The model then uses two separate valves to control the system
            (system referring to water heater combined with distribution system) such that the desired water flow leaves the fixture. Progressing from the draw to the water
            heater the two valves are:<br>
            A two-way valve using a PID controller to control the flow rate out of the fixture. The PID controller adjusts the two-way valvue position until the flow rate matches
            the input from the user.<br>
            A three-way valve using a PID controller to determine the mixture of hot and cold water. The PID controller adjusts the three-way valve position until the outlet
            temperature matches the input from the user.
            </p>
            <p>
            The water flow rate is controlled by opening/closing the valve such that the water flow rate in the fluid line matches the flow rate specified by the user. The intent
            is that the user can specify a flow rate in a text input file and the valve controls the fluid path to match that flow rate.
            </p>     
            <p>   
            This version of the model is intended to be used with water flow rate in L/s used as the input. Because the valve model works in kg/s no unit conversions are
            performed to make the output flow rate read in L/s (Assumption: The density of water is constantly 1 kg/L).<br>
            </p>    
            </html>",
                  revisions="<html>
            <ul>
            <li>
            Mar 28, by Peter Grant:<br>
            First implementation
            </ul>
            </li>
            </html>"));
      end EndUseGPMTwoBranch;

      model PipeLumpedCap
        "Pipe model with capacitance of the pipe and water lumped together"
        extends WaterHeatingLibrary.HWDis.Components.BaseClasses.PartialPipe(
          dp_nominal=0,
          res(dp(nominal=length*10)),
          vol(each MixCoef=MixCoef));

        // Because dp_nominal is a non-literal value, we set
        // dp.nominal=100 instead of the default dp.nominal=dp_nominal,
        // because the latter is ignored by Dymola 2012 FD 01.

        parameter Modelica.SIunits.Velocity v_nominal = 0.15
          "Velocity at m_flow_nominal (used to compute default diameter)";
        parameter Real MixCoef "1 = perfect mixing, 0 = plug flow";
        parameter Modelica.SIunits.Length roughness(min=0) = 2.5e-5
          "Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)";
        parameter Modelica.SIunits.Length thicknessIns
          "Thickness of insulation"
          annotation(Dialog(group="Insulation"));
        parameter Modelica.SIunits.ThermalConductivity lambdaIns
          "Heat conductivity of insulation"
          annotation(Dialog(group="Insulation"));

        parameter Boolean useMultipleHeatPorts=false
          "= true to use one heat port for each segment of the pipe, false to use a single heat port for the entire pipe";

        Modelica.Thermal.HeatTransfer.Components.ThermalConductor conInsul[nSeg](
            each G=lambdaIns/thicknessIns*Modelica.Constants.pi*(diameter_o +
              thicknessIns)*length/nSeg) "Conductivity through the insulation"
          annotation (Placement(transformation(extent={{-46,-38},{-26,-18}})));

        Buildings.HeatTransfer.Convection.Interior con[nSeg](
          each til=til,
          each conMod=Buildings.HeatTransfer.Types.InteriorConvection.Fixed,
          each hFixed=6,
          each A=Modelica.Constants.pi*(diameter_o + thicknessIns)*length/nSeg)
                                                       annotation (Placement(
              transformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-50,26})));
        NonCondensingTank.BaseClasses.LongWaveRadiationExchange rad[nSeg](each A=Modelica.Constants.pi
              *(diameter_o + thicknessIns)*length/nSeg)
                                    annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=270,
              origin={4,26})));
        Modelica.Blocks.Interfaces.RealInput TAmb
          "Ambient temperature surrounding the pipe (K)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-50,120}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-60,70})));
        Modelica.Blocks.Interfaces.RealInput TRadMea
          "Mean radiant temperature (K)"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={30,120}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={60,70})));

      protected
        Buildings.HeatTransfer.Sources.PrescribedTemperature preTem[nSeg]
                                                                    annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,48})));

        Modelica.Blocks.Sources.RealExpression u[nSeg](each y=ePipe) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,68})));
        Modelica.Blocks.Routing.Replicator TRadMeaRep(nout=nSeg)  annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={30,64})));
      equation
        if useMultipleHeatPorts then
        else

        end if;

        connect(con.fluid, preTem.port) annotation (Line(
            points={{-50,34},{-50,38}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(conInsul.port_a, con.solid) annotation (Line(
            points={{-46,-28},{-50,-28},{-50,18}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(conInsul.port_a, rad.port) annotation (Line(
            points={{-46,-28},{-50,-28},{-50,14},{4.16,14},{4.16,17.68}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(u.y, rad.u) annotation (Line(
            points={{4,57},{4,35.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea, TRadMeaRep.u)  annotation (Line(
            points={{30,120},{30,76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMeaRep.y, rad.T_In)  annotation (Line(
            points={{30,53},{30,26},{13.6,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmbRep.y, preTem.T) annotation (Line(
            points={{-50,67},{-50,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(conInsul.port_b, heaCap.port) annotation (Line(
            points={{-26,-28},{-20,-28},{-20,-42}},
            color={191,0,0},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                  graphics),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
               graphics),
          defaultComponentName="pip",
          Documentation(info="<html>
<p>
Model of a pipe with flow resistance and optional heat exchange with environment.
</p>
<p>
If <code>useMultipleHeatPorts=false</code> (default option), the pipe uses a single heat port 
for the heat exchange with the environment.
If <code>useMultipleHeatPorts=true</code>, then one heat port for each segment of the pipe is
used for the heat exchange with the environment.
If the heat port is unconnected, then the pipe has no heat loss.
</p>
<p>
The default value for the parameter <code>diameter</code> is computed such that the flow velocity
is equal to <code>v_nominal=0.15</code> for a mass flow rate of <code>m_flow_nominal</code>.
Both parameters, <code>diameter</code> and <code>v_nominal</code>, can be overwritten
by the user.
The default value for <code>dp_nominal</code> is two times the pressure drop that the pipe
would have if it were straight with no fittings.
The factor of two that takes into account the pressure loss of fittings can be overwritten.
These fittings could also be explicitely modeled outside of this component using models from
the package
<a href=\"modelica://Modelica.Fluid.Fittings\">
Modelica.Fluid.Fittings</a>.
For mass flow rates other than <code>m_flow_nominal</code>, the model 
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> is used to
compute the pressure drop.
</p>
<p>
For a steady-state model of a flow resistance, use
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> instead of this model.
</p>
<p>
This model has been modified from the pipe model in the Buildings library. The buildings library model assumes perfect mixing in each segment of the pipe. To more accurately
imitate the flow characteristics observed in experimental data a mixing parameter was added. The mixing parameter adjusts the enthalpy of water leaving a segment of the pipe
to change the energy balance and allow for simualtion of different amounts of mixing.
</p>
<p>
Other modifications from the Buildings library version include:<br>
Added a capacitance model to to into account the thermal mass of the pipe.<br>
Split the connection with the environment to use a separate temperature for convective and radiative heat transfer.
</p>
</html>",       revisions="<html>
<ul>
<li>
Apr 3, 2013 by Peter Grant:<br>
Added a capacitance model to include thermal mass of the pipe<br>
Split heat transfer with ambient to include models for both convection and radiation
</li>
</ul>
<ul>
<li>
Mar 28, 2013 by Peter Grant:<br>
Added mixing coefficient to ConservationEquation to model different amounts of mixing during draws<br>
Included code to identify the start of a draw (used in ConservationEquation)
</li>
<li>
February 22, 2012 by Michael Wetter:<br>
Renamed <code>useMultipleHeatPort</code> to <code>useMultipleHeatPorts</code> and 
used heat port connector from <code>Modelica.Fluid</code> package for vector of heat ports.
</li>
<li>
February 15, 2012 by Michael Wetter:<br>
Revised implementation and added default values.
</li>
<li>
February 12, 2012 by Wangda Zuo:<br>
First implementation.
</li>
</ul>
</html>"));
      end PipeLumpedCap;

      model PipeLumpedCapNoInsul
        "Pipe model with capacitance of the pipe and water lumped together (No insulation)"
        extends WaterHeatingLibrary.HWDis.Components.BaseClasses.PartialPipe(
          diameter_i=sqrt(4*m_flow_nominal/rho_nominal/v_nominal/Modelica.Constants.pi),
          dp_nominal=2*dpStraightPipe_nominal,
          res(dp(nominal=length*10)),
          vol(each MixCoef=MixCoef));

        // Because dp_nominal is a non-literal value, we set
        // dp.nominal=100 instead of the default dp.nominal=dp_nominal,
        // because the latter is ignored by Dymola 2012 FD 01.

        parameter Modelica.SIunits.Velocity v_nominal = 0.15
          "Velocity at m_flow_nominal (used to compute default diameter)";
        parameter Real MixCoef "1 = perfect mixing, 0 = plug flow";
        parameter Modelica.SIunits.Length roughness(min=0) = 2.5e-5
          "Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)";
        final parameter Modelica.SIunits.Pressure dpStraightPipe_nominal=
            Modelica.Fluid.Pipes.BaseClasses.WallFriction.Detailed.pressureLoss_m_flow(
            m_flow=m_flow_nominal,
            rho_a=rho_nominal,
            rho_b=rho_nominal,
            mu_a=mu_nominal,
            mu_b=mu_nominal,
            length=length,
            diameter=diameter_i,
            roughness=roughness,
            m_flow_small=m_flow_small)
          "Pressure loss of a straight pipe at m_flow_nominal";

        parameter Boolean useMultipleHeatPorts=false
          "= true to use one heat port for each segment of the pipe, false to use a single heat port for the entire pipe";

        parameter Modelica.SIunits.SpecificHeatCapacity c_p_pip
          "Specific heat of the material used in the pipe";
        parameter Modelica.SIunits.Density rho_pip
          "Density of the material used in the pipe";
        parameter Modelica.SIunits.Length diameter_o
          "Outer diameter of the pipe";
        parameter Modelica.SIunits.Angle til
          "Tilt angle of the pipe (0= horizontal)";

        Buildings.HeatTransfer.Convection.Interior con[nSeg](
          each til=til,
          each A=Modelica.Constants.pi*diameter_o*length/nSeg,
          each conMod=Buildings.HeatTransfer.Types.InteriorConvection.Fixed,
          each hFixed=6)                                    annotation (Placement(
              transformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-50,26})));
        NonCondensingTank.BaseClasses.LongWaveRadiationExchange rad[nSeg](each A=Modelica.Constants.pi
              *diameter_o*length/nSeg)
                                    annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=270,
              origin={4,26})));
        Modelica.Blocks.Interfaces.RealInput TAmb[nSeg]
          "Ambient temperature surrounding the pipe (K)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-50,120}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-60,70})));
        Modelica.Blocks.Interfaces.RealInput TRadMea
          "Mean radiant temperature (K)"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={46,120}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={60,70})));

      protected
        Buildings.HeatTransfer.Sources.PrescribedTemperature preTem[nSeg]
                                                                    annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,48})));

        Modelica.Blocks.Sources.RealExpression u[nSeg](each y=ePipe)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,60})));
        Modelica.Blocks.Routing.Replicator TMeaRadRep(nout=nSeg) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={46,62})));
      equation
        if useMultipleHeatPorts then
        else

        end if;

        connect(con.fluid, preTem.port) annotation (Line(
            points={{-50,34},{-50,38}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(vol.heatPort, con.solid) annotation (Line(
            points={{-1,-32},{-50,-32},{-50,18}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(vol.heatPort, rad.port) annotation (Line(
            points={{-1,-32},{-50,-32},{-50,14},{4.16,14},{4.16,17.68}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(TAmbRep.y, preTem.T) annotation (Line(
            points={{-50,67},{-50,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(u.y, rad.u)              annotation (Line(
            points={{4,49},{4,35.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(rad.T_In, TMeaRadRep.y) annotation (Line(
            points={{13.6,26},{46,26},{46,51}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea, TMeaRadRep.u) annotation (Line(
            points={{46,120},{46,74}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                  100}}),
                  graphics),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
               graphics),
          defaultComponentName="pip",
          Documentation(info="<html>
<p>
Model of a pipe with flow resistance and optional heat exchange with environment.
</p>
<p>
If <code>useMultipleHeatPorts=false</code> (default option), the pipe uses a single heat port 
for the heat exchange with the environment.
If <code>useMultipleHeatPorts=true</code>, then one heat port for each segment of the pipe is
used for the heat exchange with the environment.
If the heat port is unconnected, then the pipe has no heat loss.
</p>
<p>
The default value for the parameter <code>diameter</code> is computed such that the flow velocity
is equal to <code>v_nominal=0.15</code> for a mass flow rate of <code>m_flow_nominal</code>.
Both parameters, <code>diameter</code> and <code>v_nominal</code>, can be overwritten
by the user.
The default value for <code>dp_nominal</code> is two times the pressure drop that the pipe
would have if it were straight with no fittings.
The factor of two that takes into account the pressure loss of fittings can be overwritten.
These fittings could also be explicitely modeled outside of this component using models from
the package
<a href=\"modelica://Modelica.Fluid.Fittings\">
Modelica.Fluid.Fittings</a>.
For mass flow rates other than <code>m_flow_nominal</code>, the model 
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> is used to
compute the pressure drop.
</p>
<p>
For a steady-state model of a flow resistance, use
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> instead of this model.
</p>
<p>
This model has been modified from the pipe model in the Buildings library. The buildings library model assumes perfect mixing in each segment of the pipe. To more accurately
imitate the flow characteristics observed in experimental data a mixing parameter was added. The mixing parameter adjusts the enthalpy of water leaving a segment of the pipe
to change the energy balance and allow for simualtion of different amounts of mixing.
</p>
<p>
Other modifications from the Buildings library version include:<br>
Added a capacitance model to to into account the thermal mass of the pipe.<br>
Split the connection with the environment to use a separate temperature for convective and radiative heat transfer.<br>
Removed the component for insulation. This model can be used to simulate pipes without insulation (an error is generated if using 
<a href=\"modelica://WaterHeatingLibrary.HWDis.Components.PipeLumpedCap\">WaterHeatingLibrary.HWDis.Components.PipeLumpedCap</a> instead of this model).<br>
</p>

</html>",       revisions="<html>
<ul>
<li>
Apr 3, 2013 by Peter Grant:<br>
Added a capacitance model to include thermal mass of the pipe<br>
Split heat transfer with ambient to include models for both convection and radiation
</li>
</ul>
<ul>
<li>
Mar 28, 2013 by Peter Grant:<br>
Added mixing coefficient to ConservationEquation to model different amounts of mixing during draws<br>
Included code to identify the start of a draw (used in ConservationEquation)
</li>
<li>
February 22, 2012 by Michael Wetter:<br>
Renamed <code>useMultipleHeatPort</code> to <code>useMultipleHeatPorts</code> and 
used heat port connector from <code>Modelica.Fluid</code> package for vector of heat ports.
</li>
<li>
February 15, 2012 by Michael Wetter:<br>
Revised implementation and added default values.
</li>
<li>
February 12, 2012 by Wangda Zuo:<br>
First implementation.
</li>
</ul>
</html>"));
      end PipeLumpedCapNoInsul;

      model PipeR "Pipe model with insulation specified using an R value"
        extends WaterHeatingLibrary.HWDis.Components.BaseClasses.PartialPipe(
          diameter_i=sqrt(4*m_flow_nominal/rho_nominal/v_nominal/Modelica.Constants.pi),
          dp_nominal=2*dpStraightPipe_nominal,
          res(dp(nominal=length*10)),
          vol(each MixCoef=MixCoef));

        // Because dp_nominal is a non-literal value, we set
        // dp.nominal=100 instead of the default dp.nominal=dp_nominal,
        // because the latter is ignored by Dymola 2012 FD 01.

        parameter Modelica.SIunits.Velocity v_nominal = 0.15
          "Velocity at m_flow_nominal (used to compute default diameter)";
        parameter Real MixCoef "1 = perfect mixing, 0 = plug flow";
        parameter Modelica.SIunits.Length roughness(min=0) = 2.5e-5
          "Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)";
        parameter Modelica.SIunits.ThermalInsulance InsR
          "R value of the insulation";
        final parameter Modelica.SIunits.Pressure dpStraightPipe_nominal=
            Modelica.Fluid.Pipes.BaseClasses.WallFriction.Detailed.pressureLoss_m_flow(
            m_flow=m_flow_nominal,
            rho_a=rho_nominal,
            rho_b=rho_nominal,
            mu_a=mu_nominal,
            mu_b=mu_nominal,
            length=length,
            diameter=diameter_i,
            roughness=roughness,
            m_flow_small=m_flow_small)
          "Pressure loss of a straight pipe at m_flow_nominal";

        parameter Boolean useMultipleHeatPorts=false
          "= true to use one heat port for each segment of the pipe, false to use a single heat port for the entire pipe";

        parameter Modelica.SIunits.SpecificHeatCapacity c_p_pip
          "Specific heat of the material used in the pipe";
        parameter Modelica.SIunits.Density rho_pip
          "Density of the material used in the pipe";
        parameter Modelica.SIunits.Length diameter_o
          "Outer diameter of the pipe";
        parameter Modelica.SIunits.Angle til
          "Tilt angle of the pipe (0= horizontal)";

        Modelica.Thermal.HeatTransfer.Components.ThermalConductor conInsul[nSeg](each G=
              Modelica.Constants.pi*(diameter_o)*length/nSeg*1/InsR)
          "Conductivity through the insulation"
          annotation (Placement(transformation(extent={{-50,-42},{-30,-22}})));

        Modelica.Blocks.Interfaces.RealInput TAmb[nSeg]
          "Ambient temperature surrounding the pipe (K)" annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-50,120}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-60,70})));
        Buildings.HeatTransfer.Sources.PrescribedTemperature preTem[nSeg]
                                                                    annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,42})));

      equation
        if useMultipleHeatPorts then
        else

        end if;

        connect(preTem.port, conInsul.port_a) annotation (Line(
            points={{-50,32},{-50,-32}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(conInsul.port_b, vol.heatPort) annotation (Line(
            points={{-30,-32},{-1,-32}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(TAmbRep.y, preTem.T) annotation (Line(
            points={{-50,67},{-50,54}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                  graphics),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
               graphics),
          defaultComponentName="pip",
          Documentation(info="<html>
<p>
Model of a pipe with flow resistance and optional heat exchange with environment.
</p>
<p>
If <code>useMultipleHeatPorts=false</code> (default option), the pipe uses a single heat port 
for the heat exchange with the environment.
If <code>useMultipleHeatPorts=true</code>, then one heat port for each segment of the pipe is
used for the heat exchange with the environment.
If the heat port is unconnected, then the pipe has no heat loss.
</p>
<p>
The default value for the parameter <code>diameter</code> is computed such that the flow velocity
is equal to <code>v_nominal=0.15</code> for a mass flow rate of <code>m_flow_nominal</code>.
Both parameters, <code>diameter</code> and <code>v_nominal</code>, can be overwritten
by the user.
The default value for <code>dp_nominal</code> is two times the pressure drop that the pipe
would have if it were straight with no fittings.
The factor of two that takes into account the pressure loss of fittings can be overwritten.
These fittings could also be explicitely modeled outside of this component using models from
the package
<a href=\"modelica://Modelica.Fluid.Fittings\">
Modelica.Fluid.Fittings</a>.
For mass flow rates other than <code>m_flow_nominal</code>, the model 
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> is used to
compute the pressure drop.
</p>
<p>
For a steady-state model of a flow resistance, use
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> instead of this model.
</p>
<p>
This model has been modified from the pipe model in the Buildings library. The buildings library model assumes perfect mixing in each segment of the pipe. To more accurately
imitate the flow characteristics observed in experimental data a mixing parameter was added. The mixing parameter adjusts the enthalpy of water leaving a segment of the pipe
to change the energy balance and allow for simualtion of different amounts of mixing.
</p>
<p>
Other modifications from the Buildings library version include:<br>
Added a capacitance model to to into account the thermal mass of the pipe.<br>
</p>
</html>",       revisions="<html>
<ul>
<li>
Apr 3, 2013 by Peter Grant:<br>
Added a capacitance model to include thermal mass of the pipe<br>
Split heat transfer with ambient to include models for both convection and radiation
</li>
</ul>
<ul>
<li>
Mar 28, 2013 by Peter Grant:<br>
Added mixing coefficient to ConservationEquation to model different amounts of mixing during draws<br>
Included code to identify the start of a draw (used in ConservationEquation)
</li>
<li>
February 22, 2012 by Michael Wetter:<br>
Renamed <code>useMultipleHeatPort</code> to <code>useMultipleHeatPorts</code> and 
used heat port connector from <code>Modelica.Fluid</code> package for vector of heat ports.
</li>
<li>
February 15, 2012 by Michael Wetter:<br>
Revised implementation and added default values.
</li>
<li>
February 12, 2012 by Wangda Zuo:<br>
First implementation.
</li>
</ul>
</html>"));
      end PipeR;

      model BasePipe "Pipe with finite volume discretization along flow path"
        extends Buildings.Fluid.FixedResistances.BaseClasses.Pipe(
         diameter=sqrt(4*m_flow_nominal/rho_nominal/v_nominal/Modelica.Constants.pi),
         dp_nominal=2*dpStraightPipe_nominal,
         res(dp(nominal=length*10)));
        // Because dp_nominal is a non-literal value, we set
        // dp.nominal=100 instead of the default dp.nominal=dp_nominal,
        // because the latter is ignored by Dymola 2012 FD 01.

        parameter Modelica.SIunits.Velocity v_nominal = 0.15
          "Velocity at m_flow_nominal (used to compute default diameter)";
        parameter Modelica.SIunits.Length roughness(min=0) = 2.5e-5
          "Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)";
        final parameter Modelica.SIunits.Pressure dpStraightPipe_nominal=
            Modelica.Fluid.Pipes.BaseClasses.WallFriction.Detailed.pressureLoss_m_flow(
            m_flow=m_flow_nominal,
            rho_a=rho_nominal,
            rho_b=rho_nominal,
            mu_a=mu_nominal,
            mu_b=mu_nominal,
            length=length,
            diameter=diameter,
            roughness=roughness,
            m_flow_small=m_flow_small)
          "Pressure loss of a straight pipe at m_flow_nominal";

        parameter Boolean useMultipleHeatPorts=false
          "= true to use one heat port for each segment of the pipe, false to use a single heat port for the entire pipe";

        Modelica.Thermal.HeatTransfer.Components.ThermalConductor conPipWal[nSeg](
            each G=2*Modelica.Constants.pi*lambdaIns*length/nSeg/Modelica.Math.log((
              diameter/2.0 + thicknessIns)/(diameter/2.0)))
          "Thermal conductance through pipe wall"
          annotation (Placement(transformation(extent={{-28,-38},{-8,-18}})));
        Modelica.Thermal.HeatTransfer.Components.ThermalCollector colAllToOne(m=nSeg) if
             not useMultipleHeatPorts
          "Connector to assign multiple heat ports to one heat port" annotation (
            Placement(transformation(
              extent={{-6,-6},{6,6}},
              rotation=180,
              origin={-50,10})));

        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort if not
          useMultipleHeatPorts
          "Single heat port that connects to outside of pipe wall (default, enabled when useMultipleHeatPorts=false)"
          annotation (Placement(transformation(extent={{-10,40},{10,20}}),
              iconTransformation(extent={{-10,60},{10,40}})));
        Modelica.Fluid.Interfaces.HeatPorts_a heatPorts[nSeg] if
             useMultipleHeatPorts
          "Multiple heat ports that connect to outside of pipe wall (enabled if useMultipleHeatPorts=true)"
          annotation (Placement(transformation(extent={{-10,-70},{11,-50}}),
              iconTransformation(extent={{-30,-60},{30,-40}})));
      equation

        connect(conPipWal.port_b, vol.heatPort) annotation (Line(
            points={{-8,-28},{-1,-28}},
            color={191,0,0},
            smooth=Smooth.None));
        if useMultipleHeatPorts then
          connect(heatPorts, conPipWal.port_a) annotation (Line(
              points={{0.5,-60},{-50,-60},{-50,-28},{-28,-28}},
              color={191,0,0},
              smooth=Smooth.None));
        else
          connect(colAllToOne.port_a, conPipWal.port_a) annotation (Line(
              points={{-50,4},{-50,-28},{-28,-28}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(colAllToOne.port_b, heatPort) annotation (Line(
              points={{-50,16},{-50,30},{5.55112e-16,30}},
              color={191,0,0},
              smooth=Smooth.None));

        end if;
        annotation (
          Diagram(graphics),
          Icon(graphics),
          defaultComponentName="pip",
          Documentation(info="<html>
<p>
Model of a pipe with flow resistance and optional heat exchange with environment.
</p>
<p>
If <code>useMultipleHeatPorts=false</code> (default option), the pipe uses a single heat port 
for the heat exchange with the environment.
If <code>useMultipleHeatPorts=true</code>, then one heat port for each segment of the pipe is
used for the heat exchange with the environment.
If the heat port is unconnected, then the pipe has no heat loss.
</p>
<p>
The default value for the parameter <code>diameter</code> is computed such that the flow velocity
is equal to <code>v_nominal=0.15</code> for a mass flow rate of <code>m_flow_nominal</code>.
Both parameters, <code>diameter</code> and <code>v_nominal</code>, can be overwritten
by the user.
The default value for <code>dp_nominal</code> is two times the pressure drop that the pipe
would have if it were straight with no fittings.
The factor of two that takes into account the pressure loss of fittings can be overwritten.
These fittings could also be explicitely modeled outside of this component using models from
the package
<a href=\"modelica://Modelica.Fluid.Fittings\">
Modelica.Fluid.Fittings</a>.
For mass flow rates other than <code>m_flow_nominal</code>, the model 
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> is used to
compute the pressure drop.
</p>
<p>
For a steady-state model of a flow resistance, use
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a> instead of this model.
</p>
</html>",       revisions="<html>
<ul>
<li>
February 22, 2012 by Michael Wetter:<br>
Renamed <code>useMultipleHeatPort</code> to <code>useMultipleHeatPorts</code> and 
used heat port connector from <code>Modelica.Fluid</code> package for vector of heat ports.
</li>
<li>
February 15, 2012 by Michael Wetter:<br>
Revised implementation and added default values.
</li>
<li>
February 12, 2012 by Wangda Zuo:<br>
First implementation.
</li>
</ul>
</html>"));
      end BasePipe;

      package Examples
        model FlowReduction
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.HWDis.Components.FlowReduction floRed(
            nDra=1)
            annotation (Placement(transformation(extent={{-8,-52},{12,-32}})));
          WaterHeatingLibrary.HWDis.Components.PipeLumpedCap
                                                     pip(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            m_flow_nominal=0.1,
            nSeg=46,
            length=10,
            dp_nominal=1,
            T_start=293.15,
            diameter_i=0.019939,
            diameter_o=0.022225,
            c_p_pip=390,
            rho_pip=8960,
            til=0,
            MixCoef=1,
            ePipe=0.95,
            thicknessIns=0.0127,
            lambdaIns=0.04)
            annotation (Placement(transformation(extent={{40,-6},{60,14}})));
          WaterHeatingLibrary.HWDis.Components.EndUseGPM
                                                       endUse(redeclare package
              Medium = Buildings.Media.ConstantPropertyLiquidWater)
            annotation (Placement(transformation(extent={{72,-6},{92,14}})));
          Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-16,46},{4,66}})));
          Modelica.Thermal.FluidHeatFlow.Examples.Utilities.DoubleRamp
                                           watFlo(
            offset=0,
            startTime=30,
            interval=30,
            duration_1=60,
            duration_2=60,
            height_1=0.63,
            height_2=-0.504) "Water flow rate (unit = gpm)"
            annotation (Placement(transformation(extent={{-90,-68},{-70,-48}})));
          Buildings.Fluid.Sensors.Temperature senTem(redeclare package Medium
              = Buildings.Media.ConstantPropertyLiquidWater)
            annotation (Placement(transformation(extent={{18,14},{38,34}})));
          Buildings.Fluid.Sources.Boundary_pT boundary(nPorts=2,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=150000,
            T=333.15)
            annotation (Placement(transformation(extent={{-56,-4},{-36,16}})));
          Modelica.Blocks.Sources.Constant maxFlo(k=0.315)
            annotation (Placement(transformation(extent={{-90,-36},{-70,-16}})));
        equation
          connect(pip.port_b, endUse.Inlet) annotation (Line(
              points={{60,4},{72,4}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(watFlo.y, floRed.desFlo[1])           annotation (Line(
              points={{-69,-58},{-26,-58},{-26,-49.4},{-10,-49.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(floRed.draFlo[1], endUse.watFlo)           annotation (Line(
              points={{13,-42},{64,-42},{64,-1},{70,-1}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(boundary.ports[2], pip.port_a) annotation (Line(
              points={{-36,4},{40,4}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(senTem.port, boundary.ports[1]) annotation (Line(
              points={{28,14},{28,8},{-36,8}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(maxFlo.y, floRed.conFlo) annotation (Line(
              points={{-69,-26},{-26,-26},{-26,-34},{-10,-34}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TAmb.y, pip.TAmb) annotation (Line(
              points={{5,56},{44,56},{44,11}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TAmb.y, pip.TRadMea) annotation (Line(
              points={{5,56},{56,56},{56,11}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics),
                  Documentation(info="<html>
          <p>
          This model provides an example of how the <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.FlowReduction\">WaterHeatingLibrary.HWDis.Components.FlowReduction</a>
           model is used. In it a single draw of varying flow rate is modeled through the <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.FlowReduction\">WaterHeatingLibrary.HWDis.Components.EndUseGPM model</a>.
          The draw at times exceeds the known maximum flow rate of the system, and is reduced by the FlowReduction model.<br>                  
          </p>
          </html>",
                  revisions="<html>
          <ul>
          <li>
          Apr 2, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
        end FlowReduction;

        model EndUseLPS
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.HWDis.Components.EndUse  endUse(redeclare package
              Medium = Buildings.Media.ConstantPropertyLiquidWater)
            annotation (Placement(transformation(extent={{20,10},{40,-10}})));
          Buildings.Fluid.Sources.Boundary_pT floSou(
            nPorts=1,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=150000,
            T=323.15)
            "High pressure point of flow origination (Example: Mains system)"
            annotation (Placement(transformation(extent={{-46,-10},{-26,10}})));
          Modelica.Blocks.Sources.Ramp     watFlo(
            height=0.126,
            duration=630,
            offset=0,
            startTime=30) "Water flow rate (unit = gpm)"
            annotation (Placement(transformation(extent={{-90,14},{-70,34}})));
        equation
          connect(floSou.ports[1], endUse.Inlet) annotation (Line(
              points={{-26,0},{20,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(watFlo.y, endUse.watFlo) annotation (Line(
              points={{-69,24},{0,24},{0,5},{18,5}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseLPS\">WaterHeatingLibrary.HWDis.Components.EndUseLPS</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end EndUseLPS;

        model EndUseGPM
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.HWDis.Components.EndUseGPM
                                                       endUse(redeclare package
              Medium = Buildings.Media.ConstantPropertyLiquidWater)
            annotation (Placement(transformation(extent={{20,10},{40,-10}})));
          Buildings.Fluid.Sources.Boundary_pT floSou(
            nPorts=1,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=150000,
            T=323.15)
            "High pressure point of flow origination (Example: Mains system)"
            annotation (Placement(transformation(extent={{-46,-10},{-26,10}})));
          Modelica.Blocks.Sources.Constant watFlo(k=1)
            "Water flow rate (unit = gpm)"
            annotation (Placement(transformation(extent={{-90,14},{-70,34}})));
        equation
          connect(floSou.ports[1], endUse.Inlet) annotation (Line(
              points={{-26,0},{20,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(watFlo.y, endUse.watFlo) annotation (Line(
              points={{-69,24},{0,24},{0,5},{18,5}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseGPM\">WaterHeatingLibrary.HWDis.Components.EndUseGPM</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end EndUseGPM;

        model EndUseLPSTwoBranch
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;

          Real perHot = endUseLPSTwoBranchPID.hotIn.m_flow / (endUseLPSTwoBranchPID.hotIn.m_flow+endUseLPSTwoBranchPID.colIn.m_flow)
            "Percentage of flow coming from the hot branch";
          WaterHeatingLibrary.HWDis.Components.EndUseTwoBranch       endUseLPSTwoBranchPID(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            PID_P_3=2,
            PID_I_3=3,
            PID_D_3=0.1,
            PID_P_2=2,
            PID_I_2=3,
            PID_D_2=0.1,
            T_start=283.15)
            annotation (Placement(transformation(extent={{30,-10},{50,10}})));
          Buildings.Fluid.Sources.Boundary_pT Mains(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=104000,
            T=288.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{-96,44},{-76,64}})));
          Modelica.Blocks.Sources.Ramp ramp(
            duration=600,
            startTime=660,
            height=-35,
            offset=273.15 + 50) annotation (Placement(transformation(extent={{-80,-94},
                    {-60,-74}})));
          Modelica.Blocks.Sources.Ramp ramp1(
            startTime=30,
            duration=600,
            offset=0.063,
            height=0.063)
            annotation (Placement(transformation(extent={{-80,74},{-60,94}})));
          Buildings.Fluid.Sources.Boundary_pT Hot(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=104000,
            T=333.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{-96,-68},{-76,-48}})));
        equation
          connect(ramp.y, endUseLPSTwoBranchPID.TOutDes)
                                                      annotation (Line(
              points={{-59,-84},{20,-84},{20,-5},{28,-5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp1.y, endUseLPSTwoBranchPID.WatFlowDes)
                                                          annotation (Line(
              points={{-59,84},{20,84},{20,8},{28,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Mains.ports[1], endUseLPSTwoBranchPID.colIn) annotation (Line(
              points={{-76,54},{0,54},{0,3.6},{30,3.6}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(Hot.ports[1], endUseLPSTwoBranchPID.hotIn) annotation (Line(
              points={{-76,-58},{0,-58},{0,0},{30,0}},
              color={0,127,255},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranchPID\">WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranchPID</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end EndUseLPSTwoBranch;

        model EndUseGPMTwoBranch
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.HWDis.Components.EndUseGPMTwoBranch    endUseGPMTwoBranchPID(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            PID_P_3=2,
            PID_I_3=3,
            PID_D_3=0.1,
            PID_P_2=2,
            PID_I_2=3,
            PID_D_2=0.1,
            T_start=283.15)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Buildings.Fluid.Sources.Boundary_pT Mains(
            nPorts=1,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=110000,
            T=288.15)
            annotation (Placement(transformation(extent={{-80,14},{-60,34}})));
          Buildings.Fluid.Sources.Boundary_pT Hot(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            nPorts=1,
            p=110000,
            T=333.15) annotation (Placement(transformation(extent={{-80,-30},{
                    -60,-10}})));
          Modelica.Blocks.Sources.Ramp ramp(
            height=45,
            duration=600,
            startTime=30,
            offset=273.15 + 15) annotation (Placement(transformation(extent={{-80,-60},
                    {-60,-40}})));
          Modelica.Blocks.Sources.Ramp ramp1(
            duration=600,
            startTime=660,
            height=1,
            offset=1)
            annotation (Placement(transformation(extent={{-80,48},{-60,68}})));
        equation
          connect(Mains.ports[1],endUseGPMTwoBranchPID. colIn)
                                                            annotation (Line(
              points={{-60,24},{-40,24},{-40,3.6},{-10,3.6}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(Hot.ports[1],endUseGPMTwoBranchPID. hotIn)
                                                          annotation (Line(
              points={{-60,-20},{-40,-20},{-40,0},{-10,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(ramp.y,endUseGPMTwoBranchPID. TOutDes)
                                                      annotation (Line(
              points={{-59,-50},{-20,-50},{-20,-5},{-12,-5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp1.y,endUseGPMTwoBranchPID. WatFlowDes)
                                                          annotation (Line(
              points={{-59,58},{-20,58},{-20,8},{-12,8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseGPMTwoBranchPID\">WaterHeatingLibrary.HWDis.Components.EndUseGPMTwoBranchPID</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end EndUseGPMTwoBranch;

        model PipeLumpedCap
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.HWDis.Components.PipeLumpedCap
                                                     pip(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            m_flow_nominal=0.1,
            dp_nominal=1,
            nSeg=45,
            length=10,
            MixCoef=0.6,
            c_p_pip=390,
            rho_pip=8960,
            diameter_i=0.019939,
            diameter_o=0.022225,
            til=0,
            ePipe=0.9,
            thicknessIns=0.0127,
            lambdaIns=0.04)
            annotation (Placement(transformation(extent={{-20,34},{0,14}})));
          WaterHeatingLibrary.HWDis.Components.EndUseGPM
                                                       endUse(redeclare package
              Medium = Buildings.Media.ConstantPropertyLiquidWater, gain=1/210)
            annotation (Placement(transformation(extent={{40,34},{60,14}})));
          Buildings.Fluid.Sources.Boundary_pT floSou(
            nPorts=1,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=150000,
            T=323.15)
            "High pressure point of flow origination (Example: Mains system)"
            annotation (Placement(transformation(extent={{-74,14},{-54,34}})));
          Modelica.Blocks.Sources.Constant watFlo(k=1)
            "Water flow rate (unit = gpm)"
            annotation (Placement(transformation(extent={{-50,54},{-30,74}})));
          Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-76,-14},{-56,6}})));
          Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 20) annotation (
              Placement(transformation(extent={{-78,-76},{-58,-56}})));
        equation
          connect(pip.port_b, endUse.Inlet) annotation (Line(
              points={{4.44089e-16,24},{40,24}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(floSou.ports[1], pip.port_a) annotation (Line(
              points={{-54,24},{-20,24}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(watFlo.y, endUse.watFlo) annotation (Line(
              points={{-29,64},{14,64},{14,29},{38,29}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TAmb.y, pip.TAmb) annotation (Line(
              points={{-55,-4},{-16,-4},{-16,17}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TRadMea.y, pip.TRadMea) annotation (Line(
              points={{-57,-66},{-4,-66},{-4,17}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.Pipe\">WaterHeatingLibrary.HWDis.Components.Pipe</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}})));
        end PipeLumpedCap;

        model PipeLumpedCapNoInsul
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.HWDis.Components.PipeLumpedCapNoInsul
                                                     pip(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            m_flow_nominal=0.1,
            dp_nominal=1,
            nSeg=45,
            length=10,
            MixCoef=0.6,
            c_p_pip=390,
            rho_pip=8960,
            diameter_i=0.019939,
            diameter_o=0.022225,
            til=0,
            ePipe=0.9)
            annotation (Placement(transformation(extent={{-20,34},{0,14}})));
          WaterHeatingLibrary.HWDis.Components.EndUseGPM
                                                       endUse(redeclare package
              Medium = Buildings.Media.ConstantPropertyLiquidWater, gain=1/210)
            annotation (Placement(transformation(extent={{40,34},{60,14}})));
          Buildings.Fluid.Sources.Boundary_pT floSou(
            nPorts=1,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=150000,
            T=323.15)
            "High pressure point of flow origination (Example: Mains system)"
            annotation (Placement(transformation(extent={{-74,14},{-54,34}})));
          Modelica.Blocks.Sources.Constant watFlo(k=1)
            "Water flow rate (unit = gpm)"
            annotation (Placement(transformation(extent={{-50,54},{-30,74}})));
          Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-76,-14},{-56,6}})));
          Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 20) annotation (
              Placement(transformation(extent={{-78,-76},{-58,-56}})));
        equation
          connect(pip.port_b, endUse.Inlet) annotation (Line(
              points={{4.44089e-16,24},{40,24}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(floSou.ports[1], pip.port_a) annotation (Line(
              points={{-54,24},{-20,24}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(watFlo.y, endUse.watFlo) annotation (Line(
              points={{-29,64},{14,64},{14,29},{38,29}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TAmb.y, pip.TAmb) annotation (Line(
              points={{-55,-4},{-16,-4},{-16,17}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TRadMea.y, pip.TRadMea) annotation (Line(
              points={{-57,-66},{-4,-66},{-4,17}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.Pipe\">WaterHeatingLibrary.HWDis.Components.Pipe</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}})));
        end PipeLumpedCapNoInsul;

        model PipeR
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;

          package Water = Buildings.Media.ConstantPropertyLiquidWater
            "Fluid in the system";

          WaterHeatingLibrary.HWDis.Components.EndUseGPM
                                                       endUse(      gain=1/210,
              redeclare package Medium = Water)
            annotation (Placement(transformation(extent={{40,10},{60,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T
                                              floSou(
            nPorts=1,
            redeclare package Medium = Water,
            use_m_flow_in=true,
            T=323.15)
            "High pressure point of flow origination (Example: Mains system)"
            annotation (Placement(transformation(extent={{-68,-10},{-48,10}})));
          Modelica.Blocks.Sources.Constant watFlo(k=1)
            "Water flow rate (unit = gpm)"
            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));
          Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-76,-56},{-56,-36}})));
          WaterHeatingLibrary.HWDis.Components.PipeR pip(
            redeclare package Medium = Water,
            m_flow_nominal=0.063,
            length=10,
            MixCoef=0.6,
            InsR=0.827717,
            c_p_pip=390,
            rho_pip=8960,
            til=0,
            diameter_i=0.019939,
            diameter_o=0.022225,
            nSeg=45,
            ePipe=0.95)
            annotation (Placement(transformation(extent={{-20,10},{0,-10}})));
          Modelica.Blocks.Sources.Step step(
            height=0.063,
            offset=0,
            startTime=30)
            annotation (Placement(transformation(extent={{-104,-2},{-84,18}})));
        equation
          connect(watFlo.y, endUse.watFlo) annotation (Line(
              points={{-29,40},{14,40},{14,5},{38,5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(floSou.ports[1], pip.port_a) annotation (Line(
              points={{-48,0},{-20,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(pip.port_b, endUse.Inlet) annotation (Line(
              points={{4.44089e-16,0},{40,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(TAmb.y, pip.TAmb) annotation (Line(
              points={{-55,-46},{-16,-46},{-16,-7}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(step.y, floSou.m_flow_in) annotation (Line(
              points={{-83,8},{-68,8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.Pipe\">WaterHeatingLibrary.HWDis.Components.Pipe</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end PipeR;

        model Test
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.HWDis.Components.EndUseTwoBranch       endUseLPSTwoBranchPID(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            PID_P_3=2,
            PID_I_3=3,
            PID_D_3=0.1,
            PID_P_2=2,
            PID_I_2=3,
            PID_D_2=0.1,
            T_start=283.15)
            annotation (Placement(transformation(extent={{30,-10},{50,10}})));
          Modelica.Blocks.Sources.Ramp ramp(
            duration=600,
            startTime=660,
            height=-35,
            offset=273.15 + 50) annotation (Placement(transformation(extent={{-80,-94},
                    {-60,-74}})));
          Modelica.Blocks.Sources.Ramp ramp1(
            startTime=30,
            duration=600,
            height=0,
            offset=0.063)
            annotation (Placement(transformation(extent={{-80,74},{-60,94}})));
          Buildings.Fluid.Sources.Boundary_pT Mains(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=104000,
            T=288.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{-96,48},{-76,68}})));
          Buildings.Fluid.Sources.Boundary_pT Hot(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=104000,
            T=333.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{-96,-64},{-76,-44}})));
          WaterHeatingLibrary.HWDis.Components.PipeLumpedCap pip(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            m_flow_nominal=0.063,
            diameter_i=0.019939,
            diameter_o=0.022225,
            c_p_pip=390,
            rho_pip=8960,
            til=0,
            length=5,
            MixCoef=0.6,
            ePipe=0.95,
            thicknessIns=0.0127,
            lambdaIns=0.04)
            annotation (Placement(transformation(extent={{-48,68},{-28,48}})));
          WaterHeatingLibrary.HWDis.Components.PipeLumpedCap pip1(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            m_flow_nominal=0.063,
            diameter_i=0.019939,
            diameter_o=0.022225,
            c_p_pip=390,
            rho_pip=8960,
            til=0,
            length=5,
            MixCoef=0.6,
            ePipe=0.95,
            thicknessIns=0.0127,
            lambdaIns=0.04) annotation (Placement(transformation(extent={{-48,
                    -64},{-28,-44}})));
          Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-100,-18},{-80,2}})));
          Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-100,12},{-80,32}})));
        equation
          connect(ramp.y, endUseLPSTwoBranchPID.TOutDes)
                                                      annotation (Line(
              points={{-59,-84},{20,-84},{20,-5},{28,-5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp1.y, endUseLPSTwoBranchPID.WatFlowDes)
                                                          annotation (Line(
              points={{-59,84},{20,84},{20,8},{28,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Mains.ports[1], pip.port_a) annotation (Line(
              points={{-76,58},{-48,58}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(pip.port_b, endUseLPSTwoBranchPID.colIn) annotation (Line(
              points={{-28,58},{14,58},{14,3.6},{30,3.6}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(Hot.ports[1], pip1.port_a) annotation (Line(
              points={{-76,-54},{-48,-54}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(pip1.port_b, endUseLPSTwoBranchPID.hotIn) annotation (Line(
              points={{-28,-54},{14,-54},{14,4.44089e-16},{30,4.44089e-16}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(TAmb.y, pip.TAmb) annotation (Line(
              points={{-79,22},{-44,22},{-44,51}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TAmb.y, pip1.TAmb) annotation (Line(
              points={{-79,22},{-44,22},{-44,-47}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TRadMea.y, pip.TRadMea) annotation (Line(
              points={{-79,-8},{-32,-8},{-32,51}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TRadMea.y, pip1.TRadMea) annotation (Line(
              points={{-79,-8},{-32,-8},{-32,-47}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranchPID\">WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranchPID</a>
            is used. <br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end Test;

        package Obsolete "Examples for the models in the obsolete folder"
          extends Modelica.Icons.Package;
          model EndUseLPSPID
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.HWDis.Components.Obsolete.EndUseLPSPID
                                                         endUse(redeclare
                package Medium =
                         Buildings.Media.ConstantPropertyLiquidWater,
              PID_D=0.1,
              PID_P=2,
              PID_I=3)
              annotation (Placement(transformation(extent={{30,20},{50,0}})));
            Buildings.Fluid.Sources.Boundary_pT floSou(
              nPorts=1,
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              p=150000,
              T=323.15)
              "High pressure point of flow origination (Example: Mains system)"
              annotation (Placement(transformation(extent={{-36,0},{-16,20}})));
            Modelica.Blocks.Sources.Step     watFlo(
              height=-1,
              offset=1,
              startTime=45) "Water flow rate (unit = gpm)"
              annotation (Placement(transformation(extent={{-80,24},{-60,44}})));
          equation
            connect(floSou.ports[1],endUse. Inlet) annotation (Line(
                points={{-16,10},{7,10},{7,4.6},{30,4.6}},
                color={0,127,255},
                smooth=Smooth.None));
            connect(watFlo.y,endUse. watFlo) annotation (Line(
                points={{-59,34},{10,34},{10,15},{28,15}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics),
                      Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseLPSPID\">WaterHeatingLibrary.HWDis.Components.EndUseLPSPID</a>
            is used. <br>
            </p>
            </html>", revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
          end EndUseLPSPID;

          model EndUseGPMPID
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.HWDis.Components.Obsolete.EndUseGPMPID
                                                         endUse(redeclare
                package Medium =
                         Buildings.Media.ConstantPropertyLiquidWater,
              PID_D=0.1,
              PID_P=2,
              PID_I=3)
              annotation (Placement(transformation(extent={{30,20},{50,0}})));
            Buildings.Fluid.Sources.Boundary_pT floSou(
              nPorts=1,
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              p=150000,
              T=323.15)
              "High pressure point of flow origination (Example: Mains system)"
              annotation (Placement(transformation(extent={{-36,-4},{-16,16}})));
            Modelica.Blocks.Sources.Step     watFlo(
              height=-1,
              offset=1,
              startTime=45) "Water flow rate (unit = gpm)"
              annotation (Placement(transformation(extent={{-80,24},{-60,44}})));
          equation
            connect(floSou.ports[1],endUse. Inlet) annotation (Line(
                points={{-16,6},{7,6},{7,4.6},{30,4.6}},
                color={0,127,255},
                smooth=Smooth.None));
            connect(watFlo.y,endUse. watFlo) annotation (Line(
                points={{-59,34},{10,34},{10,15},{28,15}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics),
                      Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseGPMPID\">WaterHeatingLibrary.HWDis.Components.EndUseGPMPID</a>
            is used. <br>
            </p>
            </html>", revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
          end EndUseGPMPID;

          model EndUseLPSTwoBranch
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.HWDis.Components.Obsolete.EndUseLPSTwoBranch
                               endUseLPSTwoBranch(
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              PID_I=1,
              PID_P=2,
              PID_D=0.0001,
              T_start=283.15)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
            Buildings.Fluid.Sources.Boundary_pT Mains(
              nPorts=1,
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              p=150000,
              T=288.15)
              annotation (Placement(transformation(extent={{-80,14},{-60,34}})));
            Buildings.Fluid.Sources.Boundary_pT Hot(
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              nPorts=1,
              p=150000,
              T=323.15) annotation (Placement(transformation(extent={{-80,-30},{
                      -60,-10}})));
            Modelica.Blocks.Sources.Ramp ramp(
              height=45,
              duration=600,
              startTime=30,
              offset=273.15 + 15) annotation (Placement(transformation(extent={{-80,-60},
                      {-60,-40}})));
            Modelica.Blocks.Sources.Ramp ramp1(
              height=0.063,
              duration=600,
              offset=0.063,
              startTime=660)
              annotation (Placement(transformation(extent={{-80,48},{-60,68}})));
          equation
            connect(Mains.ports[1], endUseLPSTwoBranch.colIn) annotation (Line(
                points={{-60,24},{-40,24},{-40,3.6},{-10,3.6}},
                color={0,127,255},
                smooth=Smooth.None));
            connect(Hot.ports[1], endUseLPSTwoBranch.hotIn) annotation (Line(
                points={{-60,-20},{-40,-20},{-40,0},{-10,0}},
                color={0,127,255},
                smooth=Smooth.None));
            connect(ramp.y, endUseLPSTwoBranch.TOutDes) annotation (Line(
                points={{-59,-50},{-20,-50},{-20,-5},{-12,-5}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(ramp1.y, endUseLPSTwoBranch.WatFlowDes) annotation (Line(
                points={{-59,58},{-20,58},{-20,7},{-12,7}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics),
                      Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranch\">WaterHeatingLibrary.HWDis.Components.EndUseLPSTwoBranch</a>
            is used. <br>
            </p>
            </html>", revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
          end EndUseLPSTwoBranch;

          model EndUseGPMTwoBranch
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.HWDis.Components.Obsolete.EndUseGPMTwoBranch
                               endUseGPMTwoBranch(
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              PID_I=1,
              PID_P=2,
              PID_D=0.0001,
              T_start=283.15,
              gain=1/210)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
            Buildings.Fluid.Sources.Boundary_pT Mains(
              nPorts=1,
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              p=150000,
              T=288.15)
              annotation (Placement(transformation(extent={{-80,14},{-60,34}})));
            Buildings.Fluid.Sources.Boundary_pT Hot(
              redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater,
              nPorts=1,
              p=150000,
              T=333.15) annotation (Placement(transformation(extent={{-80,-30},{
                      -60,-10}})));
            Modelica.Blocks.Sources.Ramp ramp(
              height=45,
              duration=600,
              startTime=30,
              offset=273.15 + 15) annotation (Placement(transformation(extent={{-80,-60},
                      {-60,-40}})));
            Modelica.Blocks.Sources.Ramp ramp1(
              height=0.063,
              duration=600,
              offset=0.063,
              startTime=660)
              annotation (Placement(transformation(extent={{-80,48},{-60,68}})));
          equation
            connect(Mains.ports[1],endUseGPMTwoBranch. colIn) annotation (Line(
                points={{-60,24},{-40,24},{-40,3.6},{-10,3.6}},
                color={0,127,255},
                smooth=Smooth.None));
            connect(Hot.ports[1],endUseGPMTwoBranch. hotIn) annotation (Line(
                points={{-60,-20},{-40,-20},{-40,0},{-10,0}},
                color={0,127,255},
                smooth=Smooth.None));
            connect(ramp.y,endUseGPMTwoBranch. TOutDes) annotation (Line(
                points={{-59,-50},{-20,-50},{-20,-5},{-12,-5}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(ramp1.y,endUseGPMTwoBranch. WatFlowDes) annotation (Line(
                points={{-59,58},{-20,58},{-20,7},{-12,7}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics),
                      Documentation(info="<html>
            <p>
            This model provides an example of how <a href=\"modelica://WaterHeatingLibrary.HWDis.Components.EndUseGPMTwoBranch\">WaterHeatingLibrary.HWDis.Components.EndUseGPMTwoBranch</a>
            is used. <br>
            </p>
            </html>", revisions="<html>
            <ul>
            <li>
            Apr 2, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
          end EndUseGPMTwoBranch;
        end Obsolete;
      end Examples;

      package BaseClasses
        model ConservationEquation "Lumped volume with mass and energy balance"

        //  outer Modelica.Fluid.System system "System properties";
          extends Buildings.Fluid.Interfaces.LumpedVolumeDeclarations;

          parameter Real MixCoef;
        //  Boolean DrawStat "True/false value stating whether or not a draw is active";
          discrete Modelica.SIunits.SpecificEnthalpy InitialEnthalpy
            "Enthalpy of the medium at the start of the draw";

          // Port definitions
          parameter Integer nPorts=2 "Number of ports"
            annotation(Evaluate=true, Dialog(connectorSizing=true, tab="General",group="Ports"));
          Modelica.Fluid.Vessels.BaseClasses.VesselFluidPorts_b ports[nPorts](
              redeclare each package Medium = Medium)
            "Fluid inlets and outlets"
            annotation (Placement(transformation(extent={{-40,-10},{40,10}},
              origin={0,-100})));

          // Set nominal attributes where literal values can be used.
          Medium.BaseProperties medium(
            preferredMediumStates= not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState),
            p(start=p_start,
              nominal=Medium.p_default,
              stateSelect=if not (massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)
                             then StateSelect.prefer else StateSelect.default),
            h(start=Medium.specificEnthalpy_pTX(p_start, T_start, X_start)),
            T(start=T_start,
              nominal=Medium.T_default,
              stateSelect=if (not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState))
                             then StateSelect.prefer else StateSelect.default),
            Xi(start=X_start[1:Medium.nXi],
               nominal=Medium.X_default[1:Medium.nXi],
               stateSelect=if (not (substanceDynamics == Modelica.Fluid.Types.Dynamics.SteadyState))
                             then StateSelect.prefer else StateSelect.default),
            d(start=rho_nominal)) "Medium properties";

          Modelica.SIunits.Energy U "Internal energy of fluid";
          Modelica.SIunits.Mass m "Mass of fluid";
          Modelica.SIunits.Mass[Medium.nXi] mXi
            "Masses of independent components in the fluid";
          Modelica.SIunits.Mass[Medium.nC] mC
            "Masses of trace substances in the fluid";
          // C need to be added here because unlike for Xi, which has medium.Xi,
          // there is no variable medium.C
          Medium.ExtraProperty C[Medium.nC](nominal=C_nominal)
            "Trace substance mixture content";

          Modelica.SIunits.MassFlowRate mb_flow "Mass flows across boundaries";
          Modelica.SIunits.MassFlowRate[Medium.nXi] mbXi_flow
            "Substance mass flows across boundaries";
          Medium.ExtraPropertyFlowRate[Medium.nC] mbC_flow
            "Trace substance mass flows across boundaries";
          Modelica.SIunits.EnthalpyFlowRate Hb_flow
            "Enthalpy flow across boundaries or energy source/sink";

          // Inputs that need to be defined by an extending class
          input Modelica.SIunits.Volume fluidVolume "Volume";

          Modelica.Blocks.Interfaces.RealInput Q_flow(unit="W")
            "Heat transfered into the medium"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealInput mXi_flow[Medium.nXi](unit="kg/s")
            "Mass flow rates of independent substances added to the medium"
            annotation (Placement(transformation(extent={{-140,0},{-100,40}})));

          // Outputs that are needed in models that extend this model
          Modelica.Blocks.Interfaces.RealOutput hOut(unit="J/kg")
            "Leaving enthalpy of the component"
             annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-50,110})));
          Modelica.Blocks.Interfaces.RealOutput XiOut[Medium.nXi](unit="1")
            "Leaving species concentration of the component"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,110})));
          Modelica.Blocks.Interfaces.RealOutput COut[Medium.nC](unit="1")
            "Leaving trace substances of the component"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=90,
                origin={50,110})));

          Real hInStream[nPorts](unit = "J/kg")
            "Enthalpy entering the component";

        protected
          parameter Boolean initialize_p = not Medium.singleState
            "= true to set up initial equations for pressure";

          Medium.EnthalpyFlowRate ports_H_flow[nPorts];
          Medium.MassFlowRate ports_mXi_flow[nPorts,Medium.nXi];
          Medium.ExtraPropertyFlowRate ports_mC_flow[nPorts,Medium.nC];

          parameter Modelica.SIunits.Density rho_nominal=Medium.density(
           Medium.setState_pTX(
             T=T_start,
             p=p_start,
             X=X_start[1:Medium.nXi])) "Density, used to compute fluid mass"
          annotation (Evaluate=true);
        equation

          when ports[1].m_flow > 0 then
            InitialEnthalpy = medium.h;
          end when;

          // Total quantities
          m = fluidVolume*medium.d;
          mXi = m*medium.Xi;
          U = m*medium.u;
          mC = m*C;

          hOut = medium.h;
          XiOut = medium.Xi;
          COut = C;

          for i in 1:nPorts loop
            ports_H_flow[i]     = ports[i].m_flow * actualStream(ports[i].h_outflow)
              "Enthalpy flow";
            hInStream[i] = inStream(ports[i].h_outflow);
            ports_mXi_flow[i,:] = ports[i].m_flow * actualStream(ports[i].Xi_outflow)
              "Component mass flow";
            ports_mC_flow[i,:]  = ports[i].m_flow * actualStream(ports[i].C_outflow)
              "Trace substance mass flow";
          end for;

          for i in 1:Medium.nXi loop
            mbXi_flow[i] = sum(ports_mXi_flow[:,i]);
          end for;

          for i in 1:Medium.nC loop
            mbC_flow[i]  = sum(ports_mC_flow[:,i]);
          end for;

          mb_flow = sum(ports.m_flow);
          Hb_flow = sum(ports_H_flow);

          // Energy and mass balances
          if energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
            0 = Hb_flow + Q_flow;
          else
            der(U) = Hb_flow + Q_flow;
          end if;

          if massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
            0 = mb_flow + sum(mXi_flow);
          else
            der(m) = mb_flow + sum(mXi_flow);
          end if;

          if substanceDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
            zeros(Medium.nXi) = mbXi_flow + mXi_flow;
          else
            der(mXi) = mbXi_flow + mXi_flow;
          end if;

          if traceDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
            zeros(Medium.nC)  = mbC_flow;
          else
            der(mC)  = mbC_flow;
          end if;

          // Properties of outgoing flows
          for i in 1:nPorts loop
              ports[i].p          = medium.p;
              ports[i].Xi_outflow = medium.Xi;
              ports[i].C_outflow  = C;
          end for;

          for i in 1:nPorts-1 loop
              ports[i].h_outflow  = medium.h;
          end for;

          ports[nPorts].h_outflow = min(medium.h,max(InitialEnthalpy,medium.h - (1 - MixCoef)*(hInStream[1]-medium.h)));

        initial equation
          // Make sure that if energyDynamics is SteadyState, then
          // massDynamics is also SteadyState.
          // Otherwise, the system of ordinary differential equations may be inconsistent.
          if energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState then
            assert(massDynamics == energyDynamics, "
         If 'massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState', then it is 
         required that 'energyDynamics==Modelica.Fluid.Types.Dynamics.SteadyState'.
         Otherwise, the system of equations may not be consistent.
         You need to select other parameter values.");
          end if;

          // initialization of balances
          if energyDynamics == Modelica.Fluid.Types.Dynamics.FixedInitial then
        //    if use_T_start then
              medium.T = T_start;
        //    else
        //      medium.h = h_start;
        //    end if;
          else
            if energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyStateInitial then
        //      if use_T_start then
                der(medium.T) = 0;
        //      else
        //        der(medium.h) = 0;
        //      end if;
            end if;
          end if;

          if massDynamics == Modelica.Fluid.Types.Dynamics.FixedInitial then
            if initialize_p then
              medium.p = p_start;
            end if;
          else
            if massDynamics == Modelica.Fluid.Types.Dynamics.SteadyStateInitial then
              if initialize_p then
                der(medium.p) = 0;
              end if;
            end if;
          end if;

          if substanceDynamics == Modelica.Fluid.Types.Dynamics.FixedInitial then
            medium.Xi = X_start[1:Medium.nXi];
          else
            if substanceDynamics == Modelica.Fluid.Types.Dynamics.SteadyStateInitial then
              der(medium.Xi) = zeros(Medium.nXi);
            end if;
          end if;

          if traceDynamics == Modelica.Fluid.Types.Dynamics.FixedInitial then
            C = C_start[1:Medium.nC];
          else
            if traceDynamics == Modelica.Fluid.Types.Dynamics.SteadyStateInitial then
              der(C) = zeros(Medium.nC);
            end if;
          end if;

          annotation (
            Documentation(info="<html>
<p>
Basic model for an ideally mixed fluid volume with the ability to store mass and energy.
It implements a dynamic or a steady-state conservation equation for energy and mass fractions.
The model has zero pressure drop between its ports.
</p>
<h4>Implementation</h4>
<p>
When extending or instantiating this model, the input 
<code>fluidVolume</code>, which is the actual volume occupied by the fluid,
needs to be assigned.
For most components, this can be set to a parameter. However, for components such as 
expansion vessels, the fluid volume can change in time.
</p>
<p>
Input connectors of the model are
<ul>
<li>
<code>Q_flow</code>, which is the sensible plus latent heat flow rate added to the medium, and
</li>
<li>
<code>mXi_flow</code>, which is the species mass flow rate added to the medium.
</li>
</ul>
</p>
<p>
The model can be used as a dynamic model or as a steady-state model.
However, for a steady-state model with exactly two fluid ports connected, 
the model
<a href=\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation\">
Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation</a>
provides a more efficient implementation.
</p>
<p>
For models that instantiates this model, see
<a href=\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\">
Buildings.Fluid.MixingVolumes.MixingVolume</a> and
<a href=\"modelica://Buildings.Fluid.Storage.ExpansionVessel\">
Buildings.Fluid.Storage.ExpansionVessel</a>.
</p>
<p>
This model has been modified from the pipe model in the Buildings library. The buildings library model assumes perfect mixing in each segment of the pipe. To more accurately
imitate the flow characteristics observed in experimental data a mixing parameter was added. The mixing parameter adjusts the enthalpy of water leaving a segment of the pipe
to change the energy balance and allow for simualtion of different amounts of mixing.
</p>
</html>",         revisions="<html>
<ul>
<li>
Mar 28, 2013 by Peter Grant:<br>
Added mixing coefficient to ConservationEquation to model different amounts of mixing during draws<br>
Added code to identify the enthalpy in the water at the time a draw starts, use that as a minimum enthalpy leaving the pipe
</li>
<li>
July 31, 2011 by Michael Wetter:<br>
Added test to stop model translation if the setting for
<code>energyBalance</code> and <code>massBalance</code>
can lead to inconsistent equations.
</li>
<li>
July 26, 2011 by Michael Wetter:<br>
Removed the option to use <code>h_start</code>, as this
is not needed for building simulation. 
Also removed the reference to <code>Modelica.Fluid.System</code>.
Moved parameters and medium to 
<a href=\"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations\">
Buildings.Fluid.Interfaces.LumpedVolumeDeclarations</a>.
<li>
July 14, 2011 by Michael Wetter:<br>
Added start value for medium density.
</li>
<li>
March 29, 2011 by Michael Wetter:<br>
Changed default value for <code>substanceDynamics</code> and
<code>traceDynamics</code> from <code>energyDynamics</code>
to <code>massDynamics</code>.
</li>
<li>
September 28, 2010 by Michael Wetter:<br>
Changed array index for nominal value of <code>Xi</code>.
<li>
September 13, 2010 by Michael Wetter:<br>
Set nominal attributes for medium based on default medium values.
</li>
<li>
July 30, 2010 by Michael Wetter:<br>
Added parameter <code>C_nominal</code> which is used as the nominal attribute for <code>C</code>.
Without this value, the ODE solver gives wrong results for concentrations around 1E-7.
</li>
<li>
March 21, 2010 by Michael Wetter:<br>
Changed pressure start value from <code>system.p_start</code>
to <code>Medium.p_default</code> since HVAC models may have water and 
air, which are typically at different pressures.
</li>
<li><i>February 6, 2010</i> by Michael Wetter:<br>
Added to <code>Medium.BaseProperties</code> the initialization 
<code>X(start=X_start[1:Medium.nX])</code>. Previously, the initialization
was only done for <code>Xi</code> but not for <code>X</code>, which caused the
medium to be initialized to <code>reference_X</code>, ignoring the value of <code>X_start</code>.
</li>
<li><i>October 12, 2009</i> by Michael Wetter:<br>
Implemented first version in <code>Buildings</code> library, based on model from
<code>Modelica.Fluid 1.0</code>.
</li>
</ul>
</html>"),  Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}}),
                    graphics),
            Icon(graphics={            Rectangle(
                  extent={{-100,100},{100,-100}},
                  fillColor={135,135,135},
                  fillPattern=FillPattern.Solid,
                  pattern=LinePattern.None),
                Text(
                  extent={{-89,17},{-54,34}},
                  lineColor={0,0,127},
                  textString="mXi_flow"),
                Text(
                  extent={{-89,52},{-54,69}},
                  lineColor={0,0,127},
                  textString="Q_flow"),
                Line(points={{-56,-73},{81,-73}}, color={255,255,255}),
                Line(points={{-42,55},{-42,-84}}, color={255,255,255}),
                Polygon(
                  points={{-42,67},{-50,45},{-34,45},{-42,67}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{87,-73},{65,-65},{65,-81},{87,-73}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-42,-28},{-6,-28},{18,4},{40,12},{66,14}},
                  color={255,255,255},
                  smooth=Smooth.Bezier),
                Text(
                  extent={{-155,-120},{145,-160}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end ConservationEquation;

        model FeedForwardController
          "Uses feedforward controls to control a mixing valve"
          extends Modelica.Blocks.Interfaces.BlockIcon;

          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
            "Medium in the component";

          parameter Real small = 1e-6;

          Modelica.SIunits.SpecificHeatCapacity c_p = Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
              p=Medium.p_default,
              T=TOutDes,
              X=Medium.X_default));

          Modelica.SIunits.SpecificEnthalpy hOutDes=(TOutDes-273.105)*c_p
            "Desired outlet enthalpy";

          Modelica.Blocks.Interfaces.RealInput TOutDes(unit = "K")
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          Modelica.Blocks.Interfaces.RealInput colEnt(unit = "J/kg")
            "Enthalpy of the cold fluid"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealInput hotEnt(unit = "J/kg")
            "Enthalpy of the hot fluid"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealOutput y = Buildings.Utilities.Math.Functions.smoothMax(0,Buildings.Utilities.Math.Functions.smoothMin(1, (hOutDes - colEnt)/Buildings.Utilities.Math.Functions.smoothMax(hotEnt - colEnt, small, 0.01), 0.01),0.01)
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics));

        end FeedForwardController;

        model MixingVolume
          "Mixing volume with inlet and outlet ports (flow reversal is allowed)"
          extends
            WaterHeatingLibrary.HWDis.Components.BaseClasses.PartialMixingVolume(
              dynBal(MixCoef=MixCoef));

          parameter Real MixCoef=1;

        protected
          Modelica.Blocks.Sources.Constant       masExc[Medium.nXi](k=zeros(Medium.nXi)) if
               Medium.nXi > 0 "Block to set mass exchange in volume"
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Modelica.Blocks.Sources.RealExpression heaInp(y=heatPort.Q_flow)
            "Block to set heat input into volume"
            annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        equation
          connect(heaInp.y, steBal.Q_flow) annotation (Line(
              points={{-59,90},{-30,90},{-30,18},{-22,18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heaInp.y, dynBal.Q_flow) annotation (Line(
              points={{-59,90},{28,90},{28,16},{38,16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(masExc.y, steBal.mXi_flow) annotation (Line(
              points={{-59,70},{-42,70},{-42,14},{-22,14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(masExc.y, dynBal.mXi_flow) annotation (Line(
              points={{-59,70},{20,70},{20,12},{38,12}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (
        defaultComponentName="vol",
        Documentation(info="<html>
This model represents an instantaneously mixed volume. 
Potential and kinetic energy at the port are neglected,
and there is no pressure drop at the ports.
The volume can exchange heat through its <code>heatPort</code>.
</p>
<p>
The volume can be parameterized as a steady-state model or as
dynamic model.
</p>
<p>
To increase the numerical robustness of the model, the parameter
<code>prescribedHeatFlowRate</code> can be set by the user. 
This parameter only has an effect if the model has exactly two fluid ports connected,
and if it is used as a steady-state model.
Use the following settings:
<ul>
<li>Set <code>prescribedHeatFlowRate=true</code> if there is a model connected to <code>heatPort</code>
that computes the heat flow rate <i>not</i> as a function of the temperature difference
between the medium and an ambient temperature. Examples include an ideal electrical heater,
a pump that rejects heat into the fluid stream, or a chiller that removes heat based on a performance curve.
</li>
<li>Set <code>prescribedHeatFlowRate=true</code> if the only means of heat flow at the <code>heatPort</code>
is computed as <i>K * (T-heatPort.T)</i>, for some temperature <i>T</i> and some conductance <i>K</i>,
which may itself be a function of temperature or mass flow rate.
</li>
</ul>
</p>
<h4>Implementation</h4>
<p>
If the model is operated in steady-state and has two fluid ports connected,
then the same energy and mass balance implementation is used as in
steady-state component models, i.e., the use of <code>actualStream</code>
is not used for the properties at the port.
</p>
<p>
The implementation of these balance equations is done in the instances
<code>dynBal</code> for the dynamic balance and <code>steBal</code>
for the steady-state balance. Both models use the same input variables:
<ul>
<li>
The variable <code>Q_flow</code> is used to add sensible <i>and</i> latent heat to the fluid.
For example, <code>Q_flow</code> participates in the steady-state energy balance<pre>
    port_b.h_outflow = inStream(port_a.h_outflow) + Q_flow * m_flowInv;
</pre>
where <code>m_flowInv</code> approximates the expression <code>1/m_flow</code>.
</li>
<li>
The variable <code>mXi_flow</code> is used to add a species mass flow rate to the fluid.
</li>
</ul>
</p>
<p>
For simple models that uses this model, see
<a href=\"modelica://Buildings.Fluid.HeatExchangers.HeaterCoolerPrescribed\">
Buildings.Fluid.HeatExchangers.HeaterCoolerPrescribed</a> and
<a href=\"modelica://Buildings.Fluid.MassExchangers.HumidifierPrescribed\">
Buildings.Fluid.MassExchangers.HumidifierPrescribed</a>.
</p>
<p>
This model has been modified from the pipe model in the Buildings library. The buildings library model assumes perfect mixing in each segment of the pipe. To more accurately
imitate the flow characteristics observed in experimental data a mixing parameter was added. The mixing parameter adjusts the enthalpy of water leaving a segment of the pipe
to change the energy balance and allow for simualtion of different amounts of mixing.
</p>
</html>",         revisions="<html>
<ul>
<li>
Mar 28, 2013 by Peter Grant:<br>
Added mixing coefficient to ConservationEquation to model different amounts of mixing during draws<br>
Added code to transfer draw status information from the larger pipe model to ConservationEquation
</li>
<li>
February 7, 2012 by Michael Wetter:<br>
Revised base classes for conservation equations in <code>Buildings.Fluid.Interfaces</code>.
</li>
<li>
September 17, 2011 by Michael Wetter:<br>
Removed instance <code>medium</code> as this is already used in <code>dynBal</code>.
Removing the base properties led to 30% faster computing time for a solar thermal system
that contains many fluid volumes. 
</li>
<li>
September 13, 2011 by Michael Wetter:<br>
Changed in declaration of <code>medium</code> the parameter assignment
<code>preferredMediumStates=true</code> to
<code>preferredMediumStates= not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)</code>.
Otherwise, for a steady-state model, Dymola 2012 may differentiate the model to obtain <code>T</code>
as a state. See ticket Dynasim #13596.
</li>
<li>
July 26, 2011 by Michael Wetter:<br>
Revised model to use new declarations from
<a href=\"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations\">
Buildings.Fluid.Interfaces.LumpedVolumeDeclarations</a>.
</li>
<li>
July 14, 2011 by Michael Wetter:<br>
Added start values for mass and internal energy of dynamic balance
model.
</li>
<li>
May 25, 2011 by Michael Wetter:<br>
<ul>
<li>
Changed implementation of balance equation. The new implementation uses a different model if 
exactly two fluid ports are connected, and in addition, the model is used as a steady-state
component. For this model configuration, the same balance equations are used as were used
for steady-state component models, i.e., instead of <code>actualStream(...)</code>, the
<code>inStream(...)</code> formulation is used.
This changed required the introduction of a new parameter <code>m_flow_nominal</code> which
is used for smoothing in the steady-state balance equations of the model with two fluid ports.
This implementation also simplifies the implementation of 
<a href=\"modelica://Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolumeWaterPort\">
Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolumeWaterPort</a>,
which now uses the same equations as this model.
</li>
<li>
Another revision was the removal of the parameter <code>use_HeatTransfer</code> as there is
no noticable overhead in always having the <code>heatPort</code> connector present.
</li>
</ul>
</li>
<li>
July 30, 2010 by Michael Wetter:<br>
Added nominal value for <code>mC</code> to avoid wrong trajectory 
when concentration is around 1E-7.
See also <a href=\"https://trac.modelica.org/Modelica/ticket/393\">
https://trac.modelica.org/Modelica/ticket/393</a>.
</li>
<li>
February 7, 2010 by Michael Wetter:<br>
Simplified model and its base classes by removing the port data
and the vessel area.
Eliminated the base class <code>PartialLumpedVessel</code>.
</li>
<li>
October 12, 2009 by Michael Wetter:<br>
Changed base class to
<a href=\"modelica://Buildings.Fluid.MixingVolumes.BaseClasses.ClosedVolume\">
Buildings.Fluid.MixingVolumes.BaseClasses.ClosedVolume</a>.
</li>
</ul>
</html>"),         Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                           graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}}), graphics={Ellipse(
                  extent={{-100,98},{100,-102}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.Sphere,
                  fillColor={170,213,255}), Text(
                  extent={{-58,14},{58,-18}},
                  lineColor={0,0,0},
                  textString="V=%V"),         Text(
                  extent={{-152,100},{148,140}},
                  textString="%name",
                  lineColor={0,0,255})}));
        end MixingVolume;

        partial model PartialMixingVolume
          "Partial mixing volume with inlet and outlet ports (flow reversal is allowed)"
          outer Modelica.Fluid.System system "System properties";
          extends Buildings.Fluid.Interfaces.LumpedVolumeDeclarations;
          parameter Modelica.SIunits.MassFlowRate m_flow_nominal(min=0)
            "Nominal mass flow rate"
            annotation(Dialog(group = "Nominal condition"));
          // Port definitions
          parameter Integer nPorts=0 "Number of ports"
            annotation(Evaluate=true, Dialog(connectorSizing=true, tab="General",group="Ports"));
          parameter Medium.MassFlowRate m_flow_small(min=0) = 1E-4*abs(m_flow_nominal)
            "Small mass flow rate for regularization of zero flow"
            annotation(Dialog(tab = "Advanced"));
          parameter Boolean homotopyInitialization = true
            "= true, use homotopy method"
            annotation(Evaluate=true, Dialog(tab="Advanced"));
          parameter Boolean allowFlowReversal = system.allowFlowReversal
            "= true to allow flow reversal in medium, false restricts to design direction (ports[1] -> ports[2]). Used only if model has two ports."
            annotation(Dialog(tab="Assumptions"), Evaluate=true);
          parameter Modelica.SIunits.Volume V "Volume";
          parameter Boolean prescribedHeatFlowRate=false
            "Set to true if the model has a prescribed heat flow at its heatPort"
           annotation(Evaluate=true, Dialog(tab="Assumptions",
              enable=use_HeatTransfer,
              group="Heat transfer"));
          Modelica.Fluid.Vessels.BaseClasses.VesselFluidPorts_b ports[nPorts](
              redeclare each package Medium = Medium)
            "Fluid inlets and outlets"
            annotation (Placement(transformation(extent={{-40,-10},{40,10}},
              origin={0,-100})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort
            "Heat port connected to outflowing medium"
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          Modelica.SIunits.Temperature T "Temperature of the fluid";
          Modelica.SIunits.Pressure p "Pressure of the fluid";
          Modelica.SIunits.MassFraction Xi[Medium.nXi]
            "Species concentration of the fluid";
          Medium.ExtraProperty C[Medium.nC](nominal=C_nominal)
            "Trace substance mixture content";
           // Models for the steady-state and dynamic energy balance.
        //protected
          Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation steBal(
            sensibleOnly = true,
            redeclare final package Medium=Medium,
            final m_flow_nominal = m_flow_nominal,
            final allowFlowReversal = allowFlowReversal,
            final m_flow_small = m_flow_small,
            final homotopyInitialization = homotopyInitialization,
            final show_V_flow = false) if
                useSteadyStateTwoPort
            "Model for steady-state balance if nPorts=2"
                annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          WaterHeatingLibrary.HWDis.Components.BaseClasses.ConservationEquation
            dynBal(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final massDynamics=massDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final X_start=X_start,
            final C_start=C_start,
            final C_nominal=C_nominal,
            final fluidVolume=V,
            m(start=V*rho_nominal),
            U(start=V*rho_nominal*Medium.specificInternalEnergy(state_start)),
            nPorts=nPorts) if not useSteadyStateTwoPort
            "Model for dynamic energy balance"
            annotation (Placement(transformation(extent={{40,0},{60,20}})));
          parameter Medium.ThermodynamicState state_start = Medium.setState_pTX(
              T=T_start,
              p=p_start,
              X=X_start[1:Medium.nXi]) "Start state";
          parameter Modelica.SIunits.Density rho_nominal=Medium.density(
           Medium.setState_pTX(
             T=T_start,
             p=p_start,
             X=X_start[1:Medium.nXi])) "Density, used to compute fluid mass"
          annotation (Evaluate=true);
          ////////////////////////////////////////////////////
          final parameter Boolean useSteadyStateTwoPort=(nPorts == 2) and
              prescribedHeatFlowRate and (
              energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState) and (
              massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState) and (
              substanceDynamics == Modelica.Fluid.Types.Dynamics.SteadyState) and (
              traceDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)
            "Flag, true if the model has two ports only and uses a steady state balance"
            annotation (Evaluate=true);
          Modelica.SIunits.HeatFlowRate Q_flow
            "Heat flow across boundaries or energy source/sink";
          // Outputs that are needed to assign the medium properties
          Modelica.Blocks.Interfaces.RealOutput hOut_internal(unit="J/kg")
            "Internal connector for leaving temperature of the component";
          Modelica.Blocks.Interfaces.RealOutput XiOut_internal[Medium.nXi](unit="1")
            "Internal connector for leaving species concentration of the component";
          Modelica.Blocks.Interfaces.RealOutput COut_internal[Medium.nC](unit="1")
            "Internal connector for leaving trace substances of the component";

        equation
          ///////////////////////////////////////////////////////////////////////////
          // asserts
          if not allowFlowReversal then
            assert(ports[1].m_flow > -m_flow_small,
        "Model has flow reversal, but the parameter allowFlowReversal is set to false.
  m_flow_small    = "         + String(m_flow_small) + "
  ports[1].m_flow = "         + String(ports[1].m_flow) + "
");       end if;
        // Only one connection allowed to a port to avoid unwanted ideal mixing
          if not useSteadyStateTwoPort then
            for i in 1:nPorts loop
            assert(cardinality(ports[i]) == 2 or cardinality(ports[i]) == 0,"
each ports[i] of volume can at most be connected to one component.
If two or more connections are present, ideal mixing takes
place with these connections, which is usually not the intention
of the modeller. Increase nPorts to add an additional port.
");          end for;
          end if;
          // actual definition of port variables
          // If the model computes the energy and mass balances as steady-state,
          // and if it has only two ports,
          // then we use the same base class as for all other steady state models.
          if useSteadyStateTwoPort then
          connect(steBal.port_a, ports[1]) annotation (Line(
              points={{-20,10},{-22,10},{-22,-60},{0,-60},{0,-100}},
              color={0,127,255},
              smooth=Smooth.None));

          connect(steBal.port_b, ports[2]) annotation (Line(
              points={{5.55112e-16,10},{8,10},{8,10},{8,-88},{0,-88},{0,-100}},
              color={0,127,255},
              smooth=Smooth.None));

            connect(hOut_internal,  steBal.hOut);
            connect(XiOut_internal, steBal.XiOut);
            connect(COut_internal,  steBal.COut);
          else
              connect(dynBal.ports, ports) annotation (Line(
              points={{50,-5.55112e-16},{50,-34},{2.22045e-15,-34},{2.22045e-15,-100}},
              color={0,127,255},
              smooth=Smooth.None));

            connect(hOut_internal,  dynBal.hOut);
            connect(XiOut_internal, dynBal.XiOut);
            connect(COut_internal,  dynBal.COut);
          end if;
          // Medium properties
          p = if nPorts > 0 then ports[1].p else p_start;
          T = Medium.temperature_phX(p=p, h=hOut_internal, X=cat(1,Xi,{1-sum(Xi)}));
          Xi = XiOut_internal;
          C = COut_internal;
          // Port properties
          heatPort.T = T;
          heatPort.Q_flow = Q_flow;

          annotation (
        defaultComponentName="vol",
        Documentation(info="<html>
This is a partial model of an instantaneously mixed volume.
It is used as the base class for all fluid volumes of the package
<a href=\"modelica://Buildings.Fluid.MixingVolumes\">
Buildings.Fluid.MixingVolumes</a>.
</p>
</p>
<h4>Implementation</h4>
<p>
If the model is operated in steady-state and has two fluid ports connected,
then the same energy and mass balance implementation is used as in
steady-state component models, i.e., the use of <code>actualStream</code>
is not used for the properties at the port.
</p>
<p>
For simple models that uses this model, see
<a href=\"modelica://Buildings.Fluid.MixingVolumes\">
Buildings.Fluid.MixingVolumes</a>.
</p>
<p>
This model has been modified from the pipe model in the Buildings library. The buildings library model assumes perfect mixing in each segment of the pipe. To more accurately
imitate the flow characteristics observed in experimental data a mixing parameter was added. The mixing parameter adjusts the enthalpy of water leaving a segment of the pipe
to change the energy balance and allow for simualtion of different amounts of mixing.
</p>
</html>",         revisions="<html>
<ul>
<li>
Mar 28, 2013 by Peter Grant:<br>
Added mixing coefficient to ConservationEquation to model different amounts of mixing during draws
</li>
<li>
February 7, 2012 by Michael Wetter:<br>
Revised base classes for conservation equations in <code>Buildings.Fluid.Interfaces</code>.
</li>
<li>
September 17, 2011 by Michael Wetter:<br>
Removed instance <code>medium</code> as this is already used in <code>dynBal</code>.
Removing the base properties led to 30% faster computing time for a solar thermal system
that contains many fluid volumes. 
</li>
<li>
September 13, 2011 by Michael Wetter:<br>
Changed in declaration of <code>medium</code> the parameter assignment
<code>preferredMediumStates=true</code> to
<code>preferredMediumStates= not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)</code>.
Otherwise, for a steady-state model, Dymola 2012 may differentiate the model to obtain <code>T</code>
as a state. See ticket Dynasim #13596.
</li>
<li>
July 26, 2011 by Michael Wetter:<br>
Revised model to use new declarations from
<a href=\"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations\">
Buildings.Fluid.Interfaces.LumpedVolumeDeclarations</a>.
</li>
<li>
July 14, 2011 by Michael Wetter:<br>
Added start values for mass and internal energy of dynamic balance
model.
</li>
<li>
May 25, 2011 by Michael Wetter:<br>
<ul>
<li>
Changed implementation of balance equation. The new implementation uses a different model if 
exactly two fluid ports are connected, and in addition, the model is used as a steady-state
component. For this model configuration, the same balance equations are used as were used
for steady-state component models, i.e., instead of <code>actualStream(...)</code>, the
<code>inStream(...)</code> formulation is used.
This changed required the introduction of a new parameter <code>m_flow_nominal</code> which
is used for smoothing in the steady-state balance equations of the model with two fluid ports.
This implementation also simplifies the implementation of 
<a href=\"modelica://Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolumeWaterPort\">
Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolumeWaterPort</a>,
which now uses the same equations as this model.
</li>
<li>
Another revision was the removal of the parameter <code>use_HeatTransfer</code> as there is
no noticable overhead in always having the <code>heatPort</code> connector present.
</li>
</ul>
</li>
<li>
July 30, 2010 by Michael Wetter:<br>
Added nominal value for <code>mC</code> to avoid wrong trajectory 
when concentration is around 1E-7.
See also <a href=\"https://trac.modelica.org/Modelica/ticket/393\">
https://trac.modelica.org/Modelica/ticket/393</a>.
</li>
<li>
February 7, 2010 by Michael Wetter:<br>
Simplified model and its base classes by removing the port data
and the vessel area.
Eliminated the base class <code>PartialLumpedVessel</code>.
</li>
<li>
October 12, 2009 by Michael Wetter:<br>
Changed base class to
<a href=\"modelica://Buildings.Fluid.MixingVolumes.BaseClasses.ClosedVolume\">
Buildings.Fluid.MixingVolumes.BaseClasses.ClosedVolume</a>.
</li>
</ul>
</html>"),         Diagram(graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}}), graphics={Ellipse(
                  extent={{-100,98},{100,-102}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.Sphere,
                  fillColor={170,213,255}), Text(
                  extent={{-58,14},{58,-18}},
                  lineColor={0,0,0},
                  textString="V=%V"),         Text(
                  extent={{-152,100},{148,140}},
                  textString="%name",
                  lineColor={0,0,255})}));
        end PartialMixingVolume;

        model PartialPipe
          "Model of a pipe with finite volume discretization along the flow path"
          extends
            WaterHeatingLibrary.HWDis.Components.BaseClasses.LumpedVolumeDeclarations;
          extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
          showDesignFlowDirection = false,
          final show_T=true);
          extends Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters(
            final computeFlowResistance=(abs(dp_nominal) > Modelica.Constants.eps));

          parameter Integer nSeg(min=2) = 2 "Number of volume segments";

          parameter Modelica.SIunits.Length diameter_i "Inner pipe diameter"
            annotation(Dialog(group="Pipe geometry"));
          parameter Modelica.SIunits.Length diameter_o "Outer pipe diameter"
            annotation(Dialog(group="Pipe geometry"));

          parameter Modelica.SIunits.SpecificHeatCapacity c_p_pip
            "Specific heat of the pipe material"
            annotation(Dialog(group="Pipe material"));
          parameter Modelica.SIunits.Density rho_pip
            "Density of the material used in the pipe"
            annotation(Dialog(group="Pipe material"));
          parameter Modelica.SIunits.Angle til
            "Tilt angle of the pipe(0 = horizontal)"
            annotation(Dialog(group = "Pipe geometry"));

          parameter Modelica.SIunits.Length length "Length of the pipe"
            annotation(Dialog(group="Pipe geometry"));
          parameter Real ReC=4000
            "Reynolds number where transition to turbulent starts"
            annotation (Dialog(tab="Flow resistance"));
          parameter Real MixCoef "1 = full mixing, 0 = plug flow";
          parameter Real ePipe "Emissivity of the pipe";

          parameter Medium.Temperature T_Initial[nSeg]={Medium.T_default,Medium.T_default}
            "Start value of temperature"
            annotation(Dialog(tab = "Initialization"));

          BaseClasses.MixingVolume[                  nSeg] vol(
            redeclare each final package Medium = Medium,
            each energyDynamics=energyDynamics,
            each massDynamics=massDynamics,
            each final V=VPipe/nSeg,
            each nPorts=2,
            each final m_flow_nominal=m_flow_nominal,
            each prescribedHeatFlowRate=true,
            each p_start=p_start,
            T_start=T_Initial,
            each X_start=X_start,
            each C_start=C_start,
            each C_nominal=C_nominal,
            each final m_flow_small=m_flow_small,
            each final homotopyInitialization=homotopyInitialization,
            each final allowFlowReversal=allowFlowReversal,
            each MixCoef=MixCoef) "Volume for pipe fluid"      annotation (Placement(
                transformation(extent={{-1,-22},{19,-42}}, rotation=0)));

        protected
          parameter Modelica.SIunits.Volume VPipe=Modelica.Constants.pi*(diameter_i/2.0)^
              2*length "Pipe volume";
          parameter Medium.ThermodynamicState[nSeg] state_start = Medium.setState_pTX(
              T=T_Initial,
              p=p_start,
              X=X_start[1:Medium.nXi]) "Start state";
          parameter Modelica.SIunits.Density[nSeg] rho_nominal = Medium.density(state_start);
          parameter Modelica.SIunits.DynamicViscosity[nSeg] mu_nominal = Medium.dynamicViscosity(state_start)
            "Dynamic viscosity at nominal condition";
          Buildings.Fluid.FixedResistances.FixedResistanceDpM res(
            redeclare final package Medium = Medium,
            final from_dp=from_dp,
            use_dh=true,
            final show_T=show_T,
            final m_flow_nominal=m_flow_nominal,
            final dp_nominal=dp_nominal,
            final allowFlowReversal=allowFlowReversal,
            final show_V_flow=show_V_flow,
            final linearized=linearizeFlowResistance,
            final ReC=ReC,
            final homotopyInitialization=homotopyInitialization,
            dh=diameter_i) "Flow resistance"
                                         annotation (Placement(transformation(extent={{-30,-10},
                    {-10,10}}, rotation=0)));

          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package
              Medium =
                Medium)
            annotation (Placement(transformation(extent={{-94,10},{-74,-10}})));

          Modelica.Blocks.Routing.Replicator TAmbRep(nout=nSeg) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-50,78})));

        public
          Modelica.Thermal.HeatTransfer.Components.HeatCapacitor heaCap[nSeg](each C=c_p_pip*
                rho_pip*Modelica.Constants.pi/(4*nSeg)*(diameter_o^2 - diameter_i^2), T(
                start=T_Initial))
            annotation (Placement(transformation(extent={{-30,-42},{-10,-62}})));
          Modelica.Blocks.Interfaces.RealInput TAmb
            "Ambient temperature surrounding the pipe (K)" annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-50,120}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-60,70})));

        equation
          connect(res.port_b, vol[1].ports[1]) annotation (Line(
              points={{-10,6.10623e-16},{7,6.10623e-16},{7,-22}},
              color={0,127,255},
              smooth=Smooth.None));
          for i in 1:(nSeg - 1) loop
            connect(vol[i].ports[2], vol[i + 1].ports[1]);
          end for;
          connect(vol[nSeg].ports[2], port_b) annotation (Line(
              points={{11,-22},{12,-22},{12,5.55112e-16},{100,5.55112e-16}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(port_a, senMasFlo.port_a) annotation (Line(
              points={{-100,0},{-94,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(senMasFlo.port_b, res.port_a) annotation (Line(
              points={{-74,0},{-30,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(vol.heatPort, heaCap.port) annotation (Line(
              points={{-1,-32},{-20,-32},{-20,-42}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(TAmb, TAmbRep.u) annotation (Line(
              points={{-50,120},{-50,90}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                    graphics),
            Icon(graphics={
                Rectangle(
                  extent={{-100,60},{100,-60}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={192,192,192}),
                Rectangle(
                  extent={{-100,50},{100,-48}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={217,236,256}),
                Text(
                  extent={{-42,12},{40,-12}},
                  lineColor={0,0,0},
                  textString="%nSeg")}),
            Documentation(info="<html>
<p>
Model of a pipe with flow resistance and optional heat storage.
This model can be used for modeling the heat exchange between the pipe and environment.
The model consists of a flow resistance 
<a href=\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\">
Buildings.Fluid.FixedResistances.FixedResistanceDpM</a>
and <code>nSeg</code> mixing volumes
<a href=\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\">
Buildings.Fluid.MixingVolumes.MixingVolume</a>.
</p>
<p>
This model has been modified from the pipe model in the Buildings library. The buildings library model assumes perfect mixing in each segment of the pipe. To more accurately
imitate the flow characteristics observed in experimental data a mixing parameter was added. The mixing parameter adjusts the enthalpy of water leaving a segment of the pipe
to change the energy balance and allow for simualtion of different amounts of mixing.
</p>
</html>",         revisions="<html>
<ul>
<li>
Mar 28, 2013 by Peter Grant:<br>
Added mixing coefficient to ConservationEquation to model different amounts of mixing during draws
</li>
<li>
February 15, 2012 by Michael Wetter:<br>
Changed base class from which the model extends.
Propagated parameters of volume to the top if this model.
</li>
<li>
February 12, 2012 by Wangda Zuo:<br>
First implementation.
</li>
</ul>
</html>"));
        end PartialPipe;

        package Examples
          model FeedForwardController
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.HWDis.Components.BaseClasses.FeedForwardController
              feedForwardController(redeclare package Medium =
                  Buildings.Media.ConstantPropertyLiquidWater)
              annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
            Modelica.Blocks.Sources.Constant hotEnt(k=60*4184)
              annotation (Placement(transformation(extent={{-88,22},{-68,42}})));
            Modelica.Blocks.Sources.Constant colEnt(k=20*4184)
              annotation (Placement(transformation(extent={{-88,-10},{-68,10}})));
            Modelica.Blocks.Sources.Constant TOutDes(k=273.15 + 40) annotation (
               Placement(transformation(extent={{-88,-42},{-68,-22}})));
          equation
            connect(hotEnt.y, feedForwardController.hotEnt) annotation (Line(
                points={{-67,32},{-40,32},{-40,6},{-14,6}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(colEnt.y, feedForwardController.colEnt) annotation (Line(
                points={{-67,0},{-14,0}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(TOutDes.y, feedForwardController.TOutDes) annotation (Line(
                points={{-67,-32},{-40,-32},{-40,-6},{-14,-6}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end FeedForwardController;
        end Examples;

        record LumpedVolumeDeclarations "Declarations for lumped volumes"
          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium "Medium in the component"
              annotation (choicesAllMatching = true);

          // Assumptions
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Formulation of energy balance"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));
          parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
            "Formulation of mass balance"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));
          final parameter Modelica.Fluid.Types.Dynamics substanceDynamics=energyDynamics
            "Formulation of substance balance"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));
          final parameter Modelica.Fluid.Types.Dynamics traceDynamics=energyDynamics
            "Formulation of trace substance balance"
            annotation(Evaluate=true, Dialog(tab = "Dynamics", group="Equations"));

          // Initialization
          parameter Medium.AbsolutePressure p_start = Medium.p_default
            "Start value of pressure"
            annotation(Dialog(tab = "Initialization"));
        //  parameter Boolean use_T_start = true "= true, use T_start, otherwise h_start"
         //   annotation(Dialog(tab = "Initialization"), Evaluate=true);
        //  parameter Medium.SpecificEnthalpy h_start=
        //    if use_T_start then Medium.specificEnthalpy_pTX(p_start, T_start, X_start) else Medium.h_default
        //    "Start value of specific enthalpy"
        //    annotation(Dialog(tab = "Initialization", enable = not use_T_start));
          parameter Medium.MassFraction X_start[Medium.nX] = Medium.X_default
            "Start value of mass fractions m_i/m"
            annotation (Dialog(tab="Initialization", enable=Medium.nXi > 0));
          parameter Medium.ExtraProperty C_start[Medium.nC](
               quantity=Medium.extraPropertiesNames)=fill(0, Medium.nC)
            "Start value of trace substances"
            annotation (Dialog(tab="Initialization", enable=Medium.nC > 0));
          parameter Medium.ExtraProperty C_nominal[Medium.nC](
               quantity=Medium.extraPropertiesNames) = fill(1E-2, Medium.nC)
            "Nominal value of trace substances. (Set to typical order of magnitude.)"
           annotation (Dialog(tab="Initialization", enable=Medium.nC > 0));

        annotation (preferredView="info",
        Documentation(info="<html>
<p>
This class contains parameters and medium properties
that are used in the lumped  volume model, and in models that extend the 
lumped volume model.
</p>
<p>
These parameters are used by
<a href=\"modelica://Buildings.Fluid.Interfaces.ConservationEquation\">
Buildings.Fluid.Interfaces.ConservationEquation</a>,
<a href=\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\">
Buildings.Fluid.MixingVolumes.MixingVolume</a>,
<a href=\"modelica://Buildings.Rooms.MixedAir\">
Buildings.Rooms.MixedAir</a>, and by
<a href=\"modelica://Buildings.Rooms.BaseClasses.MixedAir\">
Buildings.Rooms.BaseClasses.MixedAir</a>.
</p>
</html>",
        revisions="<html>
<ul>
<li>
August 2, 2011, by Michael Wetter:<br>
Set <code>substanceDynamics</code> and <code>traceDynamics<code> to final
and equal to <code>energyDynamics</code>, 
as there is no need to make them different from <code>energyDynamics</code>.
</li>
<li>
August 1, 2011, by Michael Wetter:<br>
Changed default value for <code>energyDynamics</code> to
<code>Modelica.Fluid.Types.Dynamics.DynamicFreeInitial</code> because
<code>Modelica.Fluid.Types.Dynamics.SteadyStateInitial</code> leads
to high order DAE that Dymola cannot reduce.
</li>
<li>
July 31, 2011, by Michael Wetter:<br>
Changed default value for <code>energyDynamics</code> to
<code>Modelica.Fluid.Types.Dynamics.SteadyStateInitial</code>.
</li>
<li>
April 13, 2009, by Michael Wetter:<br>
First implementation.
</li>
</ul>
</html>"));
        end LumpedVolumeDeclarations;
      end BaseClasses;

      package Obsolete
        "These models are believed to be obsolete. Kept in storage in case I'm wrong"
        extends Modelica.Icons.Package;
        model EndUseLPSPID
          "Model of a pipe in a hot water distribution system. Assumes input flow units are L/s"
          extends Modelica.Blocks.Interfaces.BlockIcon;

          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
            "Fluid in the system";

          parameter Real PID_P = 1 "Proportional term in PID controller";
          parameter Modelica.SIunits.Time PID_I = 1
            "Integral term in PID controller";
          parameter Modelica.SIunits.Time PID_D = 1
            "Derivative term in PID controller";

          Modelica.Fluid.Interfaces.FluidPort_a Inlet(redeclare package Medium
              =                                                                  Medium)
            "Inlet for water coming from the branch"
            annotation (Placement(transformation(extent={{-110,44},{-90,64}})));
           Buildings.Fluid.Actuators.Valves.TwoWayLinear val(riseTime=0.00000001,
               y_start=0,
             redeclare package Medium = Medium,
             m_flow_nominal=0.06,
             dpValve_nominal=1,
             l=1e-10)
             annotation (Placement(transformation(extent={{-10,64},{10,44}})));
          Buildings.Fluid.Sources.Boundary_pT PAmb(          redeclare package
              Medium =
                Medium,
            p=101325,
            nPorts=1) "Describes the ambient pressure at the outlet"
                                                           annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={60,54})));
           Modelica.Blocks.Interfaces.RealInput watFlo "Water flow rate in gpm"
             annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort
                                              senTem(redeclare package Medium
              =                                                                 Medium,
            m_flow_nominal=0.063,
            tau=0.00001)
            annotation (Placement(transformation(extent={{20,44},{40,64}})));
          Modelica.Blocks.Interfaces.RealOutput TOut( unit = "K")
            "Temperature of fluid exiting the fixture"
            annotation (Placement(transformation(extent={{100,70},{120,90}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=val.m_flow)
            annotation (Placement(transformation(extent={{-92,-94},{-72,-74}})));
          Modelica.Blocks.Interfaces.RealOutput floOut
            annotation (Placement(transformation(extent={{100,-94},{120,-74}})));
          Buildings.Controls.Continuous.LimPID conPID(
            controllerType=Modelica.Blocks.Types.SimpleController.PID,
            k=PID_P,
            Ti=PID_I,
            Td=PID_D)
                  annotation (Placement(transformation(extent={{-68,-60},{-48,-40}})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=0)
            annotation (Placement(transformation(extent={{-86,-24},{-66,-4}})));
          Modelica.Blocks.Math.BooleanToReal booleanToReal
            annotation (Placement(transformation(extent={{-54,-24},{-34,-4}})));
          Modelica.Blocks.Math.Product product1 annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,16})));
        equation
          connect(Inlet, val.port_a) annotation (Line(
              points={{-100,54},{-10,54}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(senTem.T, TOut) annotation (Line(
              points={{30,65},{30,80},{110,80}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, floOut) annotation (Line(
              points={{-71,-84},{110,-84}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(watFlo, conPID.u_s) annotation (Line(
              points={{-120,-50},{-70,-50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, conPID.u_m) annotation (Line(
              points={{-71,-84},{-58,-84},{-58,-62}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(greaterThreshold.y, booleanToReal.u) annotation (Line(
              points={{-65,-14},{-56,-14}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(watFlo, greaterThreshold.u) annotation (Line(
              points={{-120,-50},{-96,-50},{-96,-14},{-88,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(booleanToReal.y, product1.u1) annotation (Line(
              points={{-33,-14},{-6,-14},{-6,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(conPID.y, product1.u2) annotation (Line(
              points={{-47,-50},{6,-50},{6,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, val.y) annotation (Line(
              points={{0,27},{0,42}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(val.port_b, senTem.port_a) annotation (Line(
              points={{10,54},{20,54}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(senTem.port_b, PAmb.ports[1]) annotation (Line(
              points={{40,54},{50,54}},
              color={0,127,255},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model can be used to control a fluid flow rate to the user-specified flow rate. The inputs are a connection to the hot water system and a hot water draw flow rate.
            This version of the model is intended to be used with water flow rate in L/s used as the input. Because the valve model works in kg/s no unit conversions are
            performed to make the output flow rate read in L/s (Assumption: The density of water is constantly 1 kg/L).
            </p>
            <p>
            This model uses a PId controller to modulate the water flow rate instead of the constant gain controller. The advantage of this model is that it does not require the
             user to adjust the gain value until the simulated flow rate matches the desired flow rate. The disadvantage is that the PID controller will not be able to react
             and adjust the valve to the desired flow rate instantly.<br>
            </p>
            <p>
            In the original design the valve would not respond well to a desired flow rate of 0 L/s. Situations where draw flow rates instantly dropped to 0 would simulate extremely
            slowly. The models comparing the flow rate to 0 and setting the valve position to 0 when there is no flow were added to resolve this issue.<br>
            </p> 
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Mar 28, 2013 by Peter Grant:<br>
            First implementation            
            </ul>
            </li>
            </html>"));
        end EndUseLPSPID;

        model EndUseGPMPID
          "Model of a pipe in a hot water distribution system. Assumes input flow units are GPM"
          extends WaterHeatingLibrary.HWDis.Components.Obsolete.EndUseLPSPID(
              realExpression(y=val.m_flow/0.063));

         annotation (Placement(transformation(extent={{46,-94},{66,-74}})),
                      Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model can be used to control a fluid flow rate to the user-specified flow rate. The inputs are a connection to the hot water system and a hot water draw flow rate.
            This version of the model is intended to be used with water flow rate in gal/min used as the input. Because the valve model works in kg/s unit conversions are
            performed to make the output flow rate read in gal (Assumption: The density of water is constantly 1 kg/L).
            </p>
            <p>
            This model uses a PId controller to modulate the water flow rate instead of the constant gain controller. The advantage of this model is that it does not require the
             user to adjust the gain value until the simulated flow rate matches the desired flow rate. The disadvantage is that the PID controller will not be able to react
             and adjust the valve to the desired flow rate instantly.<br>
            </p>
            <p>
            In the original design the valve would not respond well to a desired flow rate of 0 L/s. Situations where draw flow rates instantly dropped to 0 would simulate extremely
            slowly. The models comparing the flow rate to 0 and setting the valve position to 0 when there is no flow were added to resolve this issue.<br>
            </p> 
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Mar 28, 2013 by Peter Grant:<br>
            First implementation            
            </ul>
            </li>
            </html>"));
        end EndUseGPMPID;

        model EndUseLPSTwoBranch
          "Model of a pipe in a water distribution system. Assumes input flow units are L/s. Includes pipes for both hot and cold water"
          extends Modelica.Blocks.Interfaces.BlockIcon;

          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
            "Fluid in the system";

          parameter Modelica.SIunits.Temperature T_start
            "Initial temperature in the valve";

          parameter Real PID_P "Proportional term for the PID controller";
          parameter Modelica.SIunits.Time PID_I
            "Integral term for the PID controller";
          parameter Modelica.SIunits.Time PID_D
            "Derivative term for the PID controller";

          parameter Real gain=1/13.25 "Gain for controlling the flow valve";

          Modelica.Fluid.Interfaces.FluidPort_a hotIn(redeclare package Medium
              =                                                                  Medium)
            "Inlet for hot water coming from the branch"
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
           Buildings.Fluid.Actuators.Valves.ThreeWayLinear
                                                         val(riseTime=0.00000001,
               y_start=0,
             redeclare package Medium = Medium,
             m_flow_nominal=0.06,
             dpValve_nominal=1,
            l={1e-10,1e-10},
            T_start=T_start,
            tau=0.0000001)
             annotation (Placement(transformation(extent={{-30,10},{-10,-10}})));
          Buildings.Fluid.Sources.Boundary_pT PAmb(          redeclare package
              Medium =
                Medium,
            p=101325,
            nPorts=1) "Describes the ambient pressure at the outlet"
                                                           annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={74,0})));
           Modelica.Blocks.Interfaces.RealInput TOutDes
            "Desired outlet water temperature"
             annotation (Placement(transformation(extent={{-140,-76},{-100,-36}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort
                                              senTem(redeclare package Medium
              =                                                                 Medium,
            m_flow_nominal=0.063,
            tau=0.00001)
            annotation (Placement(transformation(extent={{-4,10},{16,-10}})));
          Modelica.Blocks.Interfaces.RealOutput TOut( unit = "K")
            "Temperature of fluid exiting the fixture"
            annotation (Placement(transformation(extent={{100,-44},{120,-24}})));
          Modelica.Fluid.Interfaces.FluidPort_a colIn(redeclare package Medium
              =                                                                  Medium)
            "Inlet connected to the cold water branch"
            annotation (Placement(transformation(extent={{-110,26},{-90,46}})));
          BaseClasses.FeedForwardController    conPID(redeclare package Medium
              = Medium)
            annotation (Placement(transformation(extent={{-46,-60},{-26,-40}})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear val1(
            redeclare package Medium = Medium,
            m_flow_nominal=0.06,
            dpValve_nominal=1,
            l=1e-8,
            riseTime=0.0000001,
            y_start=0)
            annotation (Placement(transformation(extent={{22,-10},{42,10}})));
          Modelica.Blocks.Interfaces.RealInput WatFlowDes
            annotation (Placement(transformation(extent={{-140,50},{-100,90}})));
          Modelica.Blocks.Interfaces.RealOutput WatFloAct
            annotation (Placement(transformation(extent={{100,50},{120,70}})));
           Modelica.Blocks.Math.Gain valPosId(k=gain)
            "Identifies the position of the valve needed for the desired flow rate"
             annotation (Placement(transformation(extent={{-74,60},{-54,80}})));
           Modelica.Blocks.Math.Min valCon "Controls the valve position"
             annotation (Placement(transformation(extent={{-8,54},{12,74}})));
           Modelica.Blocks.Sources.Constant Max(k=1)
            "States that the valve cannot open beyond 100%"
             annotation (Placement(transformation(extent={{-52,44},{-32,64}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=val1.m_flow)
            annotation (Placement(transformation(extent={{56,50},{76,70}})));
          Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort colEnt(redeclare
              package Medium = Medium, m_flow_nominal=0.063)
            "Enthalpy of the cold water flow"
            annotation (Placement(transformation(extent={{-92,46},{-72,26}})));
          Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hotEnt(redeclare
              package Medium = Medium, m_flow_nominal=0.063)
            "Enthalpy of the hot water flow"
            annotation (Placement(transformation(extent={{-70,10},{-50,-10}})));
        equation
          connect(conPID.y, val.y) annotation (Line(
              points={{-25,-50},{-20,-50},{-20,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(val1.port_b, PAmb.ports[1]) annotation (Line(
              points={{42,0},{64,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(WatFlowDes, valPosId.u) annotation (Line(
              points={{-120,70},{-76,70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(valPosId.y, valCon.u1) annotation (Line(
              points={{-53,70},{-10,70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Max.y, valCon.u2) annotation (Line(
              points={{-31,54},{-24,54},{-24,58},{-10,58}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(valCon.y, val1.y) annotation (Line(
              points={{13,64},{32,64},{32,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, WatFloAct) annotation (Line(
              points={{77,60},{110,60}},
              color={0,0,127},
              smooth=Smooth.None));

          connect(val.port_2, senTem.port_a) annotation (Line(
              points={{-10,0},{-4,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(senTem.port_b, val1.port_a) annotation (Line(
              points={{16,0},{22,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(senTem.T, TOut) annotation (Line(
              points={{6,-11},{6,-34},{110,-34}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TOutDes, conPID.TOutDes) annotation (Line(
              points={{-120,-56},{-48,-56}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(colIn, colEnt.port_a) annotation (Line(
              points={{-100,36},{-92,36}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(colEnt.port_b, val.port_3) annotation (Line(
              points={{-72,36},{-20,36},{-20,10}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(hotIn, hotEnt.port_a) annotation (Line(
              points={{-100,4.44089e-16},{-86,4.44089e-16},{-86,0},{-70,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(hotEnt.port_b, val.port_1) annotation (Line(
              points={{-50,0},{-30,0}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(conPID.hotEnt, hotEnt.h_out) annotation (Line(
              points={{-48,-44},{-60,-44},{-60,-11}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(conPID.colEnt, colEnt.h_out) annotation (Line(
              points={{-48,-50},{-82,-50},{-82,25}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model allows the user to describe a hot water draw in terms of the conditions leaving the fixutre. The model then uses two separate valves to control the system
            (system referring to water heater combined with distribution system) such that the desired water flow leaves the fixture. Progressing from the draw to the water
            heater the two valves are:<br>
            A two-way valve using the gain method (see WaterHeatingLibrary.HWDis.Components.EndUseLPS) to control the flow rate out of the draw.<br>
            A three-way valve using a PID controller to determine the mixture of hot and cold water. The PID controller adjusts the three-way valve position until the outlet
            temperature matches the input from the user.
            </p>
            <p>
            The water flow rate is controlled by opening/closing the valve such that the water flow rate in the fluid line matches the flow rate specified by the user. The intent
            is that the user can specify a flow rate in a text input file and the valve controls the fluid path to match that flow rate. When using this component to create models
            the gain value must be adjusted until the system flow matches the intended flow.
            </p>     
            <p>   
            This version of the model is intended to be used with water flow rate in L/s used as the input. Because the valve model works in kg/s no unit conversions are
            performed to make the output flow rate read in L/s (Assumption: The density of water is constantly 1 kg/L).<br>
            </p>    
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Mar 28, by Peter Grant:<br>
            First implementation
            </ul>
            </li>
            </html>"));
        end EndUseLPSTwoBranch;

        model EndUseGPMTwoBranch
          "Model of a pipe in a water distribution system. Assumes input flow units are GPM. Includes pipes for both hot and cold water"
          extends
            WaterHeatingLibrary.HWDis.Components.Obsolete.EndUseLPSTwoBranch(
              realExpression(y=val1.m_flow/0.063));

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            This model allows the user to describe a hot water draw in terms of the conditions leaving the fixutre. The model then uses two separate valves to control the system
            (system referring to water heater combined with distribution system) such that the desired water flow leaves the fixture. Progressing from the draw to the water
            heater the two valves are:<br>
            A two-way valve using the gain method (see WaterHeatingLibrary.HWDis.Components.EndUseLPS) to control the flow rate out of the draw.<br>
            A three-way valve using a PID controller to determine the mixture of hot and cold water. The PID controller adjusts the three-way valve position until the outlet
            temperature matches the input from the user.
            </p>
            <p>
            The water flow rate is controlled by opening/closing the valve such that the water flow rate in the fluid line matches the flow rate specified by the user. The intent
            is that the user can specify a flow rate in a text input file and the valve controls the fluid path to match that flow rate. When using this component to create models
            the gain value must be adjusted until the system flow matches the intended flow.
            </p>     
            <p>   
            This version of the model is intended to be used with water flow rate in gal/min used as the input. Because the valve model works in kg/s unit conversions are
            performed to make the output flow rate read in gal/min (Assumption: The density of water is constantly 1 kg/L).<br>
            </p>    
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Mar 28, by Peter Grant:<br>
            First implementation
            </ul>
            </li>
            </html>"));
        end EndUseGPMTwoBranch;
      end Obsolete;
    end Components;

    package ValidationModels
      "Models designed to be the same as Carl Hillers lab setup, for use in validating the model"

      model thrQuaInR0Validation
        "A model designed to replicate Carl Hiller's test lab. Parameters entered are intended to match the 3/4 in dia test"
        extends Modelica.Icons.Example;

        package Water = Buildings.Media.ConstantPropertyLiquidWater;

        inner Modelica.Fluid.System system
          annotation (Placement(transformation(extent={{72,70},{92,90}})));

        Modelica.Blocks.Tables.CombiTable1Ds Inlet1GPMTest1(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuBare1GPMTest1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-64,-34},{-44,-14}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(
                                                              y=time)
          annotation (Placement(transformation(extent={{-94,-34},{-74,-14}})));
        Modelica.Blocks.Math.Add add1
          annotation (Placement(transformation(extent={{-20,22},{0,2}})));
        Modelica.Blocks.Sources.Constant const1(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-62,8},{-42,28}})));
        Modelica.Blocks.Tables.CombiTable1Ds Val1GPMTest1(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR0GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-64,-64},{-44,-44}})));
        Modelica.Blocks.Math.Gain gain1(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-10,-48},{2,-36}})));
        Components.EndUseGPM endUseGPM(redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{72,-38},{92,-18}})));
        Buildings.Fluid.Sources.Boundary_pT boundary(use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{12,-24},{32,-4}})));
        Components.PipeLumpedCapNoInsul
                        pip(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          length=27.87758,
          m_flow_nominal=0.063,
          dp_nominal=1,
          MixCoef=1,
          diameter_i=0.018923,
          ePipe=0.95,
          T_start=284.7236,
          nSeg=46)
          annotation (Placement(transformation(extent={{38,-24},{58,-4}})));
        Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 15)
          annotation (Placement(transformation(extent={{20,70},{40,90}})));
        Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 15)
          annotation (Placement(transformation(extent={{-20,32},{0,52}})));
      equation
        connect(realExpression1.y, Inlet1GPMTest1.u)
                                                   annotation (Line(
            points={{-73,-24},{-66,-24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Inlet1GPMTest1.y[2], add1.u1) annotation (Line(
            points={{-43,-24},{-26,-24},{-26,6},{-22,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, add1.u2)
                                 annotation (Line(
            points={{-41,18},{-22,18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, Val1GPMTest1.u)  annotation (Line(
            points={{-73,-24},{-72,-24},{-72,-54},{-66,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Inlet1GPMTest1.y[1], gain1.u) annotation (Line(
            points={{-43,-24},{-26,-24},{-26,-42},{-11.2,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Inlet1GPMTest1.y[1], endUseGPM.watFlo) annotation (Line(
            points={{-43,-24},{4,-24},{4,-33},{70,-33}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary.ports[1], pip.port_a) annotation (Line(
            points={{32,-14},{38,-14}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add1.y, boundary.T_in) annotation (Line(
            points={{1,12},{4,12},{4,-10},{10,-10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea.y, pip.TRadMea) annotation (Line(
            points={{41,80},{54,80},{54,-7}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pip.port_b, endUseGPM.Inlet) annotation (Line(
            points={{58,-14},{66,-14},{66,-28},{72,-28}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb.y, pip.TAmb) annotation (Line(
            points={{1,42},{42,42},{42,-7}},
            color={0,0,127},
            smooth=Smooth.None));
      annotation (
      Documentation(info="<html>
<p>
This model is designed to match Carl Hiller's test lab. It is intended to be the same as the 3/4 in dia pipe setup.
</p>
<p>
Some useful numbers and facts:
</p>
<ul>
<li>
The 3/4 in dia pipe test has four straight sections of 20 ft, with elbows and shorties creating U-bends in between. Total length is 86 ft (26.2128 m).
</li>
<li>
There are two options for insulation - 1/2 in and 3/4 in. 1/2 in = 0.0127 m. 3/4 in = 0.01905 m.
</li>
<li>
The insulation used in Carl Hiller's test lab has a conductivity of 0.02 Btu/hr-Ft-F (0.036 W/hr-m-K).
</li>
</ul>
</html>"),   Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}),        graphics),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
      end thrQuaInR0Validation;

      model thrQuaInR47Validation
        "A model designed to replicate Carl Hiller's test lab. Parameters entered are intended to match the 3/4 in dia test"
        extends Modelica.Icons.Example;

        package Water = Buildings.Media.ConstantPropertyLiquidWater;

        Modelica.Blocks.Tables.CombiTable1Ds InletConditions(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-66,-34},{-46,-14}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=time)
          annotation (Placement(transformation(extent={{-96,-34},{-76,-14}})));
        inner Modelica.Fluid.System system
          annotation (Placement(transformation(extent={{72,124},{92,144}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{-24,40},{-4,20}})));
        Modelica.Blocks.Sources.Constant const(k=273.15)
          annotation (Placement(transformation(extent={{-92,26},{-72,46}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-66,-4},{-46,16}})));

        Modelica.Blocks.Math.Gain gain(k=0.063090197)
          annotation (Placement(transformation(extent={{-10,-62},{2,-50}})));
        Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
          annotation (Placement(transformation(extent={{-26,46},{-6,66}})));
        Modelica.Blocks.Sources.Constant TRadMea(k=273.15 + 20)
          annotation (Placement(transformation(extent={{20,86},{40,106}})));
        Buildings.Fluid.Sources.Boundary_pT boundary(use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{14,-14},{34,6}})));
        Components.PipeLumpedCap Mix06(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          MixCoef=0.6,
          dp_nominal=0,
          length=30,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{40,-14},{60,6}})));
        Components.EndUseGPM endUseGPM(redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{78,-28},{94,-12}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions1(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-68,150},{-48,170}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(
                                                              y=time)
          annotation (Placement(transformation(extent={{-98,150},{-78,170}})));
        Modelica.Blocks.Math.Add add1
          annotation (Placement(transformation(extent={{-26,224},{-6,204}})));
        Modelica.Blocks.Sources.Constant const1(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-94,210},{-74,230}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData1(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-68,180},{-48,200}})));
        Modelica.Blocks.Math.Gain gain1(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-12,122},{0,134}})));
        Buildings.Fluid.Sources.Boundary_pT boundary1(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{12,170},{32,190}})));
        Components.PipeLumpedCap Mix05(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.5,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{38,170},{58,190}})));
        Components.EndUseGPM endUseGPM1(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{76,156},{92,172}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions2(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-66,326},{-46,346}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(
                                                              y=time)
          annotation (Placement(transformation(extent={{-96,326},{-76,346}})));
        Modelica.Blocks.Math.Add add2
          annotation (Placement(transformation(extent={{-24,400},{-4,380}})));
        Modelica.Blocks.Sources.Constant const2(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-92,386},{-72,406}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData2(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-66,356},{-46,376}})));
        Modelica.Blocks.Math.Gain gain2(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-10,298},{2,310}})));
        Modelica.Blocks.Sources.Constant TAmb2(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-26,406},{-6,426}})));
        Modelica.Blocks.Sources.Constant TRadMea2(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{20,446},{40,466}})));
        Buildings.Fluid.Sources.Boundary_pT boundary2(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{14,346},{34,366}})));
        Components.PipeLumpedCap Mix04(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.4,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{40,346},{60,366}})));
        Components.EndUseGPM endUseGPM2(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{78,332},{94,348}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions3(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-70,-204},{-50,-184}})));
        Modelica.Blocks.Sources.RealExpression realExpression3(
                                                              y=time)
          annotation (Placement(transformation(extent={{-100,-204},{-80,-184}})));
        Modelica.Blocks.Math.Add add3
          annotation (Placement(transformation(extent={{-28,-130},{-8,-150}})));
        Modelica.Blocks.Sources.Constant const3(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-96,-144},{-76,-124}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData3(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-70,-174},{-50,-154}})));
        Modelica.Blocks.Math.Gain gain3(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-14,-232},{-2,-220}})));
        Modelica.Blocks.Sources.Constant TAmb3(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-30,-124},{-10,-104}})));
        Modelica.Blocks.Sources.Constant TRadMea3(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{16,-84},{36,-64}})));
        Buildings.Fluid.Sources.Boundary_pT boundary3(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{10,-184},{30,-164}})));
        Components.PipeLumpedCap Mix07(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.7,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{36,-184},{56,-164}})));
        Components.EndUseGPM endUseGPM3(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{74,-198},{90,-182}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions5(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-62,514},{-42,534}})));
        Modelica.Blocks.Sources.RealExpression realExpression5(
                                                              y=time)
          annotation (Placement(transformation(extent={{-92,514},{-72,534}})));
        Modelica.Blocks.Math.Add add5
          annotation (Placement(transformation(extent={{-20,588},{0,568}})));
        Modelica.Blocks.Sources.Constant const5(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-88,574},{-68,594}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData5(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-62,544},{-42,564}})));
        Modelica.Blocks.Math.Gain gain5(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-6,486},{6,498}})));
        Modelica.Blocks.Sources.Constant TAmb5(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-22,594},{-2,614}})));
        Modelica.Blocks.Sources.Constant TRadMea5(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{24,634},{44,654}})));
        Buildings.Fluid.Sources.Boundary_pT boundary5(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{18,534},{38,554}})));
        Components.PipeLumpedCap Mix03(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.3,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{44,534},{64,554}})));
        Components.EndUseGPM endUseGPM5(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{82,520},{98,536}})));
        Modelica.Blocks.Sources.Constant TAmb1(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-24,234},{-4,254}})));
        Modelica.Blocks.Sources.Constant TRadMea1(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{22,274},{42,294}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions4(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-74,670},{-54,690}})));
        Modelica.Blocks.Sources.RealExpression realExpression4(
                                                              y=time)
          annotation (Placement(transformation(extent={{-104,670},{-84,690}})));
        Modelica.Blocks.Math.Add add4
          annotation (Placement(transformation(extent={{-32,744},{-12,724}})));
        Modelica.Blocks.Sources.Constant const4(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-100,730},{-80,750}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData4(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-74,700},{-54,720}})));
        Modelica.Blocks.Math.Gain gain4(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-18,642},{-6,654}})));
        Modelica.Blocks.Sources.Constant TAmb4(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-34,750},{-14,770}})));
        Modelica.Blocks.Sources.Constant TRadMea4(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{12,790},{32,810}})));
        Buildings.Fluid.Sources.Boundary_pT boundary4(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{6,690},{26,710}})));
        Components.PipeLumpedCap Mix02(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.2,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{32,690},{52,710}})));
        Components.EndUseGPM endUseGPM4(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{70,676},{86,692}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions6(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-70,848},{-50,868}})));
        Modelica.Blocks.Sources.RealExpression realExpression6(
                                                              y=time)
          annotation (Placement(transformation(extent={{-100,848},{-80,868}})));
        Modelica.Blocks.Math.Add add6
          annotation (Placement(transformation(extent={{-28,922},{-8,902}})));
        Modelica.Blocks.Sources.Constant const6(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-96,908},{-76,928}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData6(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-70,878},{-50,898}})));
        Modelica.Blocks.Math.Gain gain6(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-14,820},{-2,832}})));
        Modelica.Blocks.Sources.Constant TAmb6(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-30,928},{-10,948}})));
        Modelica.Blocks.Sources.Constant TRadMea6(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{16,968},{36,988}})));
        Buildings.Fluid.Sources.Boundary_pT boundary6(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{10,868},{30,888}})));
        Components.PipeLumpedCap Mix01(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.1,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{36,868},{56,888}})));
        Components.EndUseGPM endUseGPM6(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{74,854},{90,870}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions7(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-64,1042},{-44,1062}})));
        Modelica.Blocks.Sources.RealExpression realExpression7(
                                                              y=time)
          annotation (Placement(transformation(extent={{-94,1042},{-74,1062}})));
        Modelica.Blocks.Math.Add add7
          annotation (Placement(transformation(extent={{-22,1116},{-2,1096}})));
        Modelica.Blocks.Sources.Constant const7(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-90,1102},{-70,1122}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData7(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-64,1072},{-44,1092}})));
        Modelica.Blocks.Math.Gain gain7(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-8,1014},{4,1026}})));
        Modelica.Blocks.Sources.Constant TAmb7(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-24,1122},{-4,1142}})));
        Modelica.Blocks.Sources.Constant TRadMea7(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{22,1162},{42,1182}})));
        Buildings.Fluid.Sources.Boundary_pT boundary7(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{16,1062},{36,1082}})));
        Components.PipeLumpedCap Mix0(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{42,1062},{62,1082}})));
        Components.EndUseGPM endUseGPM7(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{80,1048},{96,1064}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions8(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-70,-384},{-50,-364}})));
        Modelica.Blocks.Sources.RealExpression realExpression8(
                                                              y=time)
          annotation (Placement(transformation(extent={{-100,-384},{-80,-364}})));
        Modelica.Blocks.Math.Add add8
          annotation (Placement(transformation(extent={{-28,-310},{-8,-330}})));
        Modelica.Blocks.Sources.Constant const8(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-96,-324},{-76,-304}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData8(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-70,-354},{-50,-334}})));
        Modelica.Blocks.Math.Gain gain8(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-14,-412},{-2,-400}})));
        Modelica.Blocks.Sources.Constant TAmb8(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-30,-304},{-10,-284}})));
        Modelica.Blocks.Sources.Constant TRadMea8(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{16,-264},{36,-244}})));
        Buildings.Fluid.Sources.Boundary_pT boundary8(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{10,-364},{30,-344}})));
        Components.PipeLumpedCap Mix08(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.8,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{36,-364},{56,-344}})));
        Components.EndUseGPM endUseGPM8(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{74,-378},{90,-362}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions9(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-68,-564},{-48,-544}})));
        Modelica.Blocks.Sources.RealExpression realExpression9(
                                                              y=time)
          annotation (Placement(transformation(extent={{-98,-564},{-78,-544}})));
        Modelica.Blocks.Math.Add add9
          annotation (Placement(transformation(extent={{-26,-490},{-6,-510}})));
        Modelica.Blocks.Sources.Constant const9(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-94,-504},{-74,-484}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData9(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-68,-534},{-48,-514}})));
        Modelica.Blocks.Math.Gain gain9(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-12,-592},{0,-580}})));
        Modelica.Blocks.Sources.Constant TAmb9(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-28,-484},{-8,-464}})));
        Modelica.Blocks.Sources.Constant TRadMea9(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{18,-444},{38,-424}})));
        Buildings.Fluid.Sources.Boundary_pT boundary9(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{12,-544},{32,-524}})));
        Components.PipeLumpedCap Mix09(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=0.9,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{38,-544},{58,-524}})));
        Components.EndUseGPM endUseGPM9(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{76,-558},{92,-542}})));
        Modelica.Blocks.Tables.CombiTable1Ds InletConditions10(
          tableOnFile=true,
          columns=2:3,
          tableName="Data",
          fileName="/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1Test1.txt")
          "Provides the hot water draw mass flow rate (Col 2) and inlet water temperature (Col 3)"
          annotation (Placement(transformation(extent={{-62,-750},{-42,-730}})));
        Modelica.Blocks.Sources.RealExpression realExpression10(
                                                              y=time)
          annotation (Placement(transformation(extent={{-92,-750},{-72,-730}})));
        Modelica.Blocks.Math.Add add10
          annotation (Placement(transformation(extent={{-20,-676},{0,-696}})));
        Modelica.Blocks.Sources.Constant const10(
                                               k=273.15)
          annotation (Placement(transformation(extent={{-88,-690},{-68,-670}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData10(
          tableOnFile=true,
          tableName="Data",
          columns=2:10,
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/ExperimentalData/DistributionSystem/34CuR47GPM1ValidationData.txt")
          annotation (Placement(transformation(extent={{-62,-720},{-42,-700}})));
        Modelica.Blocks.Math.Gain gain10(
                                       k=0.063090197)
          annotation (Placement(transformation(extent={{-6,-778},{6,-766}})));
        Modelica.Blocks.Sources.Constant TAmb10(
                                              k=273.15 + 20)
          annotation (Placement(transformation(extent={{-22,-670},{-2,-650}})));
        Modelica.Blocks.Sources.Constant TRadMea10(
                                                 k=273.15 + 20)
          annotation (Placement(transformation(extent={{24,-630},{44,-610}})));
        Buildings.Fluid.Sources.Boundary_pT boundary10(
                                                     use_T_in=true,
          nPorts=1,
          redeclare package Medium = Water,
          p=150000)
          annotation (Placement(transformation(extent={{18,-730},{38,-710}})));
        Components.PipeLumpedCap Mix1(
          redeclare package Medium = Water,
          c_p_pip=390,
          rho_pip=8960,
          diameter_o=0.022225,
          til=0,
          m_flow_nominal=0.063,
          ePipe=0.95,
          nSeg=46,
          diameter_i=0.0205994,
          useMultipleHeatPorts=false,
          thicknessIns=0.012,
          lambdaIns=0.05,
          dp_nominal=0,
          length=30,
          MixCoef=1,
          T_Initial={281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,281.17,
              281.17,281.17})
          annotation (Placement(transformation(extent={{44,-730},{64,-710}})));
        Components.EndUseGPM endUseGPM10(
                                       redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{82,-744},{98,-728}})));
      equation
        connect(realExpression.y,InletConditions. u)
                                                   annotation (Line(
            points={{-75,-24},{-68,-24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions.y[2], add.u1) annotation (Line(
            points={{-45,-24},{-32,-24},{-32,24},{-26,24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const.y, add.u2) annotation (Line(
            points={{-71,36},{-26,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, ValidationData.u) annotation (Line(
            points={{-75,-24},{-74,-24},{-74,6},{-68,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions.y[1], gain.u) annotation (Line(
            points={{-45,-24},{-32,-24},{-32,-56},{-11.2,-56}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary.ports[1], Mix06.port_a)
                                               annotation (Line(
            points={{34,-4},{40,-4}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add.y, boundary.T_in) annotation (Line(
            points={{-3,30},{6,30},{6,0},{12,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix06.port_b, endUseGPM.Inlet)
                                             annotation (Line(
            points={{60,-4},{70,-4},{70,-20},{78,-20}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb.y, Mix06.TAmb)
                                  annotation (Line(
            points={{-5,56},{44,56},{44,3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions.y[1], endUseGPM.watFlo) annotation (Line(
            points={{-45,-24},{76.4,-24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea.y, Mix06.TRadMea)
                                        annotation (Line(
            points={{41,96},{56,96},{56,3}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, InletConditions1.u)
                                                   annotation (Line(
            points={{-77,160},{-70,160}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions1.y[2], add1.u1)
                                              annotation (Line(
            points={{-47,160},{-34,160},{-34,208},{-28,208}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, add1.u2)
                                 annotation (Line(
            points={{-73,220},{-28,220}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, ValidationData1.u)
                                                    annotation (Line(
            points={{-77,160},{-76,160},{-76,190},{-70,190}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions1.y[1], gain1.u)
                                              annotation (Line(
            points={{-47,160},{-34,160},{-34,128},{-13.2,128}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary1.ports[1], Mix05.port_a)
                                               annotation (Line(
            points={{32,180},{38,180}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add1.y, boundary1.T_in)
                                      annotation (Line(
            points={{-5,214},{4,214},{4,184},{10,184}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix05.port_b, endUseGPM1.Inlet)
                                             annotation (Line(
            points={{58,180},{68,180},{68,164},{76,164}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(InletConditions1.y[1], endUseGPM1.watFlo)
                                                        annotation (Line(
            points={{-47,160},{74.4,160}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression2.y, InletConditions2.u)
                                                   annotation (Line(
            points={{-75,336},{-68,336}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions2.y[2], add2.u1)
                                              annotation (Line(
            points={{-45,336},{-32,336},{-32,384},{-26,384}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const2.y, add2.u2)
                                 annotation (Line(
            points={{-71,396},{-26,396}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression2.y, ValidationData2.u)
                                                    annotation (Line(
            points={{-75,336},{-74,336},{-74,366},{-68,366}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions2.y[1], gain2.u)
                                              annotation (Line(
            points={{-45,336},{-32,336},{-32,304},{-11.2,304}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary2.ports[1], Mix04.port_a)
                                               annotation (Line(
            points={{34,356},{40,356}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add2.y, boundary2.T_in)
                                      annotation (Line(
            points={{-3,390},{6,390},{6,360},{12,360}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix04.port_b, endUseGPM2.Inlet)
                                             annotation (Line(
            points={{60,356},{70,356},{70,340},{78,340}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb2.y, Mix04.TAmb)
                                  annotation (Line(
            points={{-5,416},{44,416},{44,363}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions2.y[1], endUseGPM2.watFlo)
                                                        annotation (Line(
            points={{-45,336},{76.4,336}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea2.y, Mix04.TRadMea)
                                        annotation (Line(
            points={{41,456},{56,456},{56,363}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression3.y, InletConditions3.u)
                                                   annotation (Line(
            points={{-79,-194},{-72,-194}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions3.y[2], add3.u1)
                                              annotation (Line(
            points={{-49,-194},{-36,-194},{-36,-146},{-30,-146}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const3.y, add3.u2)
                                 annotation (Line(
            points={{-75,-134},{-30,-134}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression3.y, ValidationData3.u)
                                                    annotation (Line(
            points={{-79,-194},{-78,-194},{-78,-164},{-72,-164}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions3.y[1], gain3.u)
                                              annotation (Line(
            points={{-49,-194},{-36,-194},{-36,-226},{-15.2,-226}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary3.ports[1], Mix07.port_a)
                                               annotation (Line(
            points={{30,-174},{36,-174}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add3.y, boundary3.T_in)
                                      annotation (Line(
            points={{-7,-140},{2,-140},{2,-170},{8,-170}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix07.port_b, endUseGPM3.Inlet)
                                             annotation (Line(
            points={{56,-174},{66,-174},{66,-190},{74,-190}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb3.y, Mix07.TAmb)
                                  annotation (Line(
            points={{-9,-114},{40,-114},{40,-167}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions3.y[1], endUseGPM3.watFlo)
                                                        annotation (Line(
            points={{-49,-194},{72.4,-194}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea3.y, Mix07.TRadMea)
                                        annotation (Line(
            points={{37,-74},{52,-74},{52,-167}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression5.y, InletConditions5.u)
                                                   annotation (Line(
            points={{-71,524},{-64,524}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions5.y[2], add5.u1)
                                              annotation (Line(
            points={{-41,524},{-28,524},{-28,572},{-22,572}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const5.y, add5.u2)
                                 annotation (Line(
            points={{-67,584},{-22,584}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression5.y, ValidationData5.u)
                                                    annotation (Line(
            points={{-71,524},{-70,524},{-70,554},{-64,554}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions5.y[1], gain5.u)
                                              annotation (Line(
            points={{-41,524},{-28,524},{-28,492},{-7.2,492}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary5.ports[1], Mix03.port_a)
                                               annotation (Line(
            points={{38,544},{44,544}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add5.y, boundary5.T_in)
                                      annotation (Line(
            points={{1,578},{10,578},{10,548},{16,548}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix03.port_b, endUseGPM5.Inlet)
                                             annotation (Line(
            points={{64,544},{74,544},{74,528},{82,528}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb5.y, Mix03.TAmb)
                                  annotation (Line(
            points={{-1,604},{48,604},{48,551}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions5.y[1], endUseGPM5.watFlo)
                                                        annotation (Line(
            points={{-41,524},{80.4,524}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea5.y, Mix03.TRadMea)
                                        annotation (Line(
            points={{45,644},{60,644},{60,551}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb1.y, Mix05.TAmb) annotation (Line(
            points={{-3,244},{42,244},{42,187}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea1.y, Mix05.TRadMea) annotation (Line(
            points={{43,284},{54,284},{54,187}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression4.y, InletConditions4.u)
                                                   annotation (Line(
            points={{-83,680},{-76,680}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions4.y[2], add4.u1)
                                              annotation (Line(
            points={{-53,680},{-40,680},{-40,728},{-34,728}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const4.y, add4.u2)
                                 annotation (Line(
            points={{-79,740},{-34,740}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression4.y, ValidationData4.u)
                                                    annotation (Line(
            points={{-83,680},{-82,680},{-82,710},{-76,710}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions4.y[1], gain4.u)
                                              annotation (Line(
            points={{-53,680},{-40,680},{-40,648},{-19.2,648}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary4.ports[1], Mix02.port_a)
                                               annotation (Line(
            points={{26,700},{32,700}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add4.y, boundary4.T_in)
                                      annotation (Line(
            points={{-11,734},{-2,734},{-2,704},{4,704}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix02.port_b, endUseGPM4.Inlet)
                                             annotation (Line(
            points={{52,700},{62,700},{62,684},{70,684}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb4.y, Mix02.TAmb)
                                  annotation (Line(
            points={{-13,760},{36,760},{36,707}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions4.y[1], endUseGPM4.watFlo)
                                                        annotation (Line(
            points={{-53,680},{68.4,680}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea4.y, Mix02.TRadMea)
                                        annotation (Line(
            points={{33,800},{48,800},{48,707}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression6.y, InletConditions6.u)
                                                   annotation (Line(
            points={{-79,858},{-72,858}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions6.y[2], add6.u1)
                                              annotation (Line(
            points={{-49,858},{-36,858},{-36,906},{-30,906}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const6.y, add6.u2)
                                 annotation (Line(
            points={{-75,918},{-30,918}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression6.y, ValidationData6.u)
                                                    annotation (Line(
            points={{-79,858},{-78,858},{-78,888},{-72,888}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions6.y[1], gain6.u)
                                              annotation (Line(
            points={{-49,858},{-36,858},{-36,826},{-15.2,826}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary6.ports[1], Mix01.port_a)
                                               annotation (Line(
            points={{30,878},{36,878}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add6.y, boundary6.T_in)
                                      annotation (Line(
            points={{-7,912},{2,912},{2,882},{8,882}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix01.port_b, endUseGPM6.Inlet)
                                             annotation (Line(
            points={{56,878},{66,878},{66,862},{74,862}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb6.y, Mix01.TAmb)
                                  annotation (Line(
            points={{-9,938},{40,938},{40,885}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions6.y[1], endUseGPM6.watFlo)
                                                        annotation (Line(
            points={{-49,858},{72.4,858}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea6.y, Mix01.TRadMea)
                                        annotation (Line(
            points={{37,978},{52,978},{52,885}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression7.y, InletConditions7.u)
                                                   annotation (Line(
            points={{-73,1052},{-66,1052}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions7.y[2], add7.u1)
                                              annotation (Line(
            points={{-43,1052},{-30,1052},{-30,1100},{-24,1100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const7.y, add7.u2)
                                 annotation (Line(
            points={{-69,1112},{-24,1112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression7.y, ValidationData7.u)
                                                    annotation (Line(
            points={{-73,1052},{-72,1052},{-72,1082},{-66,1082}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions7.y[1], gain7.u)
                                              annotation (Line(
            points={{-43,1052},{-30,1052},{-30,1020},{-9.2,1020}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary7.ports[1], Mix0.port_a)
                                               annotation (Line(
            points={{36,1072},{42,1072}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add7.y, boundary7.T_in)
                                      annotation (Line(
            points={{-1,1106},{8,1106},{8,1076},{14,1076}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix0.port_b, endUseGPM7.Inlet)
                                             annotation (Line(
            points={{62,1072},{72,1072},{72,1056},{80,1056}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb7.y, Mix0.TAmb)
                                  annotation (Line(
            points={{-3,1132},{46,1132},{46,1079}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions7.y[1], endUseGPM7.watFlo)
                                                        annotation (Line(
            points={{-43,1052},{78.4,1052}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea7.y, Mix0.TRadMea)
                                        annotation (Line(
            points={{43,1172},{58,1172},{58,1079}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression8.y, InletConditions8.u)
                                                   annotation (Line(
            points={{-79,-374},{-72,-374}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions8.y[2], add8.u1)
                                              annotation (Line(
            points={{-49,-374},{-36,-374},{-36,-326},{-30,-326}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const8.y, add8.u2)
                                 annotation (Line(
            points={{-75,-314},{-30,-314}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression8.y, ValidationData8.u)
                                                    annotation (Line(
            points={{-79,-374},{-78,-374},{-78,-344},{-72,-344}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions8.y[1], gain8.u)
                                              annotation (Line(
            points={{-49,-374},{-36,-374},{-36,-406},{-15.2,-406}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary8.ports[1], Mix08.port_a)
                                               annotation (Line(
            points={{30,-354},{36,-354}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add8.y, boundary8.T_in)
                                      annotation (Line(
            points={{-7,-320},{2,-320},{2,-350},{8,-350}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix08.port_b, endUseGPM8.Inlet)
                                             annotation (Line(
            points={{56,-354},{66,-354},{66,-370},{74,-370}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb8.y, Mix08.TAmb)
                                  annotation (Line(
            points={{-9,-294},{40,-294},{40,-347}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions8.y[1], endUseGPM8.watFlo)
                                                        annotation (Line(
            points={{-49,-374},{72.4,-374}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea8.y, Mix08.TRadMea)
                                        annotation (Line(
            points={{37,-254},{52,-254},{52,-347}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression9.y, InletConditions9.u)
                                                   annotation (Line(
            points={{-77,-554},{-70,-554}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions9.y[2], add9.u1)
                                              annotation (Line(
            points={{-47,-554},{-34,-554},{-34,-506},{-28,-506}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const9.y, add9.u2)
                                 annotation (Line(
            points={{-73,-494},{-28,-494}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression9.y, ValidationData9.u)
                                                    annotation (Line(
            points={{-77,-554},{-76,-554},{-76,-524},{-70,-524}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions9.y[1], gain9.u)
                                              annotation (Line(
            points={{-47,-554},{-34,-554},{-34,-586},{-13.2,-586}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary9.ports[1], Mix09.port_a)
                                               annotation (Line(
            points={{32,-534},{38,-534}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add9.y, boundary9.T_in)
                                      annotation (Line(
            points={{-5,-500},{4,-500},{4,-530},{10,-530}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix09.port_b, endUseGPM9.Inlet)
                                             annotation (Line(
            points={{58,-534},{68,-534},{68,-550},{76,-550}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb9.y, Mix09.TAmb)
                                  annotation (Line(
            points={{-7,-474},{42,-474},{42,-527}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions9.y[1], endUseGPM9.watFlo)
                                                        annotation (Line(
            points={{-47,-554},{74.4,-554}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea9.y, Mix09.TRadMea)
                                        annotation (Line(
            points={{39,-434},{54,-434},{54,-527}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression10.y, InletConditions10.u)
                                                   annotation (Line(
            points={{-71,-740},{-64,-740}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions10.y[2], add10.u1)
                                              annotation (Line(
            points={{-41,-740},{-28,-740},{-28,-692},{-22,-692}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const10.y, add10.u2)
                                 annotation (Line(
            points={{-67,-680},{-22,-680}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression10.y, ValidationData10.u)
                                                    annotation (Line(
            points={{-71,-740},{-70,-740},{-70,-710},{-64,-710}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions10.y[1], gain10.u)
                                              annotation (Line(
            points={{-41,-740},{-28,-740},{-28,-772},{-7.2,-772}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary10.ports[1], Mix1.port_a)
                                               annotation (Line(
            points={{38,-720},{44,-720}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(add10.y, boundary10.T_in)
                                      annotation (Line(
            points={{1,-686},{10,-686},{10,-716},{16,-716}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Mix1.port_b, endUseGPM10.Inlet)
                                             annotation (Line(
            points={{64,-720},{74,-720},{74,-736},{82,-736}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb10.y, Mix1.TAmb)
                                  annotation (Line(
            points={{-1,-660},{48,-660},{48,-713}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletConditions10.y[1], endUseGPM10.watFlo)
                                                        annotation (Line(
            points={{-41,-740},{80.4,-740}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea10.y, Mix1.TRadMea)
                                        annotation (Line(
            points={{45,-620},{60,-620},{60,-713}},
            color={0,0,127},
            smooth=Smooth.None));
      annotation (
      Documentation(info="<html>
<p>
This model is designed to match Carl Hiller's test lab. It is intended to be the same as the 3/4 in dia pipe setup.
</p>
<p>
Some useful numbers and facts:
</p>
<ul>
<li>
The 3/4 in dia pipe test has four straight sections of 20 ft, with elbows and shorties creating U-bends in between. Total length is 86 ft (26.2128 m).
</li>
<li>
There are two options for insulation - 1/2 in and 3/4 in. 1/2 in = 0.0127 m. 3/4 in = 0.01905 m.
</li>
<li>
The insulation used in Carl Hiller's test lab has a conductivity of 0.02 Btu/hr-Ft-F (0.036 W/hr-m-K).
</li>
</ul>
</html>"),   Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -1000},{100,1500}}),
                                     graphics),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-1000},
                  {100,1500}})));
      end thrQuaInR47Validation;
    end ValidationModels;
    annotation ();
  end HWDis;

  package Hybrid "Provides models for hybrid water heaters"
    model HybridWH
      "Provides a model of a hybrid water heater. Based on the A.O. Smith NEXT"
      parameter Real RecircFlow = 0.12 "Flow rate of the recirculation loop";
      parameter Real EffSys = 0.85 "Efficiency of the hybrid water heater";
      parameter Real EffTankless = 0.8
        "Efficiency of the tankless water heater";
      parameter Real QElePum = 50
        "Electric draw of the cricrulation pump when in use";
      parameter Integer nSegTank = 8 "Number of segments in the storage tank";
      parameter Integer nSegTankless = 4
        "Number of segments in the tankless heater";
      parameter Real TIniTank[nSegTank] = {273.105 + 52, 273.105 + 52,273.105 + 52, 273.105 + 52,273.105 + 52, 273.105 + 52,273.105 + 52, 273.105 + 52}
        "Initial temperatures of segments in the storage tank";
      parameter Integer TStatHeight = 7
        "Segment of the storage tank in which the thermostat is located";
      parameter Real TSetTank = 273.105 + 52 "Setpoint of the storage tank";
      parameter Real Deadband = 12
        "Total width of the deadband on the thermostat";
      parameter Integer RecircOutSeg = 8
        "Segment from which water leaves the tank in the recirculation loop";
      parameter Integer RecircInSeg = 1
        "Segment into which water enters the tank in the reciculation loop";
      parameter Real UATank = 30 "UA value of the storage tank";
      parameter Real CTankless = 18138.9 "Capacitance of the tankless heater";
      parameter Real UATankless = 13.6521 "UA value for the tankless heater";
      parameter Real TSetTankless = 60 "Set temperature of the tankless unit";
      parameter Real EffPilot = 0.8 "Efficiency of the pilot light";
      parameter Real QDotPilot = 0 "Heat consumption rate of pilot light";
      parameter Real QDotMax = 29307 "Heat consumption at maximum capacity";
      parameter Real EnergyDensityGas = 13500
        "Energy density of the gas being burned";
      parameter Real QDotMin = 5275 "Minimum heat rate of the tankless heater";
      parameter Real tshort = 1.5
        "Tankless start delay with a short time between draws";
      parameter Real tlong = 3
        "Tankless start delay with a long time between draws";
        parameter Real tswitch = 30 "Delay length before using tlong";
      parameter Real QActTankless = 50
        "Electric draw of the tankless unit when the fan is active";
      parameter Real QIdlTankless = 15
        "Electric draw of the tankless unit when the fan is inactive";
      parameter Real QMinDea(unit="W") = 5000
        "Deadband for the minimum heat rate control";
      package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
      parameter Real VTan(unit = "m^3") = 0.15 "Volume of the tank";
      HeatersUsed.HybridTankless hybridTankless(SteadyStateEff_input=EffTankless,
          nNode_input=nSegTankless,
        Capacitance_input=CTankless,
        UA_input=UATankless,
        T_Set_input=TSetTankless,
        EffPilot_input=EffPilot,
        Qdot_Pilot_input=QDotPilot,
        Qdot_Rated_input=QDotMax,
        EnergyDensityGas_input=EnergyDensityGas,
        t_short=tshort,
        t_long=tlong,
        t_switch=tswitch,
        QAct=QActTankless,
        QIdl=QIdlTankless,
        Qdot_min_input=QDotMin,
        QMinDea=QMinDea)
        annotation (Placement(transformation(extent={{-64,-8},{-44,16}})));
      HeatersUsed.SimplifiedStorageTank tan(
        nSeg=nSegTank,
        redeclare package Medium = Water,
        T_Initial=TIniTank,
        TStatHeight=TStatHeight,
        TSet=TSetTank,
        RecircOutSeg=RecircOutSeg,
        RecircInSeg=RecircInSeg,
        Deadband=Deadband,
        UA=UATank,
        EffTan=(EffSys - EffTankless)/(1 - EffTankless),
        VTan=VTan)
        annotation (Placement(transformation(extent={{-16,-34},{90,50}})));
      Modelica.Blocks.Interfaces.RealInput TIn
        annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      Modelica.Blocks.Interfaces.RealInput mFloIn[nSegTank]
        annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
      HeatersUsed.EditedBaseClasses.Pump pump(RecircFlow=RecircFlow) annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-8,-48})));
      Modelica.Blocks.Interfaces.RealInput PowerSignal
        annotation (Placement(transformation(extent={{-140,-28},{-100,12}})));
      Modelica.Blocks.Interfaces.RealInput TAmb
        annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
      Modelica.Blocks.Interfaces.RealOutput TOutDra
        annotation (Placement(transformation(extent={{100,-16},{120,4}})));
      Modelica.Blocks.Math.Add add
        annotation (Placement(transformation(extent={{54,-82},{74,-62}})));
      Modelica.Blocks.Interfaces.RealOutput QEle
        annotation (Placement(transformation(extent={{100,-82},{120,-62}})));
    equation
      connect(TIn, tan.TIn) annotation (Line(
          points={{-120,80},{46,80},{46,52.2537}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(mFloIn, tan.m_flow_in) annotation (Line(
          points={{-120,50},{-54,50},{-54,50.4098},{11.8,50.4098}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tan.TStatSig, pump.TStatSig) annotation (Line(
          points={{92.6,-18.0195},{100,-18.0195},{100,-48},{4,-48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pump.CircFlow, hybridTankless.DemandFlowRate) annotation (Line(
          points={{-19,-48},{-80,-48},{-80,0.64},{-66,0.64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(PowerSignal, hybridTankless.pwrSig) annotation (Line(
          points={{-120,-8},{-93,-8},{-93,-7.04},{-66,-7.04}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb, hybridTankless.AmbientTemperature) annotation (Line(
          points={{-120,20},{-78,20},{-78,14.08},{-66,14.08}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(hybridTankless.T_Out, tan.TInRec) annotation (Line(
          points={{-43,7.552},{-32,7.552},{-32,-16.7902},{-18.4,-16.7902}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pump.CircFlow, tan.mFloRec) annotation (Line(
          points={{-19,-48},{-32,-48},{-32,-3.26829},{-18.2,-3.26829}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(hybridTankless.QDotFlu, tan.QFluIn) annotation (Line(
          points={{-43,10.432},{-30,10.432},{-30,39.7561},{-19.6,39.7561}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb, tan.TAmb) annotation (Line(
          points={{-120,20},{-82,20},{-82,25.3122},{-20.1,25.3122}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tan.TOutDra, TOutDra) annotation (Line(
          points={{93,-5.93171},{98.5,-5.93171},{98.5,-6},{110,-6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pump.QPum, add.u1) annotation (Line(
          points={{-19,-52},{-24,-52},{-24,-66},{52,-66}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(hybridTankless.QEle, add.u2) annotation (Line(
          points={{-43,-3.968},{-38,-3.968},{-38,-78},{52,-78}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(add.y, QEle) annotation (Line(
          points={{75,-72},{110,-72}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(hybridTankless.InletTemperature, tan.TOutRec) annotation (Line(
          points={{-66,7.168},{-76,7.168},{-76,8},{-82,8},{-82,84},{98,84},{98,
              29.5122},{92.6,29.5122}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-150},
                {100,150}}),graphics), Diagram(coordinateSystem(preserveAspectRatio=true,
              extent={{-100,-150},{100,150}}),graphics),
              Documentation(info="<html>
          <p>
          Currently lacking data for validation
          </p>
          </html>",
              revisions="<html>
          <ul>
          <li>
          Mar 29, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
    end HybridWH;

    package HeatersUsed
      "Provides a package of heaters from other libraries which can be used"
      model SimplifiedStorageTank "model of a gas water heater without burner"
        import SI = Modelica.SIunits;
        import WaterHeaterLib;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Medium in the component" annotation (choicesAllMatching=true);
        //   replaceable package MediumB = Modelica.Media.Interfaces.PartialMedium
        //     "Medium in the component" annotation (choicesAllMatching=true);
        parameter Modelica.SIunits.Temperature T_Initial[nSeg] = {273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20};
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
              Medium.p_default,
              Medium.T_default,
              Medium.X_default));
        parameter Integer nSeg(min=2) = 8 "Number of volume segments";
        ////////////////////////////////////////////////////////////////////
        //   // Assumptions
        // Initialization
        parameter Medium.AbsolutePressure p_start=Medium.p_default
          "Start value of pressure" annotation (Dialog(tab="Initialization"));
      //    parameter Medium.Temperature T_start =60+273.15 "Start value of temperature"
      //                                   annotation (Dialog(tab="Initialization"));
      //  Modelica.SIunits.Temperature T_start;
        parameter Medium.MassFraction X_start[Medium.nX]=Medium.X_default
          "Start value of mass fractions m_i/m"
          annotation (Dialog(tab="Initialization", enable=Medium.nXi > 0));
        parameter Medium.ExtraProperty C_start[Medium.nC](quantity=Medium.extraPropertiesNames)=
             fill(0, Medium.nC) "Start value of trace substances"
          annotation (Dialog(tab="Initialization", enable=Medium.nC > 0));
        parameter Integer TStatHeight = 7
          "Segment the thermostat is located in";
        parameter Real TSet = 273.105 + 52 "Setpoint";
        parameter Integer RecircOutSeg
          "Outlet segment in the recirculation loop";
        parameter Integer RecircInSeg "Inlet segment in the recirculation loop";
        parameter Real Deadband
          "The total width of the deadband on the thermostat";
        parameter Real UA "The UA value of the storage tank";
        parameter Real EffTan = 0.25
          "Heat exhange effectiveness of the storage tank";
        parameter Real VTan = 0.15 "Volume of the tank";
        ////////////////////////////////////////////////////////////////////
        Buildings.Fluid.MixingVolumes.MixingVolume[nSeg] vol(
          redeclare each package Medium = Medium,
          each p_start=p_start,
          T_start=T_Initial[nSeg],
          each X_start=X_start,
          each C_start=C_start,
          each V=VTan/nSeg,
          nPorts=1,
          m_flow_nominal=0.001) "Tank segment"               annotation (Placement(
              transformation(
              extent={{-22,-22},{22,22}},
              rotation=90,
              origin={82,42})));
        Modelica.Blocks.Interfaces.RealVectorInput m_flow_in[nSeg] annotation (
            Placement(transformation(extent={{-178,444},{-138,484}}),
              iconTransformation(extent={{-162,444},{-122,484}})));
        EditedBaseClasses.HyDra              draHeaTra(
          nSeg=nSeg,
          redeclare package Medium = Medium)
          "Calculates the heat transfer in each segment caused by a hot water draw"
                                                                        annotation (
            Placement(transformation(
              extent={{-23,-23},{23,23}},
              rotation=-90,
              origin={-141,371})));
        Modelica.Blocks.Sources.RealExpression draHea[nSeg](y=-draHeaTra.draHeaTra)
                                                            annotation (Placement(
              transformation(
              extent={{-28,-14},{28,14}},
              rotation=180,
              origin={170,-4})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow        prescribedHeatFlow1[
          nSeg] annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={104,-4})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temperatureSensor[
          nSeg] annotation (Placement(transformation(
              extent={{-17,-17},{17,17}},
              rotation=90,
              origin={-63,389})));
        Modelica.Fluid.Sources.FixedBoundary boundary[nSeg](
          nPorts=1,
          use_p=true,
          redeclare package Medium = Medium,
          p=347700) annotation (Placement(transformation(
              extent={{-21,-25},{21,25}},
              rotation=270,
              origin={131,97})));
        Modelica.Blocks.Interfaces.RealInput TIn
                                               annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={200,482})));
        Modelica.Blocks.Interfaces.IntegerOutput
                                              TStatSig
          annotation (Placement(transformation(extent={{640,-230},{692,-178}})));
        Modelica.Blocks.Interfaces.RealInput TInRec
          "Recirulation loop inlet temperature"
          annotation (Placement(transformation(extent={{-468,-216},{-420,-168}})));
        Modelica.Blocks.Interfaces.RealOutput TOutRec
          "Temperature out to the recirculation loop"
          annotation (Placement(transformation(extent={{640,234},{692,286}})));
        Modelica.Blocks.Interfaces.RealInput mFloRec "Recirculation flow rate"
          annotation (Placement(transformation(extent={{-462,-80},{-422,-40}})));
        EditedBaseClasses.cirHeaTra cirHeaTra(nSeg=nSeg,
          redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-238,-198},{-182,-142}})));
        Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=cirHeaTra.cirHeaTra)
          annotation (Placement(transformation(
              extent={{-30,-19},{30,19}},
              rotation=180,
              origin={168,-41})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow[nSeg]
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={104,-40})));
        Modelica.Blocks.Interfaces.RealInput QFluIn "Heat entering the flue"
          annotation (Placement(transformation(extent={{-492,324},{-420,396}})));
        EditedBaseClasses.fluHeaTra fluHeaTra(EffTan=EffTan, nSeg=nSeg)
          annotation (Placement(transformation(extent={{-332,336},{-284,384}})));
        Modelica.Blocks.Sources.RealExpression realExpression1[nSeg](y=fluHeaTra.fluHeaTra)
          annotation (Placement(transformation(
              extent={{-27,-16},{27,16}},
              rotation=180,
              origin={169,-80})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow2[nSeg]
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={104,-80})));
        EditedBaseClasses.UALoss uALoss(nSeg=nSeg, UA=UA)
          annotation (Placement(transformation(extent={{-314,204},{-270,248}})));
        Modelica.Blocks.Sources.RealExpression realExpression2[nSeg](y=-uALoss.UALoss)
          annotation (Placement(transformation(
              extent={{-24,-13},{24,13}},
              rotation=180,
              origin={168,-111})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow3[
          nSeg] annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={104,-110})));
        Modelica.Blocks.Interfaces.RealInput TAmb
          annotation (Placement(transformation(extent={{-502,178},{-420,260}})));
        Modelica.Blocks.Interfaces.RealOutput TOutDra
          "Temperature of water going to the draw"
          annotation (Placement(transformation(extent={{640,-116},{700,-56}})));
        Modelica.Blocks.Sources.RealExpression realExpression3(y=vol[TStatHeight].T)
          annotation (Placement(transformation(extent={{172,-274},{232,-214}})));
        Modelica.Blocks.Sources.Constant Setpoint(k=TSet)
          annotation (Placement(transformation(extent={{190,-184},{228,-146}})));
        Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=Deadband)
          annotation (Placement(transformation(extent={{314,-224},{358,-180}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger
          annotation (Placement(transformation(extent={{404,-226},{448,-182}})));
      equation
        TOutRec = vol[RecircOutSeg].T;
        TOutDra = vol[1].T;
        connect(m_flow_in, draHeaTra.mFloIn) annotation (Line(
            points={{-158,464},{-152.5,464},{-152.5,398.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(draHea.y, prescribedHeatFlow1.Q_flow) annotation (Line(
            points={{139.2,-4},{132.9,-4},{132.9,-4},{126.6,-4},{126.6,-4},{114,
                -4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(prescribedHeatFlow1.port, vol.heatPort) annotation (Line(
            points={{94,-4},{82,-4},{82,20}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(vol.heatPort, temperatureSensor.port) annotation (Line(
            points={{82,20},{-24,20},{-24,234},{-63,234},{-63,372}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(temperatureSensor.T, draHeaTra.TWat) annotation (Line(
            points={{-63,406},{-63,428},{-124.44,428},{-124.44,398.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(vol.ports[1], boundary.ports[1]) annotation (Line(
            points={{104,42},{131,42},{131,76}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(draHeaTra.TIn, TIn) annotation (Line(
            points={{-133.64,398.6},{-133.64,448},{200,448},{200,482}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRec, cirHeaTra.mFloCir) annotation (Line(
            points={{-442,-60},{-344,-60},{-344,-170},{-243.6,-170}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(temperatureSensor.T, cirHeaTra.TWat) annotation (Line(
            points={{-63,406},{-64,406},{-64,416},{-94,416},{-94,-78},{-278,-78},{-278,
                -147.6},{-243.6,-147.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRec, cirHeaTra.TRec) annotation (Line(
            points={{-444,-192},{-344,-192},{-344,-192.4},{-243.6,-192.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, prescribedHeatFlow.Q_flow) annotation (Line(
            points={{135,-41},{125.5,-41},{125.5,-40},{114,-40}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
            points={{94,-40},{82,-40},{82,20}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(QFluIn, fluHeaTra.QDotFlu) annotation (Line(
            points={{-456,360},{-336.8,360}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, prescribedHeatFlow2.Q_flow) annotation (Line(
            points={{139.3,-80},{114,-80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(prescribedHeatFlow2.port, vol.heatPort) annotation (Line(
            points={{94,-80},{82,-80},{82,20}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(temperatureSensor.T, uALoss.TWat) annotation (Line(
            points={{-63,406},{-64,406},{-64,418},{-92,418},{-92,274},{-340,274},
                {-340,234.8},{-318.4,234.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression2.y, prescribedHeatFlow3.Q_flow) annotation (Line(
            points={{141.6,-111},{129.8,-111},{129.8,-110},{114,-110}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(prescribedHeatFlow3.port, vol.heatPort) annotation (Line(
            points={{94,-110},{88,-110},{88,-108},{82,-108},{82,20}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(TAmb, uALoss.TAmb) annotation (Line(
            points={{-461,219},{-391.5,219},{-391.5,221.82},{-318.4,221.82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(onOffController.y, booleanToInteger.u) annotation (Line(
            points={{360.2,-202},{379.9,-202},{379.9,-204},{399.6,-204}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(booleanToInteger.y, TStatSig) annotation (Line(
            points={{450.2,-204},{666,-204}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(Setpoint.y, onOffController.reference) annotation (Line(
            points={{229.9,-165},{280,-165},{280,-188.8},{309.6,-188.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression3.y, onOffController.u) annotation (Line(
            points={{235,-244},{274,-244},{274,-215.2},{309.6,-215.2}},
            color={0,0,127},
            smooth=Smooth.None));
                                                                    annotation (
            Placement(transformation(extent={{322,444},{362,484}}),
              iconTransformation(extent={{322,444},{362,484}})),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-420,-360},
                  {640,460}}),graphics),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-420,-360},{640,
                  460}}), graphics={Bitmap(
                extent={{-336,514},{534,-360}},
                imageSource=
                    "",
                fileName="C:/Documents and Settings/user/Desktop/waterheater.jpg")}),
          defaultComponentName="tan",
          Documentation(info="<html>
<p>
This is a model of a water heater tank.
The tank uses several volumes to model the stratification.
Heat conduction is modeled between between the volumes and the ambient.
The port <code>heaPorVol</code> may be used to connect a temperature sensor
that measures the fluid temperature of an individual volume. It may also
be used to add heat to individual volumes.
</p>
<p>
The tank has <code>nSeg</code> fluid volumes. The top volume has the index <code>1</code>.
Thus, to add a heating element to the bottom element, connect a heat input to
<code>heaPorVol[nSeg]</code>.
</p>
<p>
The heat ports outside the tank insulation can be 
used to specify an ambient temperature.
Leave these ports unconnected to force adiabatic boundary conditions.
Note, however, that all heat conduction elements through the tank wall (but not the top and bottom) are connected to the 
heat port <code>heaPorSid</code>. Thus, not connecting
<code>heaPorSid</code> means an adiabatic boundary condition in the sense 
that <code>heaPorSid.Q_flow = 0</code>. This, however, still allows heat to flow
through the tank walls, modelled by <code>conWal</code>, from one fluid volume
to another one.
</p>
</html>",     revisions="<html>
<ul>
<li>
September 01, 2011 by Thierry S. Nouidui:<br>
First implementation.
</li>
</ul>
</html>"),Icon(graphics={Rectangle(
                  extent={{-40,60},{40,20}},
                  lineColor={255,0,0},
                  fillColor={255,0,0},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{-40,-20},{40,-60}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{-76,2},{-90,-2}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{0,84},{-80,80}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{-76,84},{-80,-2}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{82,0},{78,-86}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{0,84},{-4,60}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{82,-84},{2,-88}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{6,-60},{2,-84}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{92,2},{78,-2}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{-40,20},{40,-20}},
                  lineColor={255,0,0},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.CrossDiag),Text(
                  extent={{100,106},{134,74}},
                  lineColor={0,0,127},
                  textString="QLoss"),Rectangle(
                  extent={{-10,10},{10,-10}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.Sphere,
                  fillColor={255,255,255}),Rectangle(
                  extent={{50,68},{40,-66}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={255,255,0},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{-40,66},{-50,-68}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={255,255,0},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{-48,68},{50,60}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={255,255,0},
                  fillPattern=FillPattern.Solid),Rectangle(
                  extent={{-48,-60},{50,-68}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={255,255,0},
                  fillPattern=FillPattern.Solid),Line(
                  points={{26,72},{102,72},{100,72}},
                  color={127,0,0},
                  pattern=LinePattern.Dot),Line(
                  points={{56,6},{56,72},{58,72}},
                  color={127,0,0},
                  pattern=LinePattern.Dot),Line(
                  points={{22,-74},{70,-74},{70,72}},
                  color={127,0,0},
                  pattern=LinePattern.Dot)}),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics));
      end SimplifiedStorageTank;

      model HybridTankless
        EditedBaseClasses.HybridTanklessHX               HeatExchanger(
          ConductionCoefficient=0.000001,
          Capacitance=Capacitance_input,
          SteadyStateEff=SteadyStateEff_input,
          UA=UA_input,
          T_Set=T_Set_input,
          nNode=nNode_input,
          EffPilot=EffPilot_input,
          Qdot_Pilot=Qdot_Pilot_input,
          Qdot_Rated=Qdot_Rated_input,
          SpecificHeat=SpecificHeat_input,
          EnergyDensityGas=EnergyDensityGas_input)
          annotation (Placement(transformation(extent={{-26,-20},{24,42}})));
        EditedBaseClasses.NonModulating                                   nonCondensingTanklessHXController(
          mdot_min_cons=mdot_min_input,
          SpecificHeat_cons=SpecificHeat_input,
          SteadyStateEff_cons=SteadyStateEff_input,
          T_Set_cons=T_Set_input,
          Qdot_min_cons=Qdot_min_input,
          QMinDea=QMinDea)
          "A controller intended to mimic the control logic used in non-condensing tankless water heaters. Includes logic to avoid firing when the flow rate is too low or the require heat rate is too low. Also includes logic to reduce the flow rate when the required heat rate surpasses the heaters maximum heat rate"
          annotation (Placement(transformation(extent={{0,-112},{20,-92}})));
        Modelica.Blocks.Interfaces.RealInput DemandFlowRate
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput AmbientTemperature
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput InletTemperature
          annotation (Placement(transformation(extent={{-140,-12},{-100,28}})));
        Modelica.Blocks.Interfaces.RealInput pwrSig
          annotation (Placement(transformation(extent={{-140,-160},{-100,-120}})));
        parameter Real Capacitance_input = 18138.9;
        parameter Real SteadyStateEff_input=0.83;
        parameter Real UA_input=13.6521;
        parameter Real T_Set_input = 60;
        parameter Real mdot_min_input = 0.043;
        parameter Real SpecificHeat_input = 4190;
        parameter Integer nNode_input = 10;
        parameter Real EffPilot_input = 0.8;
        parameter Real Qdot_Pilot_input = 0;
        parameter Real Qdot_Rated_input = 55555;
        parameter Real EnergyDensityGas_input = 13500;
        parameter Real Qdot_min_input = 5275;
        parameter Modelica.SIunits.Time t_short = 1.5
          "Start delay with a short time between draws";
        parameter Modelica.SIunits.Time t_long = 3
          "Start delay with a long time between draws";
        parameter Modelica.SIunits.Time t_switch = 30
          "Time between draws required for t_long";
        parameter Real QAct = 50
          "Electric power consumed when the fan is operating";
        parameter Real QIdl = 15
          "Electric power consumed when the fan is not operating";
        parameter Real QMinDea(unit = "W") = 5000
          "Deadband for the minimum heat rate";
        Modelica.Blocks.Interfaces.RealOutput T_Out
          annotation (Placement(transformation(extent={{100,2},{120,22}})));
        Modelica.Blocks.Interfaces.RealOutput QEle
          annotation (Placement(transformation(extent={{100,-118},{120,-98}})));
        Modelica.Blocks.Interfaces.RealOutput QDotFlu
          annotation (Placement(transformation(extent={{100,32},{120,52}})));
      equation
        connect(nonCondensingTanklessHXController.mdot_water_controlled,
          HeatExchanger.mdot_water) annotation (Line(
            points={{20.8727,-95.28},{20.8727,-71.05},{-31,-71.05},{-31,11}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(nonCondensingTanklessHXController.ControlConstant,HeatExchanger. ControlConstant)
          annotation (Line(
            points={{15.5636,-104.64},{38,-104.64},{38,-52},{1,-52},{1,-26.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(nonCondensingTanklessHXController.T_out,HeatExchanger. T_Out)
          annotation (Line(
            points={{-1.45455,-102.24},{-1.45455,-124},{40,-124},{40,11},{28.5,
                11}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(DemandFlowRate, nonCondensingTanklessHXController.mdot_water)
          annotation (Line(
            points={{-120,-60},{-60,-60},{-60,-95.2},{-1.45455,-95.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletTemperature, HeatExchanger.T_Inlet) annotation (Line(
            points={{-120,8},{-78,8},{-78,23.4},{-31,23.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AmbientTemperature, HeatExchanger.T_amb) annotation (Line(
            points={{-120,80},{-78,80},{-78,35.8},{-31,35.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(InletTemperature, nonCondensingTanklessHXController.T_Inlet)
          annotation (Line(
            points={{-120,8},{-78,8},{-78,-98.4},{-1.45455,-98.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pwrSig, nonCondensingTanklessHXController.PowerSignal) annotation (
            Line(
            points={{-120,-140},{-80,-140},{-80,-105.6},{-1.45455,-105.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HeatExchanger.T_Out, T_Out) annotation (Line(
            points={{28.5,11},{66.25,11},{66.25,12},{110,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(nonCondensingTanklessHXController.QElec, QEle) annotation (Line(
            points={{20.8,-108.96},{63.4,-108.96},{63.4,-108},{110,-108}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(HeatExchanger.QDotFlu, QDotFlu) annotation (Line(
            points={{26.5,23.4},{70,23.4},{70,42},{110,42}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -150},{100,100}}),      graphics), Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-150},{100,100}}),
              graphics={Bitmap(
                extent={{-98,94},{92,-142}},
                imageSource=
                    ""
                     +
                    "",
                fileName=
                    "modelica://TanklessWaterHeater/../../../../../../Users/Peter Grant/Pictures/NonCondensingTanklessSchematic.jpg")}));
      end HybridTankless;

      package Examples "Examples of how the heater models are used"
        model TanklessExample
          "An example of how the HybridTankless model is used"
          extends Modelica.Icons.Example;
          HybridTankless hybridTankless(
            Capacitance_input=18138.9,
            SteadyStateEff_input=0.83,
            UA_input=13.6521,
            T_Set_input=60,
            mdot_min_input=0.043,
            SpecificHeat_input=4190,
            nNode_input=10,
            EffPilot_input=0.8,
            Qdot_Pilot_input=0,
            Qdot_Rated_input=29307,
            EnergyDensityGas_input=13500,
            Qdot_min_input=5275,
            t_short=1.5,
            t_long=3,
            t_switch=30,
            QAct=50,
            QIdl=15)
            annotation (Placement(transformation(extent={{2,-14},{32,24}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=time)
            annotation (Placement(transformation(extent={{-96,-6},{-76,14}})));
          Modelica.Blocks.Tables.CombiTable1Ds TAmb(
            tableOnFile=true,
            tableName="Ambient",
            fileName="TanklessExampleAmbientTemperature.txt")
            annotation (Placement(transformation(extent={{-60,34},{-40,54}})));
          Modelica.Blocks.Tables.CombiTable1Ds TIn(
            tableOnFile=true,
            tableName="Inlet",
            fileName="TanklessExampleInletTemperature.txt")
            annotation (Placement(transformation(extent={{-60,8},{-40,28}})));
          Modelica.Blocks.Tables.CombiTable1Ds drawPat(
            tableOnFile=true,
            tableName="Flow",
            fileName="TanklessExampleDemandFlowPattern.txt")
            annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
          Modelica.Blocks.Tables.CombiTable1Ds pwrSig(
            tableOnFile=true,
            tableName="Power",
            fileName="TanklessExamplePowerSignal.txt")
            annotation (Placement(transformation(extent={{-60,-48},{-40,-28}})));
        equation
          connect(realExpression.y, TIn.u) annotation (Line(
              points={{-75,4},{-70,4},{-70,18},{-62,18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, TAmb.u) annotation (Line(
              points={{-75,4},{-70,4},{-70,44},{-62,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, drawPat.u) annotation (Line(
              points={{-75,4},{-70,4},{-70,-10},{-62,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, pwrSig.u) annotation (Line(
              points={{-75,4},{-70,4},{-70,-38},{-62,-38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pwrSig.y[1], hybridTankless.pwrSig) annotation (Line(
              points={{-39,-38},{-20,-38},{-20,-12.48},{-1,-12.48}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(drawPat.y[1], hybridTankless.DemandFlowRate) annotation (Line(
              points={{-39,-10},{-20,-10},{-20,-0.32},{-1,-0.32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TIn.y[1], hybridTankless.InletTemperature) annotation (Line(
              points={{-39,18},{-20,18},{-20,10.016},{-1,10.016}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TAmb.y[1], hybridTankless.AmbientTemperature) annotation (Line(
              points={{-39,44},{-20,44},{-20,20.96},{-1,20.96}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end TanklessExample;

        model StorageTankExample
          "Provides an example of how the simplified storage tank model is used"
          extends Modelica.Icons.Example;
          SimplifiedStorageTank tan(
            redeclare package Medium = Modelica.Media.Water.WaterIF97_ph,
            nSeg=8,
            TStatHeight=7,
            TSet=273.105 + 52,
            RecircOutSeg=8,
            RecircInSeg=1,
            Deadband=12,
            UA=30,
            EffTan=0.25)
            annotation (Placement(transformation(extent={{24,-28},{102,32}})));
          Modelica.Blocks.Sources.Constant QInFlu(k=29307*0.2)
            annotation (Placement(transformation(extent={{-88,34},{-68,54}})));
          Modelica.Blocks.Sources.Constant Tamb(k=273.105 + 20)
            annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
          Modelica.Blocks.Sources.Constant mFloCir(k=0.12)
            "Flow rate of the recirculation loop"
            annotation (Placement(transformation(extent={{-88,-28},{-68,-8}})));
          Modelica.Blocks.Math.Product product
            annotation (Placement(transformation(extent={{-56,-34},{-36,-14}})));
          Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={50,-50})));
          Modelica.Blocks.Sources.Constant const(k=273.105 + 60)
            annotation (Placement(transformation(extent={{-20,-42},{0,-22}})));
          Modelica.Blocks.Sources.Constant TIn(k=273.105 + 20)
                                                     annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={70,70})));
          Modelica.Blocks.Sources.Sine sine[8](
            amplitude=0.5,
            offset=0.5,
            freqHz=0.0001)
            annotation (Placement(transformation(extent={{-94,72},{-74,92}})));
          Modelica.Blocks.Math.RealToInteger realToInteger[8]
            annotation (Placement(transformation(extent={{-64,72},{-44,92}})));
          Modelica.Blocks.Math.IntegerToReal integerToReal1[8]
            annotation (Placement(transformation(extent={{-36,72},{-16,92}})));
          Modelica.Blocks.Math.Gain gain[8](k=0.25)
            annotation (Placement(transformation(extent={{-4,72},{16,92}})));
          Modelica.Blocks.Math.Product product1
            annotation (Placement(transformation(extent={{-44,26},{-24,46}})));
        equation
          connect(Tamb.y, tan.TAmb) annotation (Line(
              points={{-67,12},{-62,12},{-62,14.3659},{20.983,14.3659}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mFloCir.y, product.u1) annotation (Line(
              points={{-67,-18},{-58,-18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(tan.TStatSig, integerToReal.u) annotation (Line(
              points={{103.913,-16.5854},{112,-16.5854},{112,-50},{62,-50}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(integerToReal.y, product.u2) annotation (Line(
              points={{39,-50},{-70,-50},{-70,-30},{-58,-30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, tan.mFloRec) annotation (Line(
              points={{-35,-24},{-24,-24},{-24,-6.04878},{22.3811,-6.04878}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const.y, tan.TInRec) annotation (Line(
              points={{1,-32},{8,-32},{8,-15.7073},{22.234,-15.7073}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TIn.y, tan.TIn) annotation (Line(
              points={{70,59},{70,33.6098},{69.6226,33.6098}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sine.y, realToInteger.u) annotation (Line(
              points={{-73,82},{-66,82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realToInteger.y, integerToReal1.u) annotation (Line(
              points={{-43,82},{-38,82}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(integerToReal1.y, gain.u) annotation (Line(
              points={{-15,82},{-6,82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(gain.y, tan.m_flow_in) annotation (Line(
              points={{17,82},{44.4566,82},{44.4566,32.2927}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QInFlu.y, product1.u2) annotation (Line(
              points={{-67,44},{-56,44},{-56,30},{-46,30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, tan.QFluIn) annotation (Line(
              points={{-23,36},{10,36},{10,24.6829},{21.3509,24.6829}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(integerToReal.y, product1.u1) annotation (Line(
              points={{39,-50},{-94,-50},{-94,60},{-52,60},{-52,42},{-46,42}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end StorageTankExample;
      end Examples;

      package EditedBaseClasses
        "Provides versions of the subclasses used in the hybrid model"
        model NonModulating
          "Control Module for the tankless portion of a hybrid water heater"
        //Debugging notes: Need to work with PID Controller. Does not seem to work...at all
          Modelica.Blocks.Interfaces.RealInput T_out
           annotation (Placement(transformation(extent={{-140,-48},{-100,-8}})));
          Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
            annotation (Placement(transformation(extent={{-66,6},{-46,26}})));
          Modelica.Blocks.Math.Product product
            annotation (Placement(transformation(extent={{-68,44},{-48,64}})));
          Modelica.Blocks.Math.Product product1
            annotation (Placement(transformation(extent={{-42,14},{-22,34}})));
          Modelica.Blocks.Interfaces.RealOutput mdot_water_controlled
            annotation (Placement(transformation(extent={{172,44},{202,74}})));
          Modelica.Blocks.Interfaces.RealOutput ControlConstant annotation (Placement(
                transformation(extent={{176,-52},{204,-24}}), iconTransformation(extent={{100,-72},
                    {128,-44}})));
          Modelica.Blocks.Math.Product product2
            annotation (Placement(transformation(extent={{48,50},{68,70}})));
          Modelica.Blocks.Math.BooleanToReal booleanToReal
            annotation (Placement(transformation(extent={{-22,70},{-2,90}})));
          Modelica.Blocks.Math.BooleanToReal booleanToReal1
            annotation (Placement(transformation(extent={{22,38},{42,58}})));
          Modelica.Blocks.Math.Product product3
            annotation (Placement(transformation(extent={{74,-42},{94,-22}})));
          NonCondensingTankless.Controllers.BaseClasses.NoncondensingTanklessHighFlowControl
                                                          FlowRateControl(
            SteadyStateEff=SteadyStateEff_cons,
            Qdot_Rated=Qdot_Rated_cons,
            SpecificHeat=SpecificHeat_cons,
            T_Set=T_Set_cons)
            annotation (Placement(transformation(extent={{20,-8},{40,12}})));
          Modelica.Blocks.Logical.GreaterEqual greaterEqual
            annotation (Placement(transformation(extent={{-56,76},{-36,96}})));
          Modelica.Blocks.Interfaces.RealInput mdot_water
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Sources.RealExpression mdot_min(y=mdot_min_cons)
            annotation (Placement(transformation(extent={{-94,66},{-74,86}})));
         parameter Real mdot_min_cons(unit = "kg/s") = 0.252
            "Minimum flow rate of the tankless heater";
         parameter Real Qdot_min_cons(unit = "W") = 5275
            "Minimum heat rate of the tankless heater";
         parameter Real T_Set_cons(unit = "C") = 55 "Set Temperature";
         parameter Real SpecificHeat_cons(unit = "J/(kg.C)") = 4190
            "Specific heat of the fluid being heated";
         parameter Real Qdot_Rated_cons(unit = "W") = 55555
            "Raed heat input rate of the tankless heater";
         parameter Real SteadyStateEff_cons = 0.82;
         parameter Modelica.SIunits.Time t_short = 1.5
            "Start delay with a short time between draws";
         parameter Modelica.SIunits.Time t_long = 3
            "Start delay with a long time between draws";
         parameter Modelica.SIunits.Time t_switch = 30
            "Time between draws required for t_long";
         parameter Real QAct = 50
            "Electric power consumed when the fan is operating";
         parameter Real QIdl = 15
            "Electric power consumed when the fan is not operating";
         parameter Real QMinDea(unit = "W") = 5000
            "Deadband for the minimum heat rate";
          Modelica.Blocks.Sources.RealExpression SpecificHeat(y=SpecificHeat_cons)
            annotation (Placement(transformation(extent={{-98,20},{-78,40}})));
          Modelica.Blocks.Sources.RealExpression T_Set(y=T_Set_cons)
            annotation (Placement(transformation(extent={{-98,-24},{-78,-4}})));
          Modelica.Blocks.Sources.RealExpression Qdot_min(y=Qdot_min_cons)
            annotation (Placement(transformation(extent={{-40,46},{-20,66}})));
          Modelica.Blocks.Sources.RealExpression ControlSignal(y=1)
            "Has no PID control, only binary on/off control"
            annotation (Placement(transformation(extent={{24,-48},{44,-28}})));
          Modelica.Blocks.Interfaces.RealInput T_Inlet
            annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
          Modelica.Blocks.Interfaces.RealInput PowerSignal
            annotation (Placement(transformation(extent={{-140,-90},{-100,-50}})));
          Modelica.Blocks.Math.Product product4
            annotation (Placement(transformation(extent={{110,-48},{130,-28}})));
          NonCondensingTankless.Controllers.BaseClasses.StartDelay
                                                     startDelay(
            t_short=t_short,
            t_long=t_long,
            t_switch=t_switch)
            annotation (Placement(transformation(extent={{76,-96},{96,-76}})));
          Modelica.Blocks.Math.Product product5
            annotation (Placement(transformation(extent={{140,-84},{160,-64}})));
          Modelica.Blocks.Math.Product product6
            annotation (Placement(transformation(extent={{106,-116},{126,-96}})));
          Modelica.Blocks.Sources.Constant QFan(k=QAct)
            annotation (Placement(transformation(extent={{34,-112},{54,-92}})));
          Modelica.Blocks.Sources.Constant QCon(k=QIdl)
            annotation (Placement(transformation(extent={{34,-144},{54,-124}})));
          Modelica.Blocks.Interfaces.RealOutput QElec
            annotation (Placement(transformation(extent={{176,-122},{196,-102}})));
          Modelica.Blocks.Math.Max max1
            annotation (Placement(transformation(extent={{138,-122},{158,-102}})));
          Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=QMinDea)
            annotation (Placement(transformation(extent={{-10,28},{10,48}})));
        equation
          connect(T_Set.y, add.u2) annotation (Line(
              points={{-77,-14},{-68,-14},{-68,10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, product1.u1) annotation (Line(
              points={{-47,54},{-46,54},{-46,30},{-44,30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, product1.u2) annotation (Line(
              points={{-45,16},{-44,16},{-44,18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(booleanToReal1.y, product2.u2) annotation (Line(
              points={{43,48},{46,48},{46,54}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(booleanToReal.y, product2.u1) annotation (Line(
              points={{-1,80},{22,80},{22,66},{46,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product3.u1, product2.y) annotation (Line(
              points={{72,-26},{72,60},{69,60}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(FlowRateControl.mdot_water_controlled, mdot_water_controlled)
            annotation (Line(
              points={{41.9,8.1},{126.95,8.1},{126.95,59},{187,59}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(greaterEqual.y, booleanToReal.u) annotation (Line(
              points={{-35,86},{-30,86},{-30,80},{-24,80}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(mdot_water, product.u1) annotation (Line(
              points={{-120,60},{-70,60}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mdot_water, greaterEqual.u1) annotation (Line(
              points={{-120,60},{-100,60},{-100,86},{-58,86}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mdot_water,FlowRateControl. mdot_water) annotation (Line(
              points={{-120,60},{-99,60},{-99,0},{18,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mdot_min.y, greaterEqual.u2) annotation (Line(
              points={{-73,76},{-66,76},{-66,78},{-58,78}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(SpecificHeat.y, product.u2) annotation (Line(
              points={{-77,30},{-74,30},{-74,48},{-70,48}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_Inlet, add.u1) annotation (Line(
              points={{-120,20},{-94,20},{-94,22},{-68,22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_Inlet, FlowRateControl.T_Inlet) annotation (Line(
              points={{-120,20},{-94,20},{-94,4},{18,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(PowerSignal, FlowRateControl.PowerSignal) annotation (Line(
              points={{-120,-70},{-40,-70},{-40,-4},{18,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(PowerSignal, product4.u2) annotation (Line(
              points={{-120,-70},{94,-70},{94,-44},{108,-44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product3.y, product4.u1) annotation (Line(
              points={{95,-32},{108,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mdot_water, startDelay.mDotDra) annotation (Line(
              points={{-120,60},{-98,60},{-98,-86},{74,-86}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(startDelay.y, product5.u2) annotation (Line(
              points={{97,-86},{120,-86},{120,-80},{138,-80}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product4.y, product5.u1) annotation (Line(
              points={{131,-38},{132,-38},{132,-68},{138,-68}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product5.y, ControlConstant) annotation (Line(
              points={{161,-74},{164,-74},{164,-38},{190,-38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(startDelay.y, product6.u1) annotation (Line(
              points={{97,-86},{100,-86},{100,-100},{104,-100}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QFan.y, product6.u2) annotation (Line(
              points={{55,-102},{80,-102},{80,-112},{104,-112}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product6.y, max1.u1) annotation (Line(
              points={{127,-106},{136,-106}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QCon.y, max1.u2) annotation (Line(
              points={{55,-134},{124,-134},{124,-118},{136,-118}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QElec, QElec) annotation (Line(
              points={{186,-112},{186,-112}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(max1.y, QElec) annotation (Line(
              points={{159,-112},{186,-112}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ControlSignal.y, product3.u2) annotation (Line(
              points={{45,-38},{72,-38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(onOffController.y, booleanToReal1.u) annotation (Line(
              points={{11,38},{20,38},{20,48}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(product1.y, FlowRateControl.Qdot_Required) annotation (Line(
              points={{-21,24},{-10,24},{-10,8},{18,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Qdot_min.y, onOffController.u) annotation (Line(
              points={{-19,56},{-20,56},{-20,32},{-12,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, onOffController.reference) annotation (Line(
              points={{-21,24},{-16,24},{-16,44},{-12,44}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-150},
                    {175,100}}),
                    graphics),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-150},{175,100}}),
                 graphics={Bitmap(extent={{-100,96},{100,-98}}, fileName=
                      "//vmware-host/Shared Folders/Downloads/ControlModule.jpg")}));
        end NonModulating;

        model HybridTanklessHX
          "A model representing a standard heat exchanger in a tankless water heaterVersion 1.0 - Date: 4/27/2012 - Created by PGrant based on his thesis"
          parameter Real Capacitance(unit = "J/C") = 8360
            "Thermal capacitance of the heat exchanger";
          parameter Real SteadyStateEff = 0.82
            "Heater efficiency at steady state";
          parameter Real UA(unit = "W/C") = 3.6
            "Coefficient describing heat loss to ambient conditions";
          parameter Real ConductionCoefficient(unit = "W/C") = 0.1
            "Coefficient characterizing the conduction of heat in the heat exchanger";
          parameter Integer nNode = 10
            "Number of nodes the heat exchanger is broken into";
          parameter Real EffPilot = 0.8 "Efficiency of the pilot light";
          parameter Real Qdot_Pilot(unit = "W") = 0
            "Input heat rate of the pilot light";
          parameter Real Qdot_Rated(unit = "W") = 55555
            "Rated capacity of the main burner";
        //  parameter Real T_amb(unit = "C") = 20
        //    "Ambient temperature around the water heater";
          parameter Real SpecificHeat(unit = "J/(kg.C)") = 4190
            "Specific heat of the fluid being heated";
          parameter Real T_Set(unit = "C") = 55
            "Set temperature of the tankless heater";
        //  parameter Real T_Inlet(unit = "C") = 20 "Entering water temperature";
          parameter Real EnergyDensityGas(unit = "W/kg") = 13500;
          Real T_Node[nNode](unit = "C", each start = 273.105 + 20);
          Real a[nNode];
          Real b[nNode];
          Real Qdot_Delivered(unit = "W");
          Real Qdot_Env[nNode](unit = "W");
          Real Qdot_Environment(unit = "W");
          Real Q_Stored(unit = "J");
          Real AvgTemp(unit = "C");
          Real Qdot_in(unit = "W");
          Real mdot_g(unit = "kg/hr");
          Real Qdot_Stored( unit = "W");
          Modelica.Blocks.Interfaces.RealInput mdot_water(unit = "kg/s")
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealInput ControlConstant
                                                              annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={8,-120})));
          Modelica.Blocks.Interfaces.RealOutput T_Out
            annotation (Placement(transformation(extent={{100,-18},{136,18}})));
          Modelica.Blocks.Interfaces.RealInput T_amb
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput T_Inlet
            annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
          Modelica.Blocks.Interfaces.RealOutput QDotFlu
            annotation (Placement(transformation(extent={{100,30},{120,50}})));
        equation
        if (nNode > 1) then
          a[1] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
          b[1] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Inlet * nNode + ConductionCoefficient * (T_Node[2] + T_Inlet) * nNode + UA * T_amb);
          a[nNode] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + ConductionCoefficient * nNode + UA);
          b[nNode] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Node[nNode-1] * nNode + ConductionCoefficient * T_Node[nNode-1] * nNode + UA * T_amb);
          for i in 2:nNode - 1 loop
            a[i] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
            b[i] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Node[i-1] * nNode + ConductionCoefficient * (T_Node[i+1] + T_Node[i-1]) * nNode + UA * T_amb);
          end for;
        else
          a[1] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
          b[1] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Inlet * nNode + ConductionCoefficient * (T_Out + T_Inlet) * nNode + UA * T_amb);
        end if;
        for i in 1:nNode loop
          der(T_Node[i]) = a[i] * T_Node[i] + b[i];
          Qdot_Env[i] = UA/nNode * (T_Node[i] - T_amb);
        end for;
        Qdot_Environment = sum(Qdot_Env[1:nNode]); //Sums up the environmental losses from all nodes into one cumulative Qdot_Env
        Qdot_in = Qdot_Pilot + Qdot_Rated * ControlConstant;
        T_Out = T_Node[nNode];
        Qdot_Delivered = mdot_water * SpecificHeat * (T_Out - T_Inlet);
        Q_Stored = Capacitance * sum(T_Node[1:nNode])/nNode;
        Qdot_Stored = der(Q_Stored);
        QDotFlu = Qdot_in -Qdot_Environment - Qdot_Delivered - Qdot_Stored;
        AvgTemp = sum(T_Node[1:nNode])/nNode;
        if ControlConstant > 0 then
          mdot_g = ControlConstant * Qdot_Rated / EnergyDensityGas;
        else
          mdot_g = 0.001;
        end if;
          annotation (Diagram(graphics), Icon(graphics={Bitmap(extent={{-100,98},{100,-100}},
                    fileName="//vmware-host/Shared Folders/Downloads/HeatExchanger.jpg")}),
                      Diagram(graphics));
        end HybridTanklessHX;

        model HyDra
          "Calculates the heat transfer rates caused by a hot water draw event (Hybrid Model)"
          extends Modelica.Blocks.Interfaces.BlockIcon;
           replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
           Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
             Medium.setState_pTX(
               Medium.p_default,
               Medium.T_default,
               Medium.X_default));
          parameter Integer nSeg(min=2) = 8;
          Modelica.Blocks.Interfaces.RealInput mFloIn[nSeg]
            annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
          Modelica.Blocks.Interfaces.RealOutput draHeaTra[nSeg]
            annotation (Placement(transformation(extent={{100,-2},{120,18}})));
          Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
            annotation (Placement(transformation(extent={{-140,52},{-100,92}})));
          Modelica.Blocks.Interfaces.RealInput TIn
            annotation (Placement(transformation(extent={{-140,12},{-100,52}})));
        equation
        for i in 1:nSeg loop
          draHeaTra[i] = mFloIn[i]/nSeg * c_p * (TWat[i] - TIn);
        end for;
          annotation (Diagram(graphics));
        end HyDra;

        model Pump
          extends Modelica.Blocks.Interfaces.BlockIcon;
          parameter Real RecircFlow "Recirculation flow rate";
          parameter Real QElePum = 50
            "Electricity consumption when the pump is active";
          Modelica.Blocks.Interfaces.IntegerInput
                                               TStatSig
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealOutput CircFlow
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Math.Product product
            annotation (Placement(transformation(extent={{-22,-16},{-2,4}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=RecircFlow)
            annotation (Placement(transformation(extent={{-82,-22},{-62,-2}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=QElePum)
            annotation (Placement(transformation(extent={{-82,36},{-62,56}})));
          Modelica.Blocks.Math.Product product1
            annotation (Placement(transformation(extent={{-22,30},{-2,50}})));
          Modelica.Blocks.Interfaces.RealOutput QPum
            annotation (Placement(transformation(extent={{100,30},{120,50}})));
        equation
          connect(TStatSig, product.u1) annotation (Line(
              points={{-120,0},{-24,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product.y, CircFlow) annotation (Line(
              points={{-1,-6},{40,-6},{40,0},{110,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, product.u2) annotation (Line(
              points={{-61,-12},{-24,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, QPum) annotation (Line(
              points={{-1,40},{110,40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression1.y, product1.u1) annotation (Line(
              points={{-61,46},{-24,46}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TStatSig, product1.u2) annotation (Line(
              points={{-120,0},{-60,0},{-60,34},{-24,34}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end Pump;

        model cirHeaTra "Heat transfer caused by the recirculation loop"
          extends Modelica.Blocks.Interfaces.BlockIcon;
          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
          Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
              Medium.setState_pTX(
                Medium.p_default,
                Medium.T_default,
                Medium.X_default));
          parameter Integer nSeg(min=2) = 8;
          Modelica.Blocks.Interfaces.RealInput mFloCir
            "Recirculation flow rate"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
            "Water temperature in all segments"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput TRec
            "Recirculation inlet temperature"
            annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          Modelica.Blocks.Interfaces.RealOutput cirHeaTra[nSeg]
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        equation
          for i in 1:nSeg loop
            cirHeaTra[i] = mFloCir/nSeg * c_p * (TRec - TWat[i]);
          end for;
        end cirHeaTra;

        model fluHeaTra "Models the heat transfer through the flue"
          extends Modelica.Blocks.Interfaces.BlockIcon;
          parameter Integer nSeg(min=2) = 8;
          parameter Real EffTan;
          Modelica.Blocks.Interfaces.RealInput QDotFlu "Heat entering the flue"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealOutput fluHeaTra[nSeg]
            "Heat entering each segment through the flue"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        equation
          for i in 1:nSeg loop
            fluHeaTra[i] = QDotFlu * EffTan/nSeg;
          end for;
        end fluHeaTra;

        model UALoss "Identifies the UA losses in the tank"
          extends Modelica.Blocks.Interfaces.BlockIcon;
          parameter Integer nSeg(min=2) = 8;
          parameter Real UA;
          Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
            annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
          Modelica.Blocks.Interfaces.RealInput TAmb
            annotation (Placement(transformation(extent={{-140,-40},{-100,2}})));
          Modelica.Blocks.Interfaces.RealOutput UALoss[nSeg]
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        equation
          for i in 1:nSeg loop
            UALoss[i] = UA/nSeg * (TWat[i] - TAmb);
          end for;
        end UALoss;

        model EffTank
          "Uses the provided system and tankless effiicency to find the heat transfer efficiency of the tank"
          extends Modelica.Blocks.Interfaces.BlockIcon;
          parameter Real EffTankless = 0.8;
          parameter Real EffSys = 0.85;
          Modelica.Blocks.Interfaces.RealOutput EffTank
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        equation
          EffTank = (EffSys - EffTankless) / (1 - EffTankless);
        end EffTank;

        package BaseClassExamples
          "Provides examples of how base classes are used"
          model PumpExample
            "An example of how the hybrid library pump model is used"
            extends Modelica.Icons.Example;
            Pump pump(RecircFlow=0.12, QElePum=50)
              annotation (Placement(transformation(extent={{0,-12},{20,8}})));
            Modelica.Blocks.Math.RealToInteger realToInteger
              annotation (Placement(transformation(extent={{-42,-12},{-22,8}})));
            Modelica.Blocks.Sources.Sine sine(
              amplitude=0.5,
              freqHz=0.2,
              offset=0.5)
              annotation (Placement(transformation(extent={{-84,-12},{-64,8}})));
          equation
            connect(realToInteger.y, pump.TStatSig) annotation (Line(
                points={{-21,-2},{-2,-2}},
                color={255,127,0},
                smooth=Smooth.None));
            connect(sine.y, realToInteger.u) annotation (Line(
                points={{-63,-2},{-44,-2}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end PumpExample;

          model EffTank
            "Provides an example showing how the EffTank model is used"
            import WaterHeatingLibrary.Hybrid;
            extends Modelica.Icons.Example;
            Hybrid.HeatersUsed.EditedBaseClasses.EffTank effTank(EffTankless=0.85,
                EffSys=0.9)
              annotation (Placement(transformation(extent={{-14,-8},{6,12}})));
          end EffTank;

          model UALossExample
            "Provides an example of how the UALoss model is used"
            extends Modelica.Icons.Example;
            UALoss uALoss(                  nSeg=8, UA=30)
              annotation (Placement(transformation(extent={{-12,2},{8,22}})));
            Modelica.Blocks.Sources.Constant TAmb(k=20)
              annotation (Placement(transformation(extent={{-84,-10},{-64,10}})));
            Modelica.Blocks.Sources.Constant TWat[8](k=52)
              annotation (Placement(transformation(extent={{-84,26},{-64,46}})));
          equation
            connect(TAmb.y, uALoss.TAmb) annotation (Line(
                points={{-63,0},{-38,0},{-38,10.1},{-14,10.1}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(TWat.y, uALoss.TWat) annotation (Line(
                points={{-63,36},{-38,36},{-38,16},{-14,16}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end UALossExample;

          model fluHeaTraExample "Provides an example of the use of fluHeaTra"
            extends Modelica.Icons.Example;
            fluHeaTra fluHeaTra1(nSeg=8, EffTan=0.25)
              annotation (Placement(transformation(extent={{-24,-14},{-4,6}})));
            Modelica.Blocks.Sources.Sine sine(
              amplitude=5000,
              freqHz=0.01,
              offset=10000)
              annotation (Placement(transformation(extent={{-72,-14},{-52,6}})));
          equation
            connect(sine.y, fluHeaTra1.QDotFlu) annotation (Line(
                points={{-51,-4},{-26,-4}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end fluHeaTraExample;

          model HyDraExample "Example showing use of the HyDra model"
            extends Modelica.Icons.Example;
            package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
            HyDra hyDra(redeclare package Medium = Water, nSeg=8)
                        annotation (Placement(transformation(extent={{18,-16},{38,
                      4}})));
            Modelica.Blocks.Sources.Constant const[8](k=52)
              annotation (Placement(transformation(extent={{-84,12},{-64,32}})));
            Modelica.Blocks.Sources.Constant const1(k=20)
              annotation (Placement(transformation(extent={{-84,-18},{-64,2}})));
            Modelica.Blocks.Sources.Sine sine[8](
              freqHz=0.1,
              amplitude=0.5,
              offset=0.5) annotation (Placement(transformation(extent={{-90,-50},
                      {-70,-30}})));
            Modelica.Blocks.Math.RealToInteger realToInteger[8] annotation (
                Placement(transformation(extent={{-60,-50},{-40,-30}})));
            Modelica.Blocks.Math.IntegerToReal integerToReal[8] annotation (
                Placement(transformation(extent={{-32,-50},{-12,-30}})));
          equation
            connect(const.y, hyDra.TWat) annotation (Line(
                points={{-63,22},{-40,22},{-40,1.2},{16,1.2}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(const1.y, hyDra.TIn) annotation (Line(
                points={{-63,-8},{-40,-8},{-40,-2.8},{16,-2.8}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(sine.y, realToInteger.u) annotation (Line(
                points={{-69,-40},{-62,-40}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(realToInteger.y, integerToReal.u) annotation (Line(
                points={{-39,-40},{-34,-40}},
                color={255,127,0},
                smooth=Smooth.None));
            connect(integerToReal.y, hyDra.mFloIn) annotation (Line(
                points={{-11,-40},{0,-40},{0,-11},{16,-11}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end HyDraExample;

          model cirHeaTraExample "Example of how the cirHeaTra model is used"
            extends Modelica.Icons.Example;
            cirHeaTra cirHeaTra1(nSeg=8, c_p=4184.78)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
            Modelica.Blocks.Sources.Sine sine(
              freqHz=0.001,
              amplitude=30,
              offset=30) annotation (Placement(transformation(extent={{-60,-40},{
                      -40,-20}})));
            Modelica.Blocks.Sources.Constant const(k=0.12)
              annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
            Modelica.Blocks.Sources.Constant const1[8](k=52)
              annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
          equation
            connect(sine.y, cirHeaTra1.TRec) annotation (Line(
                points={{-39,-30},{-20,-30},{-20,-8},{-12,-8}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(const.y, cirHeaTra1.mFloCir) annotation (Line(
                points={{-39,0},{-12,0}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(const1.y, cirHeaTra1.TWat) annotation (Line(
                points={{-39,30},{-20,30},{-20,8},{-12,8}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end cirHeaTraExample;

          model NonModulatingExample
            "Example of how the NonModulating tankless controller model is used"
            extends Modelica.Icons.Example;
            NonModulating nonModulating(
              Qdot_min_cons=5275,
              T_Set_cons=60,
              SpecificHeat_cons=4184.78,
              Qdot_Rated_cons=29307,
              SteadyStateEff_cons=0.82,
              t_short=1.5,
              t_long=3,
              t_switch=30,
              QAct=50,
              QIdl=15,
              mdot_min_cons=0.043)
              annotation (Placement(transformation(extent={{16,-24},{44,2}})));
            Modelica.Blocks.Sources.Sine sine(
              amplitude=0.06,
              freqHz=0.001,
              offset=0.03)
              annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
            Modelica.Blocks.Sources.Sine sine1(
              amplitude=90,
              offset=-30,
              freqHz=0.0001) annotation (Placement(transformation(extent={{-80,
                      -40},{-60,-20}})));
            Modelica.Blocks.Sources.Constant const(k=20)
              annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
            Modelica.Blocks.Sources.Sine sine2(
              amplitude=0.5,
              freqHz=0.01,
              offset=0.5) annotation (Placement(transformation(extent={{-80,-80},
                      {-60,-60}})));
            Modelica.Blocks.Math.RealToInteger realToInteger annotation (
                Placement(transformation(extent={{-52,-80},{-32,-60}})));
            Modelica.Blocks.Math.IntegerToReal integerToReal
              annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));
          equation
            connect(sine2.y, realToInteger.u) annotation (Line(
                points={{-59,-70},{-54,-70}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(realToInteger.y, integerToReal.u) annotation (Line(
                points={{-31,-70},{-22,-70}},
                color={255,127,0},
                smooth=Smooth.None));
            connect(integerToReal.y, nonModulating.PowerSignal) annotation (Line(
                points={{1,-70},{6,-70},{6,-15.68},{13.9636,-15.68}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(sine1.y, nonModulating.T_out) annotation (Line(
                points={{-59,-30},{-20,-30},{-20,-11.312},{13.9636,-11.312}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(const.y, nonModulating.T_Inlet) annotation (Line(
                points={{-59,10},{-20,10},{-20,-6.32},{13.9636,-6.32}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(sine.y, nonModulating.mdot_water) annotation (Line(
                points={{-59,50},{6,50},{6,-2.16},{13.9636,-2.16}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end NonModulatingExample;

          model HybridTanklessHXExample
            "Example of how the HybridTanklessHX model is used"
            extends Modelica.Icons.Example;
            HybridTanklessHX hybridTanklessHX(
              Capacitance=13138.9,
              SteadyStateEff=0.82,
              UA=3.6,
              ConductionCoefficient=0.00001,
              nNode=4,
              EffPilot=0.8,
              Qdot_Pilot=0,
              Qdot_Rated=29307,
              SpecificHeat=4190,
              T_Set=60,
              EnergyDensityGas=13500)
              annotation (Placement(transformation(extent={{0,0},{20,20}})));
            Modelica.Blocks.Sources.Constant TAmb(k=20)
              annotation (Placement(transformation(extent={{-80,22},{-60,42}})));
            Modelica.Blocks.Sources.Constant TInlet(k=15)
              annotation (Placement(transformation(extent={{-80,-8},{-60,12}})));
            Modelica.Blocks.Sources.Sine mDotWat(
              amplitude=0.5,
              freqHz=0.001,
              offset=0.05) annotation (Placement(transformation(extent={{-100,-40},
                      {-80,-20}})));
            Modelica.Blocks.Math.RealToInteger realToInteger annotation (
                Placement(transformation(extent={{-72,-40},{-52,-20}})));
            Modelica.Blocks.Math.IntegerToReal integerToReal annotation (
                Placement(transformation(extent={{-44,-40},{-24,-20}})));
            Modelica.Blocks.Sources.Sine ContSig(
              amplitude=0.5,
              freqHz=0.01,
              offset=0.5) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={10,-80})));
          equation
            connect(TAmb.y, hybridTanklessHX.T_amb) annotation (Line(
                points={{-59,32},{-40,32},{-40,18},{-2,18}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(TInlet.y, hybridTanklessHX.T_Inlet) annotation (Line(
                points={{-59,2},{-40,2},{-40,14},{-2,14}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(mDotWat.y, realToInteger.u) annotation (Line(
                points={{-79,-30},{-74,-30}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(realToInteger.y, integerToReal.u) annotation (Line(
                points={{-51,-30},{-46,-30}},
                color={255,127,0},
                smooth=Smooth.None));
            connect(integerToReal.y, hybridTanklessHX.mdot_water) annotation (
                Line(
                points={{-23,-30},{-12,-30},{-12,10},{-2,10}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(ContSig.y, hybridTanklessHX.ControlConstant) annotation (Line(
                points={{10,-69},{10,-35.5},{10,-2},{10.8,-2}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end HybridTanklessHXExample;
        end BaseClassExamples;
      end EditedBaseClasses;
    end HeatersUsed;

    package Examples
      model GenHyb "A generic hybrid water heater"
        extends Modelica.Icons.Example;
        HybridWH hybridWH(
          RecircFlow=0.12,
          tswitch=30,
          TSetTankless=60 + 273.105,
          QMinDea=1000,
          TSetTank=273.105 + 45,
          UATank=18,
          UATankless=3.6,
          VTan=0.1,
          Deadband=12)
          annotation (Placement(transformation(extent={{54,-14},{96,26}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-66,-64},{-46,-44}})));
        Modelica.Blocks.Sources.Constant const1(k=273.105 + 20)
          annotation (Placement(transformation(extent={{-66,-32},{-46,-12}})));
        Modelica.Blocks.Sources.Constant const2(k=273.105 + 15)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Modelica.Blocks.Sources.Sine sine[8](
          amplitude=0.5,
          offset=0.5,
          freqHz=1/86400)
          annotation (Placement(transformation(extent={{-88,6},{-68,26}})));
        Modelica.Blocks.Math.RealToInteger realToInteger[8]
          annotation (Placement(transformation(extent={{-58,6},{-38,26}})));
        Modelica.Blocks.Math.IntegerToReal integerToReal[8]
          annotation (Placement(transformation(extent={{-28,6},{-8,26}})));
        Modelica.Blocks.Math.Gain gain[8](k=0.12)
          annotation (Placement(transformation(extent={{2,6},{22,26}})));
      equation
        connect(const.y, hybridWH.PowerSignal) annotation (Line(
            points={{-45,-54},{42,-54},{42,4.93333},{49.8,4.93333}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(hybridWH.TAmb, const1.y) annotation (Line(
            points={{49.8,8.66667},{22,8.66667},{22,-22},{-45,-22}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const2.y, hybridWH.TIn) annotation (Line(
            points={{-39,50},{38,50},{38,16.6667},{49.8,16.6667}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sine.y, realToInteger.u) annotation (Line(
            points={{-67,16},{-60,16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realToInteger.y, integerToReal.u) annotation (Line(
            points={{-37,16},{-30,16}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(integerToReal.y, gain.u) annotation (Line(
            points={{-7,16},{0,16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain.y, hybridWH.mFloIn) annotation (Line(
            points={{23,16},{36.4,16},{36.4,12.6667},{49.8,12.6667}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(graphics), Diagram(graphics),
        Documentation(info="<html>
  <p>
  Generic example of a hybrid water heater. Model was made without experimental knowledge of how hybrid water heaters work, and cannot be trusted to be representative of 
  any actual model.<br>
  </p>
  </html>",
        revisions="<html>
  <ul>
  <li>
  Mar 29, 2013 by Peter Grant: <br>
  First implementation
  </li>
  </ul>
  </html>"));
      end GenHyb;
    end Examples;
    annotation ();
  end Hybrid;

  package NonCondensingTank
    model ComplexTank "model of a gas water heater without burner"
      import SI = Modelica.SIunits;
      import Modelica.Constants;
      import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
      replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
        "Medium in the component" annotation (choicesAllMatching=true);
      //   replaceable package MediumB = Modelica.Media.Interfaces.PartialMedium
      //     "Medium in the component" annotation (choicesAllMatching=true);
      import Modelica.Fluid.Types;
      import Modelica.Fluid.Types.Dynamics;
      import Modelica.Constants;
      parameter Modelica.SIunits.Volume VTan=1 "Tank volume";
      parameter Modelica.SIunits.Length DFlu=0.5 "diameter of the flue";
      parameter Modelica.SIunits.Length LFlu=1 "Length of flue";
    //  parameter Real TIn = 273.15 + 15;
      parameter Real perInA[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real perInB[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real perInC[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real timDelA[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real timDelB[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Real timDelC[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      parameter Buildings.HeatTransfer.Types.InteriorConvection conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature
        "Convective heat transfer model for opaque constructions"
        annotation (Dialog(group="Convective heat transfer"));
      parameter Modelica.SIunits.Temperature T_Initial[nSeg] = {273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20,273.105 + 20};
    //  Modelica.SIunits.Temperature T_start;
      // Get the specific heat capacity of MediumB. This will be used later on for the calculation of Q_flow_tot
      Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
      parameter Boolean allowFlowReversal=system.allowFlowReversal
        "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
        annotation (Dialog(tab="Assumptions"),Evaluate=true);
      parameter Modelica.SIunits.CoefficientOfHeatTransfer hFixed=3.0
        "Constant convection coefficient for opaque constructions" annotation (
          Dialog(group="Convective heat transfer", enable=(conMod == Buildings.HeatTransfer.Types.InteriorConvection.Fixed)));
      parameter Real QDotPilot = 158;
      parameter Medium.MassFlowRate m_flow_nominal "Nominal mass flow rate"
        annotation (Dialog(group="Nominal condition"));
      parameter Integer nSeg(min=2) = 20 "Number of volume segments";
      ////////////////////////////////////////////////////////////////////
      //   // Assumptions
      parameter Modelica.Fluid.Types.Dynamics energyDynamics=system.energyDynamics
        "Formulation of energy balance"
        annotation (Evaluate=true, Dialog(tab="Dynamics", group="Equations"));
      parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
        "Formulation of mass balance"
        annotation (Evaluate=true, Dialog(tab="Dynamics", group="Equations"));
      // Initialization
      parameter Medium.AbsolutePressure p_start=Medium.p_default
        "Start value of pressure" annotation (Dialog(tab="Initialization"));
    //    parameter Medium.Temperature T_start =60+273.15 "Start value of temperature"
    //                                   annotation (Dialog(tab="Initialization"));
    //  Modelica.SIunits.Temperature T_start;
      parameter Medium.MassFraction X_start[Medium.nX]=Medium.X_default
        "Start value of mass fractions m_i/m"
        annotation (Dialog(tab="Initialization", enable=Medium.nXi > 0));
      parameter Medium.ExtraProperty C_start[Medium.nC](quantity=Medium.extraPropertiesNames)=
           fill(0, Medium.nC) "Start value of trace substances"
        annotation (Dialog(tab="Initialization", enable=Medium.nC > 0));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow        prescribedHeatFlow[
        nSeg]                 annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={102,-46})));
      ////////////////////////////////////////////////////////////////////
      Buildings.Rooms.Constructions.Construction flueWall[nSeg](
        each A=datFlueWall.A/nSeg,
        each til=datFlueWall.til,
        each final layers=datFlueWall.layers,
        each steadyStateInitial=datFlueWall.steadyStateInitial,
        each T_a_start=datFlueWall.T_a_start,
        each T_b_start=datFlueWall.T_b_start)
        "Heat conduction through partitions that have both sides inside the thermal zone"
        annotation (Placement(transformation(extent={{-118,-36},{-184,30}})));
      WaterHeaterLib.BaseClasses.InteriorWH heaFluWat[nSeg](
        each final A=datFlueWall.A/nSeg,
        each final til=datFlueWall.til,
        each final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each hFixed=hFixed) "Heat transfer between the flue wall and water"
        annotation (Placement(transformation(extent={{-62,34},{-32,4}})));
      Buildings.Rooms.Constructions.Construction tanJac[nSeg](
        each A=datTanEnv.A/nSeg,
        each til=datTanEnv.til,
        each final layers=datTanEnv.layers,
        each steadyStateInitial=datTanEnv.steadyStateInitial,
        each T_a_start=datTanEnv.T_a_start,
        each T_b_start=datTanEnv.T_b_start)
        "Representation of the jacket of the water heater"
        annotation (Placement(transformation(extent={{188,-30},{248,30}})));
      Buildings.Fluid.MixingVolumes.MixingVolume[nSeg] vol(
        redeclare each package Medium = Medium,
        each energyDynamics=energyDynamics,
        each massDynamics=massDynamics,
        each p_start=p_start,
        T_start=T_Initial[nSeg],
        each X_start=X_start,
        each C_start=C_start,
        each V=VTan/nSeg,
        each m_flow_nominal=m_flow_nominal,
        nPorts=1) "Tank segment"                           annotation (Placement(
            transformation(
            extent={{-22,-22},{22,22}},
            rotation=90,
            origin={82,42})));
      Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorBot
        "Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition"
        annotation (Placement(transformation(extent={{-14,-378},{14,-350}},
              rotation=0), iconTransformation(extent={{-48,-400},{-8,-360}})));
    protected
      constant Integer nPorts=2 "Number of ports of volume";
    //   Modelica.SIunits.HeatFlowRate deltaH_flow_BU[nSeg](each start=0)
    //     "Total heat enthalpy of zone i";
    //   Modelica.SIunits.HeatFlowRate deltaH_flow_F[nSeg](each start=0)
    //     "Heat enthalpy of zone induced by the flue wall";
    //   Modelica.SIunits.HeatFlowRate Q_flow_tot[nSeg]( each start=0)
    //    "Total heat flux that will be added to vol port ofr energy balance of zone i";
      Modelica.Blocks.Sources.RealExpression Q_flow_total[nSeg](y=-buoHeaTra.buoHeaTra)
        annotation (Placement(transformation(extent={{196,-62},{142,-30}})));
    public
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datFlueWall(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for partition construction"
                                                      annotation (Placement(
            transformation(extent={{582,340},{622,380}})), HideResult=true);
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnv(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for exterior construction"
                                                     annotation (Placement(
            transformation(extent={{520,342},{560,382}})),HideResult=true);
      Buildings.Rooms.Constructions.Construction tanTop(
        A=datTanEnvTop.A,
        til=datTanEnvTop.til,
        final layers=datTanEnvTop.layers,
        steadyStateInitial=datTanEnvTop.steadyStateInitial,
        T_a_start=datTanEnvTop.T_a_start,
        T_b_start=datTanEnvTop.T_b_start)
        "Representation of the top of the tank"
                                          annotation (Placement(transformation(
            extent={{-28,-28},{28,28}},
            rotation=90,
            origin={18,204})));
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnvTop(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for exterior construction"
                                                     annotation (Placement(
            transformation(extent={{520,400},{560,440}})), HideResult=true);
      Buildings.Rooms.Constructions.Construction tanBas(
        A=datTanEnvBot.A,
        til=datTanEnvBot.til,
        final layers=datTanEnvBot.layers,
        steadyStateInitial=datTanEnvBot.steadyStateInitial,
        T_a_start=datTanEnvBot.T_a_start,
        T_b_start=datTanEnvBot.T_b_start)
        "Representation of the base of the tank"
                                          annotation (Placement(transformation(
            extent={{30,-30},{-30,30}},
            rotation=90,
            origin={20,-282})));
      parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnvBot(
        each A=0,
        redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
        each til=0,
        each azi=0,
        T_a_start=333.15,
        T_b_start=333.15) "Data for exterior construction"
                                                     annotation (Placement(
            transformation(extent={{580,400},{620,440}})), HideResult=true);
      // parameters defined for the water heater model.
      parameter Real h_cw_B_cons=1
        "value should be obtained from Mac Gregor & Emery Journal of Heat Transfer (page 8) --fixme";
      parameter Modelica.SIunits.MassFlowRate m_flow_sr=0.01*0.063
        "Mass flow rate for secondary recirculation in Stagnant region (page 8)";
      parameter Real c_sr=2
        "Empirical factor for scaling mass flow rate for secondary recirculation in stirred region(page 8)";
      parameter Real c_wB=1/15
        "Empirical value determined based on experimental data (see page 8)";
      parameter Real c_wI=1/2
        "Empirical value determined based on experimental data (see page 8)";
      parameter Real h_WF_cons=2
        "Convective heat transfer coefficient between water and flue wall (page 8) --fixme";
      // the assumption is that there is no recirculation in zone nSeg at the top of tank
      final parameter Modelica.SIunits.MassFlowRate m_flow_C[nSeg]=cat(
            1,
            c_sr*m_flow_sr*ones(nSeg - 1),
            {m_flow_sr}) "Secondary recirculation mass flow ratein all zones";
    //   Modelica.SIunits.Temperature T_HB(start=273.15 + 30)
    //    "Effective temperature induced by the heat flux into the tank through the base";
    //   Modelica.SIunits.MassFlowRate m_flow_B
    //    "Mass flow rate induced by the heat flux into the tank through the base";
    //   Modelica.SIunits.Temperature T_H[nSeg](each start=273.15 + 30)
    //    "Temperature of the flue wall for each zone";
    //   Modelica.SIunits.MassFlowRate m_flow_F[nSeg](each start=0)
    //    "Mass flow rate induced by the flue for each zone";
    //   Modelica.SIunits.HeatFlowRate Q_flow_W[nSeg]( each start=0)
    //     "Heat flow rate leaving zone i";
    //   Modelica.SIunits.HeatFlowRate Q_flow_WB "Heat flow rate from the base";
      Modelica.SIunits.Temperature T_WL_mean
        "mean temperature along the flue wall";
       Modelica.SIunits.Temperature T_F[nSeg]( each start = 0)
        "Temperature of flue wall";
      parameter Real h_cv_F=10
        "Convective heat transfer coefficient between flue gas and flue wall (see page 17)--fixme";
      Real smoDel = 0.00001;
      WaterHeaterLib.BaseClasses.InteriorWH heaBasWat(
        final A=datTanEnvBot.A,
        final til=datTanEnvBot.til,
        hFixed=hFixed,
        final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature)
        "Heat transfer between the base of the tank and the water"
                                   annotation (Placement(transformation(
            extent={{14,-14},{-14,14}},
            rotation=-90,
            origin={0,-50})));
      WaterHeaterLib.BaseClasses.InteriorWH convConBou3(
        final A=datTanEnvTop.A,
        final til=datTanEnvTop.til,
        final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each hFixed=hFixed) "Convective heat transfer" annotation (Placement(
            transformation(
            extent={{-14,-14},{14,14}},
            rotation=-90,
            origin={0,110})));
      WaterHeaterLib.BaseClasses.InteriorWH heaWatJac[nSeg](
        each final A=datTanEnv.A/nSeg,
        each final til=datTanEnv.til,
        each final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each hFixed=hFixed) "Heat transfer between the water and the jacket"
        annotation (Placement(transformation(extent={{166,34},{138,6}})));
      Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature flueTemperature[
        nSeg] annotation (Placement(transformation(extent={{-292,4},{-262,34}})));
      Modelica.Blocks.Sources.RealExpression flueTemp[nSeg](y=T_F_avg)
        annotation (Placement(transformation(extent={{-334,4},{-304,34}})));
      Modelica.Blocks.Interfaces.RealVectorInput m_flow_in[nSeg] annotation (
          Placement(transformation(extent={{-178,444},{-138,484}}),
            iconTransformation(extent={{-162,444},{-122,484}})));
      WaterHeaterLib.BaseClasses.draHeaTra draHeaTra(
        nSeg=nSeg,
        redeclare package Medium = Medium,
        perInA=perInA,
        perInB=perInB,
        perInC=perInC,
        timDelA=timDelA,
        timDelB=timDelB,
        timDelC=timDelC)
        "Calculates the heat transfer in each segment caused by a hot water draw"
                                                                      annotation (
          Placement(transformation(
            extent={{-23,-23},{23,23}},
            rotation=-90,
            origin={-141,371})));
      Modelica.Blocks.Sources.RealExpression draHea[nSeg](y=draHeaTra.draHeaTra)
                                                          annotation (Placement(
            transformation(
            extent={{-28,-14},{28,14}},
            rotation=180,
            origin={170,-84})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow        prescribedHeatFlow1[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-84})));
      Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temperatureSensor[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-70,396})));
      Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor
        "Sensor reporting the heat transfer between the base of the tank and the water"
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={0,-152})));
      Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor1[nSeg]
        "Sensor reporting the heat flow between the flu wall and the water"
        annotation (Placement(transformation(
            extent={{-13,-13},{13,13}},
            rotation=180,
            origin={-93,19})));
      WaterHeaterLib.BaseClasses.InteriorWH heaWatFit[nSeg](
        each hFixed=hFixed,
        each conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each final til=datTanEnv.til,
        each final A=datTanEnv.A/nSeg)
        "Heat transfer between the water and assorted fittings (inlet/outlet pipe, PRV, drain)"
        annotation (Placement(transformation(extent={{238,132},{210,104}})));
      Modelica.Blocks.Sources.RealExpression finCoef[nSeg](each y=0.2)
        "--fixme see and add the correct coefficient as on page 19 --fixme"
        annotation (Placement(transformation(extent={{344,184},{316,214}})));
      Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor T_WL[nSeg]
        "flue wall temperature" annotation (Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-226,-32})));
      Modelica.SIunits.Temperature T_WL_avg[nSeg];
      Modelica.SIunits.Temperature T_F_avg;
      Modelica.Blocks.Sources.RealExpression h_cw_B(y=h_cw_B_cons)
        annotation (Placement(transformation(extent={{-438,-64},{-390,-36}})));
      Modelica.Blocks.Sources.RealExpression h_WF[nSeg](each y=h_WF_cons)
        annotation (Placement(transformation(extent={{-360,256},{-320,288}})));
      Modelica.Blocks.Math.Gain gain2[nSeg](each k=2)
        annotation (Placement(transformation(extent={{-220,262},{-200,282}})));
      Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPor[nSeg]
        "Heat port for sensor" annotation (Placement(transformation(extent={{638,-148},
                {656,-130}},      rotation=0), iconTransformation(extent={{306,-42},
                {348,0}})));
      Buildings.HeatTransfer.Convection.Interior convJacAmb[nSeg](
        each conMod=conMod,
        each hFixed=hFixed,
        each final A=datTanEnv.A/nSeg,
        each final til=datTanEnv.til)
        "Convective heat transfer between the tank and the surroundings"
        annotation (Placement(transformation(extent={{308,62},{336,90}})));
    public
      Modelica.Thermal.HeatTransfer.Components.ThermalCollector theCol(m=nSeg)
        "Connector to assign multiple heat ports to one heat port" annotation (
          Placement(transformation(
            extent={{-13,-13},{13,13}},
            rotation=90,
            origin={399,43})));
      WaterHeaterLib.BaseClasses.LongWaveRadiationExchange radJacAmb[nSeg](each A=
           datTanEnv.A/nSeg)
        "Radiative heat exchange between the tank and the surroundings"
        annotation (Placement(transformation(extent={{342,-16},{316,-42}})));
      Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature Tair
        annotation (Placement(transformation(extent={{456,36},{436,56}})));
      Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={658,46}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={328,128})));
      Modelica.Blocks.Interfaces.RealInput TRadMea  annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={660,-82}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={322,-188})));
      Modelica.Blocks.Routing.Replicator replicator1(nout=nSeg)
        annotation (Placement(transformation(extent={{436,-96},{406,-66}})));
      Modelica.Blocks.Sources.RealExpression absIRJac2[nSeg](each y=datTanEnv.layers.absIR_b)
        annotation (Placement(transformation(extent={{440,-48},{388,-12}})));
      WaterHeaterLib.BaseClasses.InteriorWH heaGasFlu[nSeg](
        each hFixed=hFixed,
        each final conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
        each final A=datFlueWall.A/nSeg,
        each final til=datFlueWall.til)
        "Heat transfer between the hot gas and flue wall" annotation (Placement(
            transformation(
            extent={{-17,-17},{17,17}},
            rotation=180,
            origin={-231,19})));
      Modelica.Blocks.Sources.RealExpression heaCoe[nSeg](each y=h_cv_F)
        "combined convective and radiative coefficient -- fixme"
        annotation (Placement(transformation(extent={{-336,42},{-306,72}})));
      Buildings.HeatTransfer.Convection.Interior convTopAmb(
        each conMod=conMod,
        each hFixed=hFixed,
        each final A=datTanEnvTop.A,
        each final til=datTanEnvTop.til)
        "Convective heat transfer between the top of the tank and the surroundings"
                                                                    annotation (
          Placement(transformation(
            extent={{-14,-14},{14,14}},
            rotation=90,
            origin={-44,328})));
      WaterHeaterLib.BaseClasses.LongWaveRadiationExchange radTopAmb(A=
            datTanEnvTop.A)
        "Radiative heat transfer between the top of the tank and the surroundings"
                           annotation (Placement(transformation(
            extent={{13,13},{-13,-13}},
            rotation=90,
            origin={41,327})));
      Modelica.Blocks.Sources.RealExpression absIRJac1(y=datTanEnv.layers.absIR_b)
        annotation (Placement(transformation(extent={{136,332},{72,370}})));
      Modelica.Blocks.Sources.RealExpression heaTraBas(y=-tanBas.opa_b.Q_flow)
        "Expression of the heat transfer rate from the gas to the base"
        annotation (Placement(transformation(
            extent={{22,-22},{-22,22}},
            rotation=90,
            origin={80,-284})));
      Modelica.Blocks.Interfaces.RealOutput Q_B "heat flow rate of the base"
        annotation (Placement(transformation(
            extent={{-23,-23},{23,23}},
            rotation=270,
            origin={81,-383}), iconTransformation(
            extent={{-23,-23},{23,23}},
            rotation=270,
            origin={68,-380})));
      Modelica.Blocks.Interfaces.RealInput T_F0_y annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={232,-380}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={154,-370})));
      Modelica.Blocks.Interfaces.RealInput cdot_G_y annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={318,-380}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={238,-370})));
      WaterHeaterLib.BaseClasses.buoHeaTra buoHeaTra(
        nSeg=nSeg, QDotPilot=QDotPilot)
        "Calculates the heat transfer between segments in the heater caused by buoyant flow"
                                                     annotation (Placement(
            transformation(
            extent={{-18,-18},{18,18}},
            rotation=270,
            origin={70,142})));
      Modelica.Fluid.Sources.FixedBoundary boundary[nSeg](
        nPorts=1,
        use_p=true,
        redeclare package Medium = Medium,
        p=347700) annotation (Placement(transformation(
            extent={{-21,-25},{21,25}},
            rotation=270,
            origin={131,197})));
      Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor2
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,264})));
      Modelica.Blocks.Interfaces.RealInput TIn
        annotation (Placement(transformation(extent={{-458,158},{-418,198}})));
    equation
      for i in (1:nSeg) loop
        T_WL_avg[i] = sum(T_WL[i:nSeg].T)/(nSeg-i+1);
        T_F[i] = (T_F0_y - T_WL_avg[i])*exp(-((h_cv_F*Modelica.Constants.pi*DFlu/cdot_G_y)
        *((nSeg-i+1)*LFlu/nSeg))) + T_WL[i].T;
      end for;
      T_F_avg = sum(T_F[1:nSeg])/nSeg;
      T_WL_mean =  sum(T_WL[1:nSeg].T)/nSeg;
      connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
          points={{92,-46},{82,-46},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaBasWat.fluid, vol[nSeg].heatPort)   annotation (Line(
          points={{7.95401e-016,-36},{7.95401e-016,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convConBou3.solid,tanTop. opa_a) annotation (Line(
          points={{4.34812e-15,124},{4.34812e-15,176},{-0.666667,176}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaWatJac.solid, tanJac.opa_a)   annotation (Line(
          points={{166,20},{188,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaWatJac.fluid, vol.heatPort)   annotation (Line(
          points={{138,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor.port_a, heaBasWat.solid)   annotation (Line(
          points={{1.83697e-015,-142},{0,-130},{-2.66453e-015,-108},{
              -4.34812e-015,-108},{-4.34812e-015,-64}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor.port_b, tanBas.opa_a)  annotation (Line(
          points={{-1.83697e-015,-162},{-1.83697e-015,-252},{3.55271e-015,-252}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(finCoef.y, heaWatFit.u)   annotation (Line(
          points={{314.6,199},{224,199},{224,134.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaWatFit.fluid, vol.heatPort)   annotation (Line(
          points={{210,118},{114,118},{114,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convConBou3.fluid, vol[1].heatPort) annotation (Line(
          points={{-7.95401e-016,96},{0,96},{0,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.heatPort, heaPor) annotation (Line(
          points={{82,20},{82,-139},{647,-139}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(Tair.port, theCol.port_b) annotation (Line(
          points={{436,46},{436,43},{412,43}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(TRadMea, replicator1.u)  annotation (Line(
          points={{660,-82},{536,-82},{536,-81},{439,-81}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Tair.T, TDryBul) annotation (Line(
          points={{458,46},{658,46}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaWatFit.solid, theCol.port_a)   annotation (Line(
          points={{238,118},{386,118},{386,43}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(radJacAmb.port, tanJac.opa_b)            annotation (Line(
          points={{315.48,-29.26},{276.74,-29.26},{276.74,20},{248.2,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convJacAmb.fluid, theCol.port_a)  annotation (Line(
          points={{336,76},{360,76},{360,43},{386,43}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(convJacAmb.solid, tanJac.opa_b)  annotation (Line(
          points={{308,76},{276,76},{276,20},{248.2,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(flueTemp.y, flueTemperature.T) annotation (Line(
          points={{-302.5,19},{-295,19}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(flueTemperature.port, heaGasFlu.fluid)   annotation (Line(
          points={{-262,19},{-246,20},{-248,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaCoe.y, heaGasFlu.u)    annotation (Line(
          points={{-304.5,57},{-231,57},{-231,39.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaGasFlu.solid, flueWall.opa_b)   annotation (Line(
          points={{-214,19},{-192,20},{-184.22,20},{-184.22,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(flueWall.opa_a, heatFlowSensor1.port_b) annotation (Line(
          points={{-118,19},{-106,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor1.port_a, heaFluWat.solid)   annotation (Line(
          points={{-80,19},{-62,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaFluWat.fluid, vol.heatPort)   annotation (Line(
          points={{-32,19},{1,19},{1,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(theCol.port_b, convTopAmb.fluid)   annotation (Line(
          points={{412,43},{420,43},{420,374},{-44,374},{-44,342}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(Q_flow_total.y, prescribedHeatFlow.Q_flow) annotation (Line(
          points={{139.3,-46},{112,-46}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(gain2[1].y, convConBou3.u) annotation (Line(
          points={{-199,272},{-76,272},{-76,110},{-16.8,110}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(T_WL.port, flueWall.opa_b) annotation (Line(
          points={{-214,-32},{-184.22,-32},{-184.22,19}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(tanBas.opa_b, heaPorBot)  annotation (Line(
          points={{-3.55271e-015,-312.2},{-3.55271e-015,-337.1},{1.77636e-015,
              -337.1},{1.77636e-015,-364}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heaTraBas.y, Q_B)      annotation (Line(
          points={{80,-308.2},{81,-308.2},{81,-383}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(h_WF.y, gain2.u) annotation (Line(
          points={{-318,272},{-222,272}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaFluWat.u, gain2.y)   annotation (Line(
          points={{-47,37},{-47,60},{-76,60},{-76,272},{-199,272}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heaWatJac.u, gain2.y)   annotation (Line(
          points={{152,36.8},{152,80},{-76,80},{-76,272},{-199,272}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(m_flow_in, draHeaTra.mFloIn) annotation (Line(
          points={{-158,464},{-152.5,464},{-152.5,398.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(draHea.y, prescribedHeatFlow1.Q_flow) annotation (Line(
          points={{139.2,-84},{114,-84}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(prescribedHeatFlow1.port, vol.heatPort) annotation (Line(
          points={{94,-84},{82,-84},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.heatPort, temperatureSensor.port) annotation (Line(
          points={{82,20},{-24,20},{-24,234},{-70,234},{-70,386}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(temperatureSensor.T, draHeaTra.TWat) annotation (Line(
          points={{-70,406},{-70,428},{-124.44,428},{-124.44,398.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(absIRJac2.y, radJacAmb.u)            annotation (Line(
          points={{385.4,-30},{365,-30},{365,-29},{344.6,-29}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(radJacAmb.T_In, replicator1.y)            annotation (Line(
          points={{329,-44.6},{329,-80},{380,-80},{380,-81},{404.5,-81}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(absIRJac1.y, radTopAmb.u)            annotation (Line(
          points={{68.8,351},{41,351},{41,342.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(radTopAmb.T_In, TRadMea)            annotation (Line(
          points={{56.6,327},{484,327},{484,-82},{660,-82}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(h_cw_B.y, heaBasWat.u)   annotation (Line(
          points={{-387.6,-50},{-16.8,-50}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heatFlowSensor1.Q_flow, buoHeaTra.QDotFlu) annotation (Line(
          points={{-93,32},{-88,32},{-88,163.6},{66.4,163.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(buoHeaTra.QDotBas, heatFlowSensor.Q_flow) annotation (Line(
          points={{52,163.6},{52,166},{20,166},{20,-136},{-10,-136},{-10,-152}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(buoHeaTra.TWat, vol.heatPort) annotation (Line(
          points={{76.48,161.08},{-34,161.08},{-34,62},{-12,62},{-12,20},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.ports[1], boundary.ports[1]) annotation (Line(
          points={{104,42},{131,42},{131,176}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(tanTop.opa_b, heatFlowSensor2.port_a) annotation (Line(
          points={{-0.666667,232.187},{-0.666667,242.094},{-6.12323e-16,242.094},
              {-6.12323e-16,254}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor2.port_b, radTopAmb.port) annotation (Line(
          points={{6.12323e-016,274},{6.12323e-016,298},{41.26,298},{41.26,313.48}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor2.port_b, convTopAmb.solid) annotation (Line(
          points={{6.12323e-016,274},{6.12323e-016,298},{-44,298},{-44,314}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(heatFlowSensor2.Q_flow, buoHeaTra.QLosTop) annotation (Line(
          points={{10,264},{84.4,264},{84.4,163.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(draHeaTra.TIn, TIn) annotation (Line(
          points={{-133.64,398.6},{-133.64,432},{-380,432},{-380,178},{-438,178}},
          color={0,0,127},
          smooth=Smooth.None));
                                                                  annotation (
          Placement(transformation(extent={{322,444},{362,484}}),
            iconTransformation(extent={{322,444},{362,484}})),
        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-420,-360},{640,
                460}}),     graphics),
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-420,-360},{640,
                460}}), graphics={Bitmap(
              extent={{-336,514},{534,-360}},
              imageSource=
                  "",
              fileName="C:/Documents and Settings/user/Desktop/waterheater.jpg")}),
        defaultComponentName="tan",
        Documentation(info="<html>
<p>
This is a model of a water heater tank.
The tank uses several volumes to model the stratification.
Heat conduction is modeled between between the volumes and the ambient.
The port <code>heaPorVol</code> may be used to connect a temperature sensor
that measures the fluid temperature of an individual volume. It may also
be used to add heat to individual volumes.
</p>
<p>
The tank has <code>nSeg</code> fluid volumes. The top volume has the index <code>1</code>.
Thus, to add a heating element to the bottom element, connect a heat input to
<code>heaPorVol[nSeg]</code>.
</p>
<p>
The heat ports outside the tank insulation can be 
used to specify an ambient temperature.
Leave these ports unconnected to force adiabatic boundary conditions.
Note, however, that all heat conduction elements through the tank wall (but not the top and bottom) are connected to the 
heat port <code>heaPorSid</code>. Thus, not connecting
<code>heaPorSid</code> means an adiabatic boundary condition in the sense 
that <code>heaPorSid.Q_flow = 0</code>. This, however, still allows heat to flow
through the tank walls, modelled by <code>conWal</code>, from one fluid volume
to another one.
</p>
</html>",   revisions="<html>
<ul>
<li>
September 01, 2011 by Thierry S. Nouidui:<br>
First implementation.
</li>
</ul>
</html>"),
        Icon(graphics={Rectangle(
                extent={{-40,60},{40,20}},
                lineColor={255,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,-20},{40,-60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-76,2},{-90,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{0,84},{-80,80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-76,84},{-80,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{82,0},{78,-86}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{0,84},{-4,60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{82,-84},{2,-88}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{6,-60},{2,-84}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{92,2},{78,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,20},{40,-20}},
                lineColor={255,0,0},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.CrossDiag),Text(
                extent={{100,106},{134,74}},
                lineColor={0,0,127},
                textString="QLoss"),Rectangle(
                extent={{-10,10},{10,-10}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}),Rectangle(
                extent={{50,68},{40,-66}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,66},{-50,-68}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-48,68},{50,60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-48,-60},{50,-68}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Line(
                points={{26,72},{102,72},{100,72}},
                color={127,0,0},
                pattern=LinePattern.Dot),Line(
                points={{56,6},{56,72},{58,72}},
                color={127,0,0},
                pattern=LinePattern.Dot),Line(
                points={{22,-74},{70,-74},{70,72}},
                color={127,0,0},
                pattern=LinePattern.Dot)}),
        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics));
    end ComplexTank;

    model SimplifiedStorageTank "model of a gas water heater without burner"
      import SI = Modelica.SIunits;
      import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
      replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
        "Medium in the component" annotation (choicesAllMatching=true);
      //   replaceable package MediumB = Modelica.Media.Interfaces.PartialMedium
      //     "Medium in the component" annotation (choicesAllMatching=true);
      parameter Modelica.SIunits.Temperature T_Initial[nSeg] = {273.105 + 60,273.105 + 55,273.105 + 50,273.105 + 45,273.105 + 40,273.105 + 35,273.105 + 30,273.105 + 20};
      parameter Real perInA[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0033,2.8428,-0.4415,6.1873,4.0134};
      parameter Real perInB[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1405,0.102,-0.2213,-2.8662,-2.0619};
      parameter Real perInC[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.0224,-0.0032,0.2329,0.5048,0.7896};
      parameter Real timDelA[nSeg] = {-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2376.6,-2660.9,-3112.4,-1971.9,-567.21,100.33,0};
      parameter Real timDelB[nSeg] = {812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,802.41,792.21,805.42,475.76,79.1,-14.047,0};
      parameter Real timDelC[nSeg] = {7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.9334,8.2512,8.1676,14.305,21.676,0.2408,0};
      Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
      parameter Integer nSeg(min=2) = 8 "Number of volume segments";
      ////////////////////////////////////////////////////////////////////
      //   // Assumptions
      // Initialization
      parameter Medium.AbsolutePressure p_start=Medium.p_default
        "Start value of pressure" annotation (Dialog(tab="Initialization"));
    //    parameter Medium.Temperature T_start =60+273.15 "Start value of temperature"
    //                                   annotation (Dialog(tab="Initialization"));
    //  Modelica.SIunits.Temperature T_start;
      parameter Medium.MassFraction X_start[Medium.nX]=Medium.X_default
        "Start value of mass fractions m_i/m"
        annotation (Dialog(tab="Initialization", enable=Medium.nXi > 0));
      parameter Medium.ExtraProperty C_start[Medium.nC](quantity=Medium.extraPropertiesNames)=
           fill(0, Medium.nC) "Start value of trace substances"
        annotation (Dialog(tab="Initialization", enable=Medium.nC > 0));
      parameter Integer TStatHeight = 7 "Segment the thermostat is located in";
      parameter Real TSet = 273.105 + 52 "Setpoint";
      parameter Integer RecircOutSeg "Outlet segment in the recirculation loop";
      parameter Integer RecircInSeg "Inlet segment in the recirculation loop";
      parameter Real Deadband
        "The total width of the deadband on the thermostat";
      parameter Real UA "The UA value of the storage tank";
      parameter Real VTan = 0.15 "Volume of the tank";
      parameter Real QDotPilot(unit = "W") = 120
        "Pilot light heat consumption rate";
      parameter Real perQFlu = 1/3
        "Percentage of heat transfer occuring in the flue";
      parameter Real perQBas = 2/3
        "Percentage of heat transfer occuring in the base";
      ////////////////////////////////////////////////////////////////////
      Buildings.Fluid.MixingVolumes.MixingVolume[nSeg] vol(
        redeclare each package Medium = Medium,
        each p_start=p_start,
        T_start=T_Initial,
        each X_start=X_start,
        each C_start=C_start,
        each V=VTan/nSeg,
        nPorts=1,
        m_flow_nominal=0.001) "Tank segment"               annotation (Placement(
            transformation(
            extent={{-22,-22},{22,22}},
            rotation=90,
            origin={82,42})));
      Modelica.Blocks.Interfaces.RealVectorInput m_flow_in[nSeg] annotation (
          Placement(transformation(extent={{-178,444},{-138,484}}),
            iconTransformation(extent={{-162,444},{-122,484}})));
      WaterHeaterLib.BaseClasses.draHeaTra       draHeaTra(nSeg=nSeg, redeclare
          package Medium = Medium,
        perInA=perInA,
        perInB=perInB,
        perInC=perInC,
        timDelA=timDelA,
        timDelB=timDelB,
        timDelC=timDelC)
        "Calculates the heat transfer in each segment caused by a hot water draw"
                                                                      annotation (
          Placement(transformation(
            extent={{-23,-23},{23,23}},
            rotation=-90,
            origin={-141,371})));
      Modelica.Blocks.Sources.RealExpression draHea[nSeg](y=draHeaTra.draHeaTra)
                                                          annotation (Placement(
            transformation(
            extent={{-28,-14},{28,14}},
            rotation=180,
            origin={170,-4})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow        prescribedHeatFlow1[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-4})));
      Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temperatureSensor[
        nSeg] annotation (Placement(transformation(
            extent={{-17,-17},{17,17}},
            rotation=90,
            origin={-63,389})));
      Modelica.Fluid.Sources.FixedBoundary boundary[nSeg](
        nPorts=1,
        use_p=true,
        redeclare package Medium = Medium,
        p=347700) annotation (Placement(transformation(
            extent={{-21,-25},{21,25}},
            rotation=270,
            origin={131,97})));
      Modelica.Blocks.Interfaces.RealInput TIn
                                             annotation (Placement(transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={200,482}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={200,462})));
      Modelica.Blocks.Interfaces.IntegerOutput
                                            TStatSig
        annotation (Placement(transformation(extent={{640,-230},{692,-178}})));
      Modelica.Blocks.Interfaces.RealInput TInRec
        "Recirulation loop inlet temperature"
        annotation (Placement(transformation(extent={{-468,-216},{-420,-168}}),
            iconTransformation(extent={{-490,-238},{-420,-168}})));
      Modelica.Blocks.Interfaces.RealOutput TOutRec
        "Temperature out to the recirculation loop"
        annotation (Placement(transformation(extent={{640,234},{692,286}}),
            iconTransformation(extent={{640,234},{698,292}})));
      Modelica.Blocks.Interfaces.RealInput mFloRec "Recirculation flow rate"
        annotation (Placement(transformation(extent={{-462,-80},{-422,-40}}),
            iconTransformation(extent={{-492,-110},{-422,-40}})));
      Hybrid.HeatersUsed.EditedBaseClasses.cirHeaTra cirHeaTra(nSeg=nSeg,
          redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{-238,-198},{-182,-142}})));
      Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=cirHeaTra.cirHeaTra)
        annotation (Placement(transformation(
            extent={{-30,-19},{30,19}},
            rotation=180,
            origin={168,-41})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow[nSeg]
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-40})));
      Modelica.Blocks.Interfaces.RealInput QDotIn "Heat entering the flue"
        annotation (Placement(transformation(extent={{-494,324},{-422,396}})));
      Modelica.Blocks.Sources.RealExpression realExpression1[nSeg](y=buoHeaTraMod.buoHeaTra)
        annotation (Placement(transformation(
            extent={{-27,-16},{27,16}},
            rotation=180,
            origin={169,-80})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow2[nSeg]
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-80})));
      Hybrid.HeatersUsed.EditedBaseClasses.UALoss uALoss(nSeg=nSeg, UA=UA)
        annotation (Placement(transformation(extent={{-314,204},{-270,248}})));
      Modelica.Blocks.Sources.RealExpression realExpression2[nSeg](y=-uALoss.UALoss)
        annotation (Placement(transformation(
            extent={{-24,-13},{24,13}},
            rotation=180,
            origin={168,-111})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow3[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-110})));
      Modelica.Blocks.Interfaces.RealInput TAmb
        annotation (Placement(transformation(extent={{-502,178},{-420,260}}),
            iconTransformation(extent={{-494,186},{-420,260}})));
      Modelica.Blocks.Interfaces.RealOutput TOutDra
        "Temperature of water going to the draw"
        annotation (Placement(transformation(extent={{640,-32},{700,28}}),
            iconTransformation(extent={{640,-32},{700,28}})));
      Modelica.Blocks.Sources.RealExpression realExpression3(y=vol[TStatHeight].T)
        annotation (Placement(transformation(extent={{172,-274},{232,-214}})));
      Modelica.Blocks.Sources.Constant Setpoint(k=TSet)
        annotation (Placement(transformation(extent={{190,-184},{228,-146}})));
      Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=Deadband)
        annotation (Placement(transformation(extent={{314,-224},{358,-180}})));
      Modelica.Blocks.Math.BooleanToInteger booleanToInteger
        annotation (Placement(transformation(extent={{404,-226},{448,-182}})));
      Modelica.Blocks.Math.Gain QPerFlu(k=perQFlu)
        "Percentage of total heat transfer taking place in the flue"
        annotation (Placement(transformation(extent={{-330,360},{-310,380}})));
      Modelica.Blocks.Math.Gain QPerBas(k=perQBas)
        "Percentage of heat transfer passing through the base"
        annotation (Placement(transformation(extent={{-324,324},{-304,344}})));
      WaterHeaterLib.BaseClasses.buoHeaTraMod buoHeaTraMod(
        redeclare package Medium = Medium,
        nSeg=nSeg,
        QDotPilot=QDotPilot)
        annotation (Placement(transformation(extent={{-218,338},{-180,376}})));
      Modelica.Blocks.Interfaces.RealInput EffTan
        "Conversion efficiency of the tank"
        annotation (Placement(transformation(extent={{-460,60},{-420,100}}),
            iconTransformation(extent={{-494,26},{-420,100}})));
      Modelica.Blocks.Math.Product product1
        annotation (Placement(transformation(extent={{-376,356},{-356,376}})));
      Modelica.Blocks.Sources.RealExpression realExpression4(y=EffTan)
        annotation (Placement(transformation(extent={{-414,410},{-394,430}})));
    equation
      TOutRec = vol[RecircOutSeg].T;
      TOutDra = vol[1].T;
      connect(m_flow_in, draHeaTra.mFloIn) annotation (Line(
          points={{-158,464},{-152.5,464},{-152.5,398.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(draHea.y, prescribedHeatFlow1.Q_flow) annotation (Line(
          points={{139.2,-4},{132.9,-4},{132.9,-4},{126.6,-4},{126.6,-4},{114,-4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(prescribedHeatFlow1.port, vol.heatPort) annotation (Line(
          points={{94,-4},{82,-4},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.heatPort, temperatureSensor.port) annotation (Line(
          points={{82,20},{-24,20},{-24,234},{-63,234},{-63,372}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(temperatureSensor.T, draHeaTra.TWat) annotation (Line(
          points={{-63,406},{-63,428},{-124.44,428},{-124.44,398.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(vol.ports[1], boundary.ports[1]) annotation (Line(
          points={{104,42},{131,42},{131,76}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(draHeaTra.TIn, TIn) annotation (Line(
          points={{-133.64,398.6},{-133.64,448},{200,448},{200,482}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(mFloRec, cirHeaTra.mFloCir) annotation (Line(
          points={{-442,-60},{-344,-60},{-344,-170},{-243.6,-170}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(temperatureSensor.T, cirHeaTra.TWat) annotation (Line(
          points={{-63,406},{-64,406},{-64,416},{-94,416},{-94,-78},{-278,-78},{-278,
              -147.6},{-243.6,-147.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TInRec, cirHeaTra.TRec) annotation (Line(
          points={{-444,-192},{-344,-192},{-344,-192.4},{-243.6,-192.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression.y, prescribedHeatFlow.Q_flow) annotation (Line(
          points={{135,-41},{125.5,-41},{125.5,-40},{114,-40}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
          points={{94,-40},{82,-40},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(realExpression1.y, prescribedHeatFlow2.Q_flow) annotation (Line(
          points={{139.3,-80},{114,-80}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(prescribedHeatFlow2.port, vol.heatPort) annotation (Line(
          points={{94,-80},{82,-80},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(temperatureSensor.T, uALoss.TWat) annotation (Line(
          points={{-63,406},{-64,406},{-64,420},{-92,420},{-92,276},{-340,276},{
              -340,234.8},{-318.4,234.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression2.y, prescribedHeatFlow3.Q_flow) annotation (Line(
          points={{141.6,-111},{129.8,-111},{129.8,-110},{114,-110}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(prescribedHeatFlow3.port, vol.heatPort) annotation (Line(
          points={{94,-110},{88,-110},{88,-108},{82,-108},{82,20}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(TAmb, uALoss.TAmb) annotation (Line(
          points={{-461,219},{-391.5,219},{-391.5,221.82},{-318.4,221.82}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(onOffController.y, booleanToInteger.u) annotation (Line(
          points={{360.2,-202},{379.9,-202},{379.9,-204},{399.6,-204}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(booleanToInteger.y, TStatSig) annotation (Line(
          points={{450.2,-204},{666,-204}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(Setpoint.y, onOffController.reference) annotation (Line(
          points={{229.9,-165},{280,-165},{280,-188.8},{309.6,-188.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression3.y, onOffController.u) annotation (Line(
          points={{235,-244},{274,-244},{274,-215.2},{309.6,-215.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QPerBas.y, buoHeaTraMod.QDotBas) annotation (Line(
          points={{-303,334},{-244,334},{-244,338},{-221.8,338}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QPerFlu.y, buoHeaTraMod.QDotFlu) annotation (Line(
          points={{-309,370},{-270,370},{-270,353.2},{-221.8,353.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(vol.heatPort, buoHeaTraMod.TWat) annotation (Line(
          points={{82,20},{18,20},{18,232},{-20,232},{-20,306},{-236,306},{-236,363.84},
              {-219.14,363.84}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(QDotIn, product1.u2) annotation (Line(
          points={{-458,360},{-378,360}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(product1.y, QPerBas.u) annotation (Line(
          points={{-355,366},{-346,366},{-346,334},{-326,334}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QPerFlu.u, product1.y) annotation (Line(
          points={{-332,370},{-344,370},{-344,366},{-355,366}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression4.y, product1.u1) annotation (Line(
          points={{-393,420},{-378,420},{-378,372}},
          color={0,0,127},
          smooth=Smooth.None));
                                                                  annotation (
          Placement(transformation(extent={{322,444},{362,484}}),
            iconTransformation(extent={{322,444},{362,484}})),
        Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-420,-360},{640,
                460}}),     graphics),
        Icon(coordinateSystem(preserveAspectRatio=false,extent={{-420,-360},{640,460}}),
                        graphics={Bitmap(
              extent={{-376,456},{494,-418}},
              imageSource=""
                   + "waBKAPPKvX6QdSmLL+Iio2fR0CI6o1hEzTIrjB7P80RnLCO2Nzz5zklRsmgbJ9ENiCUGsNAnnq0NDFZAsmEmteqUHPceiXckZjYFrSjygBTdg8ijqLjdRl7HnAmNlBmnwpcxYbWotLDRDi/il6K0p1Hp6DlcPAeqTpyv4DLTuGtGiUdqTp8F6hdMM4poLCQ9wHh+IGe4b2ED84JXjndL8pmLcnfHPolDInGkyFdeCpvMZceoh+SYcdKQwpQgJx/IGpEJ6wOLfGD/1vdImEksex6bMHQ8H7LXkEZ4rxydsvFMOjZpaXCh8PQMrhoqFYzkWIyOQVSfGAAW+gOzMQBgx3FCMzDywEYLKGuXilVwYr3+qSFHaqYBaeoE4RrKmTJLVgmKTLiHD4lNJpjfx1LbpMFEQ50kV2l0sUZLBKkuLlYhiVGnhBMU5kVMLcKQDi38wKxyYrPstNZKKWYeVIswuZiGdrnkRPk5c4bRrT0WNhRIG6bQV4eIzJRtPHHdy8kzmaGDddHcOmohCxuYyWE8rKkTE5FtiSwocAx9sRhqDoXx+BjZUdQ2oiwNe/QF+6yPlJOwpY7zp3b2J1PbVNAzLUXJTHJGgp6i9WxYaPLN9pP0JaPjEW3BxDG2/Sd/HOouhorUJ9bB+A2VqR9nbFKZkURgcwY7k8kYRXT+5rBL4qDZQJTVDNKI+VMFiVObWArerTSQPj1OSDyeUpPd/l/7HQdZplg0uotSlGZ9zFGNsDgMEN4IkxbDHPMLHSiOLbP9J/mkJhQ7ynli6rpP9fupRNbDV9swg4yFZ0lLjua+RQSYk1tGEReacztgwDQxn2JkB80GwtAzGnYXrwkM9QbjyduMEIEgFXx8KsV0VjIw3m6Snw8kMbTUI7SBgtJYtyaCOAiYEAjYI8prQD1tskQYXYl1KPySpFdJJs05A+kFCQ+HUvzu/SVFXz4reUi9IJOwUyZT7dSTzyKJWfiBCUOfPTpatu2G+gOVik2sJMjYJhTtg0cURoPefANg8DsKawxoqPj7fTgQqRBFfYVIVB4oEplApDWoj12a3p7U7JlZxN8A9yxfRAQgIXCw4o3fu3k6Qtx0hqbCO/g+3RMmpYsjmJWZXtjzTajjHcrgpu7xg+vBSvtCArEKlDc4JURccK9P1wz6/+PeyJgREUUhMGToMEDBxHeIt0HKCXWKTxFMJWvat6cLIRBhwbV4a5LjaNw8RmN9TgacNWhbMGxIjXbyY6HUDHtOZtXzzzO1PL+wgRnlBJicfszp8RoJAsr3AyOZ2UjAYhaMM6rkxz4svqkTvC5sYMz1mnMD8suc+ahfKusoZChxFOlBSG7zQ6OFrH10vDBjknbo4ihZKgCw6J2euVPOb+4v2OCQ1Yifherkc6gUqcJO6ElmsbCKt2SP55cWuNBcZAvFH5NsXY5aVFYtLKdKMLRkO+pHyO+dnmIyXRBljpbtxqjBL2xg/FgoSu43ao9QauqZExeN52SGhlizC+unYmlDN4ucnDhrAmFhA9PY2oFd1zXtWVLKUAvaKONGhzZieHZUryCfVi3DNjJ9QqxXJ9ohl3yXGDFt0q6y4JdobBZ+CijGj5uTcyc7rmM4W+oMfjh1EL5UOIAWdg0hinlzBQcwFsrnIo95gHxPHVvfabjNFM42x4Hs7bXGfJWkMUbJRuVszOq8mn8A9PUSCyXvVrRCPFS0IrFzQ2pkP+ocfZGpnaw0N8lUN4tFNipnY05SnuotFzWyfTEAwCzfnaojlvqAoQ0tY9/LkfTL8ufcIbcfad/24Ng1TMV5h8pbLWzgVsI+kI1gFlSbLLIER1qOSeb+1O2/CIfkhIqDI7XHxq5Gcu9PNYmFDeyrPRTcLIcuuDGaI4qf4Uh0iyONfc0CfMvyclledM5joYM2Q5P1m9StLtlCnE/NEutfGENHNfaM4lMpQ/smppgPFEm6ssqFqUPJCxuYbR4wgBz77FTJG1OwIpZfzCrYbT+efQ6NpooUpCZJVEYyhlQ/kEyFp6VEuLCBYQYQOYwiNAowXPhBEDiOEwWwQ66oJIl5EtQ3gFJqE8TeVI9jizlLbBhYAABxHslCdDjdnKeUMl/RaOg6GzzRPMz8aM7Z/J7CoiJASHeX0hsSIv1R8tCQWSg6LxblNDAP14pJA7MhReV5S4sPQD7AN0fUMVwWk3aM5ui/Tx5SzzReHzE2S4cyIYPNbvRtSkKGYt/CBmZ1+6fYvzW04bFgM1x+gruf4FgWl3r++PwkRYnXRLHsAOpSDg1nU5GWsYmaJ7z901IUHnpNCtJD5DNljL2PJGWdFjawH35gKMZ/q9Cq8Rb6qLD9TE131Fdb1In3dcFNN+WaSp/m5C9S8BNlkW2NVwKDiTlaYiew0B+YF1+RFeBOUUd+FkIHMFYFNzUOTFUuzGpnmGQvn3+Bbngd9kpM5UYepB0h67KMOied45ZjAOvCBmZ1mPqA2cOypunzK2jhXY9FDjEm05hLiRWDUpXOhqodpyIwSSKJGKVcTqyVGnsk/V4q/VuyjXRo3ddc8JBxKKyxwGCeKVWwfmEDU937odAk+9Tdy60la5h6zJaKAhWJ47P6c6WUUanj+cwHDlS/UOqdGOMVCq68qbD2Dl2aUyl0JHPc/D7ZmG9MdRT5bicqTryYH7jFWcEYW/XQkZeZJjD5YdLYu37qBcnv8SzYSpiz18QEnRb5wCw9AGBq2D0tzKc4RJgMJKa4qY8tlD2tBDqnFz1V22E+F/2B9QNFtPTGWHDjsSXnzFtOiG/CxHI1+eeZFSYNbb6AjOHJ5GzQwgZuTUQ06q459PbnhxO3JITLd2L5Npk1qZN6BUadC13kA/tzxEQ3xITxA0ypRDp5Tjyjt0h9WEHhmSKvZkDmpENeaHTPLh8AKVD5gSWkQBTQnyMozuMJCZoTA+eFIrvJTDH6sGj0r5RKgiTmxxA+D4sYUTHj/BWcpSmWSkkU/X2I0ydtzMgGZ12TJCgUag9Dri6O4XTq18U0GKXQcM5p3jbfA2EDSBDRH2DCSa5ywfbmHPB+ki7LGTmHgkQBY5/ktHorFrHQBJEQU0xjfbw7mg8CpsJNozJI5yTxM42OctT7xjCAfAWGLNh0USObLSgUFUMfmvJGvXbq0kzOzufr18NY/Zij0u6mxjMFZWTHzhmKnGGqOttrxQ8cmHwAw2p8Ecgl6yYV4W2eHPcctZtyutn5JNDT0Mnm5AWZf0s4mDM0OSIuUwk58vm5RoVritDaZb3jeJDLSOQRIwlpxlh4c7KFhQ1M/4gxME+emGYRv4Vl/1jWMXkpbVSSn7HfaLzlOEn/1aI+sE82EK7LyV1wMpNL3RpTm5NHGp6cvGw8SSlg7L0mJxpMsgXHvNlCn3hWh23bIZwfBIHj6Hy23ejvsxKDpPBMMmnO54TLQfpTg6gssqpYMpPahhSbpQ7bdZJF36yPHBuHiC3rVH7i8KxMg7TRGYhidKH+AERkFhZ+YF+dQ2wv32ennCrdPnmQMxKINFRYZCiz6oR5mjGPkci3FzYwfRu4hRhFQRsYdVwhRxg4a0FP0qORqrBUEAZItbSFDezrEoxltzm3/5Z0B0EBTLYIjJszC5+joZYf5U+eVs3nun992QDkstjmb2aT+41oJD2taDiWnxR0NVPxgWMMlJpkINooNW8m8XrhVrmFYtFj5yEFY6dJ5hyKzEnus0tc2MBM1l/B3HRG4VDxnDh1dWaFQ6ljK6lgUUxMLR+qgsJdGAVjvHCgfm4t4UDYAO/9FGhKVzT2KpwiSWMqvjk57JNlrvm9OkXWdMGnF78mpo862b89P8fB0SculcphBXew8fTpbqSUMV5/pZSU0ugWh3z50T7+MH41P4aPzAlnU3VuYismOocQ04dNtuNHPkimdGQqR3ySPCIsaSe2A2Eklgf6A2AwTAPzR8sLDNo050aliMOd3vO86FvAoFRvHhkEgZmpiF2BhR+YsivYq4RBWRtqQQqdWPAwqk7Rayt6HpuIKSpukgXdLnRobkECkHODU1UfUxc9FIYUYayZgZgreE1AajlmkFUEyNlcFn5ghjcsWvBPxs1DBxGnkgHv2068z4s+psKUmn+/5pbNQeEXGj0FTCqKjjfKOJU66NjDMbc2IoplWal+cv7N40D1jUIBGZUcZrUJ79NIjCOviYtZcKPJunqpck9ziA4dwFgIshtmUkOjHGqdMTrsYXRYfTw92X2O+5MxT1anXawukYyaFrjQvsZFxVPkIuY00i74mts4Rrq2MTNIvZLFmQ0WuNB0DlMEMDhdKI4bBbPDyDXWu2Jg+MENNpsCRr7M782tRWaTc4e7HWUVqpKTkFlFgxyWyOJoepauTHL2INUAkkIK6fnJ3tbD6DYfrQeHJQLzjVIKcpSbF35gWptZjndO3bmLBPQ5vGs5EXOW+MUYjiJssxupv3+S1oz88zTbStgCWBAMCB9csN16YQOzSkljYzT5lpDTgpaaTuS87NDsYmisVZyzZGgDbIwQbuzAKbqg95STIyeZvyMsbGDmDgESzQhTR2ZSodX8FT9G49B4eXnq2029kp3z0fJnjhf5wEzy4NR0LXUWPt8YCrqLrJA6S8puvArxqBwq+e+bFG8eFYyKPjHml/L9aijGYTqvFn7gVgIgI9WGh26cqTJHWRYVM4+CM8FJhLH4oEzq8P54QsU5W35qihUL/W/J5MbrDhcaumkVTI6HbqX5TUQ5LUmjOoFpffxUoc7BCUxnZCLV8oUQoQ7NPBPOHcz6QP+Ki0JhSc69zGo6yqKrSG6xUwnBR+J9SJrilNyoiDfnDoPIokY4lAlz4QfGuysAAMgACMAsBpSjDEDMBJwrDSSZgRnN/hgKh0YKBXtAvdQVlpPqJSUZU1GdEP7PWhyplCQxNxLu8YhIZN5URBGbvZtd/8ViJEKRFzfVD8lMzMSMzEjERMCsIXsqKFzl5hqGM8QAoJQKggDmtURwUPxAIvOL6j3E0Juc2DT2sCjwN4Y7mm6AMRI2MCEclBrbRFdLaoNJEiGN6hPPZzIAB69fKKnnnsQuiwzXxwayYPYCTckPMoaxJft5JqfCzsqhU3uHYtf5NcE7fdBy4qzFPXSoPJ5LTCkzmXADzt/Ls6pm+YIJRbxNanPheHqYNDj2Ew94vefEWW2ho/KJ56+M6bqCnPMZqbqcLNPmF7yn8imy4GDIYDNYcO7utxkURydj7XRD43tmztrRptIaMHTLTF3W+W0RBc0sWu/L8gz5jhdy6wYLG5h1epxeUi1SWkploYsur+i/EUdqXjlsL735wokFOhq5C3PyNRmgj4WZ993brz+1PT5ZSx7qkYoXYRY2sK+ZQDJRM2slB9XGRIfwPDixIhF5kZy4IAN21hTYqOecaidzZRcHSn/AJF4GU89KiFOj8ChOHyMLMb+JQXv5yW4UlUqEB3u6ZYRImRyI2ufQybiCO3rBjHZoi2tq81WoPBA2BeV0EM4h3+jB9AOzyFknJx4sgrTc8vVRcIAu61lZKcFCi2n/7l8+dDNJx3wROKi4dt20Qvb8hTt0ZmVo7l5wfAIyYNz5N4ADZAOJfswpgnHF10FxnzBFLrqcRiYYi4a6oCVnvWnSMBb6A6+j+GokTp6CeUXxN8qaAx71daZ4JDOEhQ28Bo6simwRNKa4AUwFNMyPQ6DY3FbykfkfJ2uqM/VkUlf/Yn5gZit3WEAyNgNcbutBn35iQN0MkSpB9N+82x+b/Nx7tsPnewaPH0IjOdQAivw+6wSyHNot0UF83eJCtPeiS2FoxffX/440Lzu7cys+tDXeJp0VIsam1ZJH5K8LG5jO3g8QqdAystYaEUlrZCClwRb5AyWxDT71x9RpmPCmaq2FEIPdmhHBfMHg1PbGGHtop5IrI42ViCFtEjIshQ3eyFQ5OCmNnE+TETPaZLUk+nkBQCkNAFLKUGUs/Gv40Yx2gRExABAAwveVqdyYGyTEfI0UHwg/gGRWYf8G92VpxNT3mmkRhKS+TurI70hxfBEEKWYkWZodqR8zyhgQLS9GJnXy8h8YzNksYqF9wnDyGRSnlYYWnEhOvkJW3hlbZ6MqyYZaL7GTzJoaK3jy+T2qkDGVcat00V+/uNBQGpUiEe0+x+5JSygoVzF0Tjp/TmgqizI1toyt+yQwutDoni+PMZJKX86qGmlmKkcealR+5hwzGFWQPJ85PWftRuckIVH9SC1cLnjmbtmiz78BxcHE2WlkTEhCkUN6lVU7zyqrjXTC+ZaWJDRY+IHZrHJIj0dntDrzzaA4V3tqPF18sxw6FJrv0MaIALO415P7fYwdbJ4bhw4g73ROKja2F44CGkkUpbhniNHsZDURFGFyLv74HFQ06+kFa+RZjKtZRLyLnHi2CbFlWWGjvNYaAEJN3NRoNTWsz9q3oqs8xrJfpMaUxdQSe7vkQsxJQvK/NxchHKjI3+lTJ4BzQp3Y+efozQydaZ6H4yBzLRZ39/PmqcdIDFIhpvGIIcaY0ckPycJdYz4jou+mJAQAACAASURBVIOZEw+9ylmcQlkQ3rSqY9PiZM9vTo75seICeyMt0DGykUUsdCt3/aGx8iTk5gWfO3TFj9dolKqnNNJqHg8OggItcSb2CwvJ8xkRHRT9AcCcoH/q3j+MgFNLuWNsgUXS94K/GRXunFxRHDLKfDkilgs/sH+uIAd4yQJYhr54liuY4j0eutxz1CCLLOux4/KhWXvqlclqIF3YwAwNYDyJl1mEDQXzgaylk3zT/HL10NB8KNVkkY9fZFOP6TAs6gOzXvti1FBkjPnxmRptwVChuKxLEV7haQVCU8G1FvnApEZLTELI6KUPVYdTQyMhUqRlov2VyXuZ2u4fa5WJBSpJgDwLqs+vQ6emHOYzxtZZTK8gtXqVmkbHSlpJXDV6cZKKlDG9qegYcThmYFLknGLFwg9MmBNLmLj7BRK61jlyYwXr0GOw9IzdLDSV7D9/tiEnr0h9jJTSSBAs+IVmbwNjZVrFNdxzNmmYUlPkqIKto5Km5GTVUKBnu0gJYihB3SIfuMUY0ag4TH7OkBzCSvUnWct3JFHraX3efEKXsVu1swqOZtY0f9BsYQMzXPTFOWKnVbgZr/stx6Fl6UTNaGsoQqaSH7zNf3vcAbeBybUehrIIFo+jZu3Kxqjs5tObJj9LPl1fTp4dfVMRORY2sE8GMGFCORQezWmLKBiKDD3/gmW+8ZLv1J2i+KBjjhTfJIn4rT0O1Ez9eMlikTg4te1xpOdOK3UZ7ylZTaOTuLIiOkuhGNk8B0gHpV8IMdqmO3RQMMkWmPWUcDa8CKqYT7kc68yDbGGE/OWeyiAEifpGtB0wuQpzkvhUuQBzbc1gRj+EECIcCUom9GH8w8xBEIR/ncMSwet6pn4kG5vKu+SMUI53SlnhU8Ezz5o8njCejHJ1CSFMiWCRD8yXAYwdoY4X2GSF+GMvuJz5h1Hhoyy5pKG+DrLLAtF+6eTk3cIG5ssDTF2upsjLFgyBxkhwIVehfmjFI+es8nl587U/FvPE85tCjKQHk9N2NlK7W+qGOhXbGzVLhowGkJwEuqCeXzQfiObEizrxHMFH443M5jcIjaHgG4thxkP9kzFe8TrJeIKTyU+U7I7O4QpY2MB85cGzuD1FRjEnpB/M18Ms+AHH8EWpMU/qNGmMiWORE+/DQQMadkNDDaEiwezAoskj+Mlr21CgXlG8gDUUZUr6utRZtujDDC60yImnu9YpZ1cz0efgR86SCk0mjjmNX9F2+TC0Nbc2Z3ONtdGbH6VEz+tKiUL02aFDEiQiEgKYtVI+ABEpz+tGXyH8PpXs1pxPSCgUxYiy5jxjRZIwSowSgUVRHejrK4vovxGpAQAWwEIKW6AFg2EJrXUQBEqpaalxLmwgdfmHVOM6/M3Y4GMOzDK56yCiWq2mtfZ936ww13VDqvRutyuEKJVKxjCWlpaKRCxF1lZxJpXx+LCSni1mUclq2sIGZhTxC0jraCjeJBybl011+kMTjJyTVIqazZbrliuVmlKKiJRSZrN0HKdarUtpd7tdI2+zvb2dFbvnE80XV6RMIkIwOhVFFtdiTM9m6MW/VcfB6RfaU6sHmbUIJrkHk9+/er0OAL1eDwDC6qlSyrIs3/eNVJFt2+b3rusyQ3LSZVRUt+BqzgJG89tmi7QhxVKghR/YD2MYbGlivAQx32unci8XPLfr169XKpUgCIjIsqxer2f2y52dHSFEpVLRWhMBM7ZabRNtp2YvWaIvRabhspweFJj2ymrBil2unAm7hQbHjMIgAVExUxZZBjAqThL+ZrzgOHmsrq5ubW0JISzLCoLAtm1mdhzn0KFDvV7P933XdU2qsLy8HPac5S/cMTb+pEXFPn4R884fm4Q0cqFFLDTrfMB87fHCqWD50HwgaQBZO1wMlxzq6Hd2dpaWlo4ePWrbyNSvodq2pZRGoO0bO41Ggx13d7ddr9e73Z5tW0m6iqwG2OKaOlHgEgZKkiOZ1khzm4t8YH8MAPfmZJiqpV7k/qVqZU/rzrmue/Lksd/4jX+0sXH1+773e4Mg2NnZeeqpp4Ig+JVf+ZX19fXNzc1ytWrbNgAYNvnYco9iozmFheI0E9EcYFT3MrQBNnUYbaFTP6vDxBXm3z5MjlaWUkZ+cSB2n2ILLroEQz6f2CZnwv0oWm+2/NXV5U984lP/8B/+g6tXrvzmxz62urp85dJlImLgX/i5v33PffcDEjNJKXq9nuu6zGSQdVNqDTdvg8cn7TNVbSk18olq5sGgsx8GBYGojjLsVctMvr45sWg+ECKhScmFOTwO3DwxYb98w6L4TpYPno5x/1zXNYMjQgillMF8hBD1eu38+fNXr1xZObQMQFtbWysrK9Vq1XVcpZRrO1JKy7JM0UBr3el0DHhq1quBU2eGLI+PkqXq6xhsdP5J2A/ULGV0Vxs1kR0vYM3a4QytiAlpQu+EiETcaDQAiYhOnz4tBdy4vmnL8urqCduR3W7btu3d3d1SqeS6rlLKIEXmLQyWaupr0RL1dClQx2MuSqUgmJ144cIPpH+KmA0AYFg12/+NUyllmmSCILAsq1Qqmaf4vv+pT38CACqVEumgVquVy+Ver3fmzJmj64eJyLKEFOB5nnm853lh2GM6DoQQruvuw6coMoCW/zr5qlYLPzCDRUnIhBOOAuYnBgXXkOmfcRzHfC+l9DzP87x6ve5rdeXaNSFlp9NRnn/9+rWdG00i2Nq6vrm5cWqp0W63G43lbs8PtBaWJRFMUISIxqiMIU29DbOIalNBzfAsRvgFLjTbY2+NRhQBc0IoM4tycCTLSTYvIKJSynEcIUS73RZCVKvlarV89NjharWMQDdubCHCm9/8xqNHj7Z2dp955pl77n9ACuh2u57vC9tpt9qW6J+elNJxnLArblqBUHLdJy9LciPIIv96rQQ/B9YPJEv9I4kRTVeFIEwKbds22XClUmm1Wk9+7clut/vhD3/4zW9642997DevX994//vfr3Xw+ONfPnv27MmvfvXUqVOBglKpVK7VV1ZWHGnZto2InU5nd3fX8zxTX0tmxlMxhqgBFEyccqq/qXXrhUb3zG0gzA0G4wRTQ1HGECljZqWU53mWZVmWdeHChU9+/OO3HT1SdcT6ytKv/++/9s//2T978MEHPc+rlksl13rsM58ACmpVt73TPH/u20L3SrbotJuXL728ub3JFatybM1aqfsSAAAZAIAQCEEDT3jpIJfnfTwg4bVCuvga8wNsOkNv/oKwf/tRIJrSWB+PB2YcIuiSrOzmsMqlj6oQCCHMTtJXAxCMAolIg0bkTme3Wqn4fs+qVy+9erEsZcmWbGmHfQjsG9vtlbUlAVh3y4eq5fOvvPDlL3x87fDpF8+9uLtz/eJzT0un/OL5l5mZG5XPPfvtn/i5jyyV67c11lZAiCAQrtTAPmkhLVAgEYl01CVGpxei8V7WLzNgIjBYAxHHvNwAdUhjEWZh4GmTz0QlCFLnLhY2MN5Bt/wMcvrygyAQACaCN37A73nt3Z0u+ZI7558/p6AaMD73wtkb25s68DauXV5Zqjx/7uzZsy+WShXwOq0b0mOuN9xarfHs1UuPf+OJ8qeP3bZ+4pf+84+Iay2ggJlJAAgEwTBIRHNwyVg1N7ruZxVmCBGTIFjEQvvoMSbrLSscDzAAIwNy/zGCBRIKYSnVLxL7gSZGFdDu7u7tp2+/8+4zniYS8sjR9fVDy0uNimvJ1dWle+656+zZ53bbbenYXd+zylWPtbC42nDZ4nK1dGx1fblUFz43N7ctywGUrEECCkAEQtIIOpV4KxWiKaghMmEQP+dKZActJ74lYWgWYJLk3gmCQFjyyOq6bYHjvqnX6W5tbziOw75/x+lT9VLl2PHbT9x25trG5pvf9r0oLIHs+R0OugTcUf4dt5+8//Sp7tWr5ap66VvfvuO73tZG1szIKBCZAIARkbVxCENa6HLUyIfipKM2FIWBE8wrwYR1gA1gwln1gjgShi8eWS5KaURUDABoej8DrWq12teeeqJedY+fPG6VXOV3tre3BMiKvaxZnH3uwj33vPHo0Z1Dy+vVpdpOe6eqXWgLCyGwncrq+o8+8kinR7vNlr952RXKE5oZSCMhIpo0STJruLnBR4XJbm7Ke4XMEFEwh1Gl2bPF4OkhOwEDsHnuqBdqvOHMhQ1Mc7HO9tJHECgkgMEqMcyy/ZQUhRCi2+12e/6P/uSHXnn1sqfx0PJqo+bubG0uN1Z3Wu1KvSGkXbJrd9195vKVl9vdnV20EdX66gnQSpZKAYg3fsdd2vMf/8IXynZVM2kBRMCEAMYXoMmPkhKDWQ3h+f5hJDx6KOK0mB84IOFQGon0ABsxEBMgg/lGkGZEAcC+0iXL7nZ7F169eu7y5pPfekG4J4TVaNSrJWl73Ute0ANHSVuUZDnw/xJ1z9PkYxXJqrHV8zpYL9uOWLWw17y+cfn5n/rJ9zUV9kBIBCJmYGQhSDFrFBiiZql9sqmfJQl5FTeboVdszgX5Dr4fmKlJxELqPuY4+DEIAlMkNtViRNzY2tCW0zh0aGPHUZ610ezYQjbq9d1Ox20I3+/0tjfLjm2BChR7LC2rcUOR5dS3t3uC/XJ7Z60C5Vp9q9Xs6F4AgYs2MTOgYAEsiBglMuyJPYrgQhMu9Dlyy69rGxg01ptedq21iHTYF7eKsFM/trizkmA2Pffh4xFMTUJrbTBBz/NsKSyBvu+5kn/hl/6Lzzz+zS9/fevlKzury/XAC3rta65Ld5w6TFwSgdi9sbW2tFSu1F96defy9evaFr4lAkGoeneeWf75D/7IE1/48532KxcuPrO2tiawLNCW6HqBdkBaAogZkIeqHd/8+CwQAPtJDQEzIkNi9iDkiYjyHaW6kajQQVT3IPr7eRujOYB+wHTXZGHSg9pQ3l6VbHzPBA0FIvfzAcaba840Tnuex0DM6Hld25aB1332289eu3S5Vl12rN7J246VSqWd7a3NrUtbG1dtyQ44ZSkvv/xKfWkZAjh928p2u2M3qi2ttjfboHyvsy0p6PVaNzauNWqVUrnMzJo0ABBwT/uWsAHiqE6sf2SSnTgZ/YcZNqQxvoQ6HdF7sZgjm3kGnMpxMFLvUOyO5gzsmvgbB+9skBRmtiyLmV3b0loLZMeWUoCwKp1u5ciR7/zGY0/3PGzutKXjVJcaJ08f73ZudHbba7UjQbd3bO20YnWs7DZbO8dXVjWKS9tNoPKKVQt2VAUrEqud6y0+RnbZ0QyaSAggqbUKJAjguOMatujFIIjrewZgZtZZ1BUxrr6kTn1+t8UiJ56tAcSkr0yBdqT0IOwjSHJO5fdWkOkPGOQDzAzIrBmRtVZB4FmWKJUrX/76c5c2ddtzGsuHt5r+xcvPHlotPfvsllDdoOupnmhUVyu1asDUpS4gN5wyCtkKWPXE5Wutz3z2y8K7dvttS6QkBGiCFyAGJBRaWKyZBMd7YDPNgEUS7hypazqZEcUgoGhXRUHagYUNjO+kk2Ink6i8RO9iKnOO+cbEIQCCEAGBAZgYACQCAAbKazRqJbcmJQpkp1K91OLzN3YPH76zF1hdD8vVw+3uRr1mnzm+9oZ7772xsfvo55/qcHmno2W5HpDe3dWAJOyq21gOIHh+6+qqTaery5rQ62nP05Z0bATSPmkfEZEYQDKbM4+cLUSuDDMwIwDfjJrEoA6QvsqzZufzyfxSR5DH475f2EChI8pvPBQFL4ggpUrrReMrIkZEwjg6ZFlWt9teW1t97rmzVy6/2mjUm80mAXtoN44e3e14yLJcrpdsn4nf+Zb77z91CIJeCe2f/ukP/PbvfbZHXJJOQEGl0fB9CsgCkFbJQqgKEbAFvg76fEQV1xZSB1ITohVv9x9PoTlfgCO1ESPJopXFLLTIB2abCicJIGBEerNU5pLkjzdxdIG81zDM7hsEAQDYtv3CCy988xtfO3LkcK+z28EqWfVmt1u3Gg6iI2nj6ktv+o5l6lz+ymceW21Ud7tkL52+794zX33mVY+Car0WeL7jOAiO7/davW4Ju2z5tkvs7bJus/aYaxYIQAcAkEEnrDcV+szYHYw30Dn7wlDt5JiRTEt1amEDmVv/Tffdv+imBUDHulOyBOiTR1Q5NGs8f2/L8c02YMF7+vgrlcrVq1fvv//+d77jrYdWll65eOFf/9EnAhUIISyBFPi9ANdWVzvtrYsXNm6rCuruIqHydrTntLevO7VSR7Utq6ZJClQoQLiOa1fY2+nstivCnInyVFcIZGaJFgBDxnrd+5HNdRMDBMlUum8GQoSALAE1EwKQmcxOZfhKff1kf8SCW2Wqmz3Q3vUrGIRZqgSaQQvR519ABokCUZovZjRkPwDCADipW1c4sxsj4UmGuaYtXjAgMRKDJlIaiQWAGGy0tm2ff+mlG5ubV69c2t7acCys2K5F4NiWALSk6/ncbHdXDx0VXNnZDhhtyxLnvvm1JRE8dPvKbUtWWSApEgKU1iilJgw6SnfB92S3Cx6pnu55SOw4xAiEA00AJALDW2o+svnR/Cb8AhBMgGAxChAWCzRfIJAQNKMG1BwNBSnUf0jEReYtbvIpoWBAmlu+9de6H6Ck6d5M2sCAehpm2aQViY7QuA+zUoDBoDJa61KppAGef/75J778+aprWRI01aolx2ENPQKwNAI71mZz5/qm/s6H3yB0z6qVPv/lb3ZuvHrHnff/+q/+0icf++rH/r+/rC7d1vG7lXplp7sLoI6U6hIsBGQGpZQgrZAkAoJkIETIRQVCEl9k02PByEyMIcZPpszHKFEIZC2EAA3huh81tXhNHAcKG51Fo2g0AEgO4Ge9ixBSKSUQbduu1+v1srPT3HaEbXks21xaqbeU59tdP2hKFE989el1C977fY986lOf6W03/+f/8e+sHz2iO1f/+o9/x2+pSnVJAnAgBItKteZyIB0JpLTWOlA6UFxiAGLQzIQoWeAe6lXG2EUKrZehXxUWwACkgQBIgPEeEdgXwzhJ5IgAwWttlP6g2cDUHW4qT0RqosnMyXc1MZXWyvN923alYzmOo0G2275dcoNeULJQw/ZSWT94zwPttdL169d/4zd+A8DSoH/rt/7B+uGVRqn2Q9/znhMve59/4lzjyNGW33NLtW671dQ74lhNq0BrBRqQgLUiK0A2xe3hSpLRYF0gMhBpxayJVRj2a90H9vtFj2HxfFbe9ZqwigPIK5F6jLRLFedazPqTr1S9UqMAhBASwfMCJtj2Oj0HuzZRp+kEwZmT1ve9822f/v3fvfTis83WtTe96Y0/9sEPSRf/6pN/+KUvPuZtdb/46Nc+8vd/9Rc/8sH/8Id/1ulSpdIQaEkpNZNSHhMBgSSBrIGUBhJowc3BgPDcGPaUAkzizOZ/zcxaaSYiRX0BK2TuL31iZCYTMhGABsYCTrigesPCBm6BhUzr6XvXfTqfgpEX6O52lCKnbDcqdd+xN7cVWOXdoLlaqVT07vve/p3/8V/9v63LV3/8R977zef+Rkq53Wxutza3trZ+6Affe2r19q994+z/9qv//S//2v/1tu+673NPnQUCTSQdW9iCuppI9VklSBMpQpDMyCqqxpCaGNz8EzGyZiLqz8oYpMg4tkHrBwEMMmnoZ9i0zxd/gQuNGcRPNyXIupdpUQIDsFGaqVQqy8vL7Xbb91Wz2RJsk89Vt0R+8/3vfuuf/Zvf/NQf/e6xNQmiYzvixQsvfvELj3358S+9cPZ8vbRy910P/PAPve/Hf+Q9H/tH/+fx9cqJww1Uno3CsqHT3UHBzJoVM5EIN3sTCLE2X0zEREyKdMCkzJf5nnRAynA9hO0MfeBIaQ4UBQEppVVAKmClQRMyWDmrJSq5B9Mb4174gYmW/iSNEsUNYOAHMOzWNI8vlUqe53V2W8+ee+7pr3/trjOnUPtrd70F2fX93cNH61dePvv1P/mT7zl55JmnngCbv/3SK1vN7saVDZT22ee/feXyBv5t68SJE2+4/67/+Pv/4Xf/7b/48Z/56L/7i6eqZbfkWKWSq3qqD9pqAGKBqEGEmclNfpMMvWHDfWIgIa2BBi1yirTWpJXBOvtYUV/iFhFQEqih+dhroiZwYPOBsLwVfp+qVZFsCB266PMFG6ORdxgcSSndSvnD/+XPvvyO77544YXLr1xw3JJUtkfBkdMnf/9j//d773zgLfff/dtf//wXHn38xAP3HT15eqW63FOa6rZS6ld//X85dfTo3/27f+fQSuWzf/Un/9kHf/rwanV7e8sWotvtaq/nK00EWuter+dI0MJiRgtYDiYqiSCmLRAFRpkVMBKBtN1uzxNC+L4vpFQKGC0AJJCMDACe36vVqsTK73qWxFSMOBRODkUSpJRGOcH8a84hFE5e9AvNEBid3SaU1Xpp8MPYrz3Pk1IuLS2tLjWkgF5n98bWJhJBe3u9BK+c+2Zr69LP/9JHVXu3/ZXPsVu7tnXj6bPnVIsYROO29cZy/b4HH3j6q9/4/Jc+d/edd1y6cu2VF8+ePHyqtflq60b3xMrhZlv5ngoCT+sSgAQUQjiaCJlZABITMgBoJpPVCkDNjAyB1kiggZGYUPgecVcRk2UJaZV6vk8E0pJCWIHfA0LXtS2Lut2eUkG1UlLBLhMZsq3UPohki4Q55nmi8sDGQlPJCsZuQbVt21dBe7cjgFutdqvVCgKF7eYdTu1wFVR7k7o3Nrh9vdt8oePvVsu0tbOz69Xc5aCjtl58dQuYq9bKibVPfvZRChRq+MaTX3zXB+75Vu/G8rHlrz3xlbvvvR+lIARCQpTAFmnUBEwsgJFRM7MmAjPDAzpQBMyaNBMQUr9vVBBJyylp5QUaWGlpuRRoYul7QaVaDzzV83ulkrO0XG/euOH7LYFGQy29l3YoWBd1xQsb2Kf6wC0JSVn0ZwgNdgMAwnIq1boO/O9/533tdvOvP/n1+x+6p8vq0088canZvP+hh37xIx965fwF6gnqqbVK+crmlSvd7T//+F/Uqg1JdGNz22/fWK7AR/+rD+9cefFffPEzD9z/HYyCkRQF3Z7vkVCsNJP2PUhr8uvHQoQDGfP+vwQChGSwpC08z3Md1w96lpTM6HmBRLG6uqq199JLL12+dPH07ccrZUHYT36iHSXJ2DJLvHAOYaID5QcmlwGN1sJySBbyz4EBiMi2XQDQgW9Jx3Vd27avXTpfdjsvXDgbWN3zVy522t6Zk2fsrzzhonzmmef8dlcG4tDyIaq6J9fuDV6+4IjybqdzqFFl2nYt/tbXv3j08Hs6zesVx9aaiMCnwAoCxT56oEGDkECYNkbX/0lYe3rLGcGybKXJsl3FyilVNCNatuWW0NJKKQRutraf/uZXP/e5R6WgX/i5nzVRjRBFxVuTxftFfWDmFYBUA5h8qqagOqUxAAAwnEJKqV6v1/V6nhf0ev6FC+c//sk/FRafvOPkf/qX1/7pv/53fpfuO33Hj//we06eOvM3f/M3K0u1558711ZlADx69PiJ46eefe6ZQEG9Zi3XyrcfW969cVmQqpTKAi0UFkoBEhClQBulI6SLyCwwuS8QQepsl21ZIMiyreefe6ler9q27TilnestHajt7a0b1zd329u+1z18eI3J73R2S6WaMQNDoxt1MkMLAjlKoQsbmH5yvFenlcdwBaP+KXYYqRjTOloul42+WLvX+8M/+uNf/p/+h3J96djhwz/wYz/TqFT/zZ/+dvPVF1565lx5pXGp+YKs8s6NpmT3zW9969LqkvaCpeXV5cNLx44eue34oZVG6fmLu41qjRl9TZ7ypZS21NLUd4G8IAARm+0SUcQscYl6aEk/EFvb2+1eu16vI7Z2d3cpUL7vC0fURdV3ZKfb3Gnu7rS2q1XbkUIIaRSiIDZNkbjU80y1ewBtIBUIn3pisNcMkEEjyJs/9vs2oVJyEcHzep7n9Xo9z1eaMVD03vd94NDq0Xa7++53/eBfPvpopWRfuvTyxz72T9cPHf/lX/tfm7xKHFS80j/5xx/7gz/7M434tu9+x5Nf+vyb33DXnXfe6UhLKRVoJinbXc/Z7diu6LlkS5RCgyHdkhYhAQg2ZKTDOHRNYcBx7FOnTint27a9tbVVr9c77Z4QQim/p4NA92sCWuug51ll10xppy792DuGvBKLWGg/Dtd1w2qlUsq2yOyN5ksAmm+iEULyxpgRAhMqmDtt+PIHD4jfPwEIEMIkfS0EgcRaE1Ol5AZeTwOzJUS58sa3frfn+3/1l5/yur3jR489vvuFV8++/JM/9aNPf+vbr1y8+v/8+v+hLVZMdXe519XaU2946MGTR5dfWiq99e1vf/qZZ7/41NPVel0FsNX29OaGKLmVRqOxsuJ7WtjStt2u50lA4D43KGKY+6Jhi0lbpgIAWGsAECz8ru86Za1ISksp5StAYUlhAQuBcrfVqZdd17HQIgRCHgxPSxkEwUCLYDCBNJCHi4ZAxh0tcKGZ+4GQXyiVVGKk+H6kg1AAkGAAAIkGqVTM2rKscr1e1+B5Hni9K69cvHrp8urqyi/+vZ9/7NHPXbm+ef3GloJABp7qMUpru7vd6XWr5dL1q1cuvPTMz/7sz547d67WWHrqq08fP3Gytrx6ZWNrY7tz4vbT1foKsfCJQBNL7ZRcHSgACFd75MNG132Gc2BDwIsEyAjGrgElIfQFfpiDQCmlDHNM/wJyegIwiarNPh/igBlAPlQ6i3eOWkHyz1LKcrm8srKytLS0snKo3lheXTu01dx+4eXz5154/i1ve3OlVr50ZeP0mVNWSfaCtlMRhB4Jv7FaanvNdzzyt77xzbNbN9rEtluqabYuvXrt7DPn3vCG77j3ngeXGqvAluOULOl4nmfIrpNjjWNAC0l0wfhGI7AZln6TM3dZKMU8ZwUHkGMrSgxYRPYnS32xSJ2hH/4jQ5gVIIWvJqUolSqMlmLRafvSdjd3rmmwGqvrJd0JhwAAIABJREFU3UD/7h/88cpy/ejRoz/xoR+7dvV6s71reY5TckjA0trSmTOnW7vdrzz59XK59tAbHma2r2+1CEtOqfru7/+ht7z1nUsra82dXa3ZLVeltHylIGOsZ6gZ3MxrOcUMwhVMRL7vhzLJiCKLyjeLc2WRD+wHMFrw3qeSpkx0h5BumkHYlQTSsqCEVpUFwAZp7AbcWDq8td09tLZUqq3sdL0LT32t4yulVKWxfPj4bcKSvV4XpdjYvP7KpY12i+66++GNzR0/0G9/+/e87/0fCHy9s7tbLtV8j7RG23KJGIAtYUu0YDBOCRMXyFPbpbTWSimjlywyCDhy9PkW2Og+GUO0R2W6NpYyLZANvAwweJDSdl1kAgJcWT1+8uTJD3348J//+Z8qKl3Z2Hjknd8npTh//rzneVLu+H5POtKyxcbGhtdTwNWr11sPP/zw3XfffebMne1up7W72/M0gSWEVXLLQoiuH9g2W9LRWkk5EsviaFc1agaIiFLG6sSp3jXmpRd+YL89Q/5WN+33pFQDkVLagMzIJGuNw+0unLn7Oz7y8ye/9PhjTz31ZH1p7eWXz0t7uXn9cnf3BgBYJZcF6y7W1o4//NBbf+xHf6rRaFiO3fW8nVYX0O56XaVIKwqCwMjIWAhCgNaItId3GqLYV4EMJopuxcCDaFZgWLUJqWD6O+fsEge2RmbygSxXkDkZPKWbFBqYmX60QAIITYhS2k798rUb5bL7/h/9qXf/4Hs3rl67dOmV69e3ms1mq9Xs9XrVWnllZfnYsWMPvuGhw4ePX93YDHpB1wu6XQ+ExYKklFJYtm0HWhkiGWb2vK5t24A8+QfJf665sFprKQrpeOdr3C9sYJpL36wG2Et1n3oDosWdGE+EWU8h4hGFtHNu4d6XjRWM2LbcgHyttWVZKEWglVtyGMXG5rZly2PHbz91+q5qtRZSGyECs+71ervdzquXNzQTAGoGEBIl66BHwCDB1z4DKU2CBTPblgQm3FsPzlp5Q43EXAHLskj5ps6ltRZCWJY0BuA4TjTfjdKvh50URo3KPF5rHXZhGU72hQ3M0ANAAVLLqaXCxU7MDLtorW2bCYmQFLNEIEUA4CvdbHWktM0SEcKwNXo930MhUQMhIYhoQCIGR77GeE6M3l+1QkSBm1iXW2o0nzoJkOyOjtbFLMuKWPiCb3Rm0X/suhe80NEW0bH6TNM9g5BmvAaNVOqAFF4zKGKPGVFINNVnwYQKpQTBDEjMBnXRTIjIApiBmAmZEQlAM2tmIcB8MYNEoIF+DPHwjX8PRW50uaeBqqkjeGHGXyQgDM11gY3uXxJchHV5iiMdzAyp6SAygmSIMcIToGIIEEEIS0ohEYWQQlgCpSH2IRIAJKVkAVprAobsSlM+4Vc+CUDY5ZqzglPR/b4BsEZEgiFluGib6nyawQHknU7dw0ZKZEc5DKsDDoDTuORWBCRlALAkShQS0LAcAhEhMWulSKC8+eC93IbRbwSAxD6LKLIAAOw7PTGQQEjZEaLxT7g9I6KKxPEwEFMz/6aCQhBpBR2oMqcEUdFnmXwgdkEW/UIztIEwKBq6OU09KxgkxIbsjZhZIDGjWQREBMyChTACHSwGcjXQX1gQqciaxBFI743OQ1LbfBeXv69Hl2OqNGX0TJIWdbMVlPuWU/wc5rNj4kDlxLHwZtRrPWbFgAXfNIDkbScGrXVARMAC2BIsJdsSHcEgQSJaUiSoe5iINDMgCgGC0PyKiZgJEET4BQAIAvoEuowyc5o0ypoagjmckQPk+AGIjSshJHGILLL7RT6w30cRAC7rzo1gAv1SEQKYgIQBWKAVH+0fREyMUggJjABIBAgMrEOeULPFSilRADP7SkOCwqT/MNHPOgAAzQfFPt9RlkRAUpQkPLd+gj/IqQVEN2xhBnGABTPFgbiUlS1SYboo/8rCBma14qNyejHAJwfiyEocC5U2B0VZ2pMXo9Zk2zYRkYZypaz1LgBIiYSkWQWENgohLBQC0axdEiLk+AeGgQywVgJYaYVMthRaigBIk2IgAJKODAIPgFEwGRxprwOM6YglsybBOlzxjCwEEAASEpEAUx+QWoHJ2pUyxF4KIGQKMgwVYGwz/BrIPqhoxSaEhkyZeWEDBwaJYgCmPsSStBYRLcZp05MvAAQmbYkhEssRwxA1NAoNxkjFDP7FkZKEMGC7mdn3qdgFhAkvRIFmMtnK0GszOH+ZnPGfNz8gDtiiTJL+Fc8BhjaZjUQQkkp3PjbYlYywZzGiPhKQkA3F3hzZycoQFjYwc2w0xKRzEkTIIOFKhYzGXk8hPhhLQJNbe0y8ETJawaP7aCy8GWNt5dNjxdCF7IHMIRch2sQF8ydRc5B1KaM2MPl1z3ICmAYQxuB5GhDYxkpdWWWvaGtNqu5vEuQZe5tP9jil0kNAsUaMfHOaT2joQPmBrFtY3ACSW3X+Usu/nVFrHNpZkP8KqZqnI5lBOvt07iVKfbsc95uzN4VVhcU88cyPmED0SPtWfnVppHA2mlpEMc0sjs4kJ1Ky7BqdEc3xOUVixaHBXurFIaIoc8Tev4ZpQIqu/ZyLMomDtPqTTB5ZXZCTZ6sFnVL0X8HDLS2meZraj5mkDytCgJe0hFQ7zDeeUdOkgbBBusb9wgambABhphiOlcSKALF8LjUSyAJzYvh6vvAZ3Jypl0opKaVppjeguEQhAFmToTxiTSH9kQCUKIDYiCuLSMHLNJNalmUS06i6Qoi+j8ezHd0yogIOYSZgXt+oS5mmD6NzjCBDfrG0wjBFszKllLkIcyjMcUBsYDxgJCYjBxkzN5O0XeRkKUVisBzmvJFeLWnMUExrMLXTofjVEHsPiLTcLWxgVmaQE/MUD4FSAcpRid2T2OioSUXsVKMB0hjgzNAkOCfbDj+FYTAbdm116ATmnFnoANpAEmHMCn6KgJ7Fo+2hpxRNi0fyJEkDmHyPSF2dWbWLWDducdwp1YBhLvXrD6YNZHE8FVzTU7lP0T3bhNFj6/UmYZbx4J2s7GUoyhTxA+lpUkFXBnOp1XdgZ2igQE0nNVHO3xfHM4ZUJxDt7Utu/5AYgEx1LyMFhKkXIedFYn8NP0goe1kEj4rpkc0hTnoA84FJtu2CoXMRA0vWB8YrZiWzlNSeszGKGMWvZ0x1uNBejsSgkw5nUSObygmLvNvGfdAQxfDCfipaOqrXpj33NKUYbKSzuS/yPuJC5GlaeObHYRF9R0SUEFGbzQC4khBT6vDnGNDWwgbGvs9CoMWMUkrf97XWZlKFwCw/BIEE/S059OmpQJDZaw2BexSDN3s6M4UE/xQh90TWfSYJZhCgmRgALckMWjMA2rYthGAElAKlMCcWbcXp8wQDCgbQg3mAgYQCENvSUn6ADBItZAGEyCL6DWk2X0x7oqa9Q8AUfqlQwxikxP459DVmNAGRZVnmRWzL1Zosy0Ih+tVgM8q2tzgThj0IUgrbTBIbnuowmVnUyKZ+UGSDERP2C432xrh3qxy8G/RbLAEtCYhEtLu7K6X0vGCkEzOeLFlkTaI0qaF2wZ4OiowHSGQcsE3ctB/e49CGxm8xel2zlURNfZEPzMYHpN2DUfUkx/5rMgZARNd1m80mAFSrVSllt9utVCrj2WSs93h4IS8quRPfLygrLIx1s2bpLOWbQfLfORfohoNUJx5pFxx7hngPywjnrVqlVKPRQETP8wDAdd0ivZmxPyX7jszOmrMKxyUL4/zxBogQWxR5ylBYbGEDM/gke9G34rj7eLWwmysgnvMBQD/ktW1ba/07//bf97p+qVTyfX/vpsypmzXhza8kadLNgDvxp1wPkPIB81PYpBmkJtYxXe5kiT2klgkRrfHayBc2MFo8kzpUPgYcOfYhpRSin5pfvnYVpQiCYIw52tQMciQy7eLhXE4TYZxXK/GwrE0neqoFe7wXNjDN3KBIAjdhwtBfIgAisgUzMxErper1OqL8gR/4ASmlIdUKd+rwkUMDiYJnnh8KIho4KC+XyK9hpWKj+dlXlG90kQ/s07qPNaUUbxOahUeyXXd7e4cQdnd3tdaaybbt1Aue37+Z2jIUC0typpCL5FGpadUYlfJkES2aosxhl8QBsYGY8lLYYR8qEqQSgqfe45yByWjjZ4wDPTUuR8QgCFzXJSIpbaW04zjJxRoLFWLlWIioIxv6f/ONibXMn2L061ExZiAGYiCNTCb3iH4B66GrObywQRBEdblNmhtrqchyBebwfX8wibbgWpx9/DNqe2aMkCu16SB1qDx1IiRiYCK+l7NI3YDTST8zuFBjlpMfHQ2rSZFhycoCGGLnkOyZK4jLxYZ+5u04ULqUMHFLVpZGU2gDoYzKoKU4Sj0u+gsLkcKWMkbDrEYU66pIAVsHL4OGvo0zPmlObj04+VAfdq9CAkYAGd4TQ2Z5y6SPGttRz+3iOVBci1O50EU6kIs8eA8+OMw75dQrki4ixwYGDy6EhvVX/LCwPhyzTPU/saHnSYaPFzYwBVcQLRHAKDxQ+aT4sa0xZcs07xMlHAXJ4SNZMCOwEMISDOFXyhuhoW7k2MhYMgbLMhJmnYoLj7c7pHrX4tFmTPdtbi3hAGKjY3uDgoNm0cAga8Cyv/1rgNzy7UhFvaEF11TIaFRirBgd0J7sYe+7p+K2WcXjRZ14n9Li6IQHjDizm1zlQ5dmzPvH9t2QDghye8Wyhu5Ta7pFNtTYmQ9UAmhPMjDMDEbdVjhby2zqeukLGyhqACFWmPpvdHeL/JsHjxZhiNjz1sTECgZ7J2HedphE05PmUSQIyRoaTn8wC0QWkS46HqT64cVEBkLAgVugm6eKN+O+WCDY12gjQMr6RAsbmNZBg2yTmblSqdRqNWYul8tBECATawWscU8DDiFQ+i/7r6ajnZVRPTlmE+ELRDFgOUcBAhn78wlmpEAgCGRSAGDbthAISEHgCQm+3zOrQQNryCSTC1c8ETEgoDCYvmYSlvRVICwZpQ9DZHPaZqtNdj0wMxOa+QqBFrAw30spw54lYqUGiQgN2r9Bg2U5wEJrFratGX3fl1IqZZiCgBmYEACZ0ABQ/QgKCZGlRCKybdv3/W63y6yFgE5nd1C0ptQ+1oUNjA8KNZvNq1evmgEaIUSpVOpXZBLbf0oQjyPgQlkxMeFe9BMJ6ab9IKJZu9GmtyL+LbamY/jMqDlS7OT72fn/396XBkl2XWmdc+69b8m9uqtVS29SS91qGGtp2xpLeOzQoBgHDkcMwx8cDBj4MWNhAowIj4lx8IthmSAC7CHCf/iBHfALCCaMQcMwI8KyLA/TtmXJ2nvR0qta3dW1ZWXmW+695/DjvnydtfQiS8KtVr3IqM7qXOplvnPuPcv3fWciTAokgQ2nV21im74lBBW4e8YYpZSIMDtADmcY+nrh/re//W1E5ZxrNBrbnPr3Z0dgXlpaStOUmb2XOE7z0mqtBWHyhojVQKQK4EMAAkACAkiISNdZFGTzvn9Vm5N128g1TP8aNrE5wAvY6XdvRpsT+q3TANmIv5r4CFXAg4RZNpoYzhTeipjD1BnpdHpvvfUWAHgvSk3+3ZtiCb519gEiStMUANI0HQ6HGwb+hCsDW9C+wsQ7Cqvcz13C25LttQH78G7EqyfDpC3BmDeSLbwjau91dToCuTREbUqRMcoYRUTe+wCWFkatI+ecMebgwbsBII7jsnTbOfH79UG0jmZn58vSXV5cbnd6gKq0lkUYPNcRNgIjMRJXhRJkqPYIweAGk7ctLn994aspe1sZymahxXWSJO+C4LZhsuq7rP9eG/m8JfAhzIa9EiIFWJJ4pVDAe7YsjlArMkbHxsT91UGn3Yuj9L777hMBEYnjePwmtO0D73FdCACGw+G+ffuUUnmee+8n6cVVWri18YV511APVITr6ancoPLK5mrSz0db2/AmPzcQ/waJkZsbGnUgt9GBkQGZxTlflmXpnAulJWYoCpvnxW23zezZs/ftty/Oz+0RhjwvYZtD825tfeshwAAA7Xb7p88+2+50Dh8+vLy84gVQ6fGrPCCjeAJG9sieQnEkmP9E73a9TeB1Q/8N+hRblvM3lMnfEXhmS2rLhpz4RvpQ1xbivUZpFdY3HEKVYVNV2imFWusgQlEUNstyL9BstA8cuGt5efnEiRNhD0nTGAACBHXbB97jAxFbrVar1fr+93/gPf/Kpx/2XtbW1rZkFGx68bh/tL6LdCPUs81DD+p+0GY3mORAviMszdVGXsM71+59p36ywQ3qGvGGty2KwjnnnZSlK4qSdHT77Qd++aEHXz127OjRH09NTXU6Xa0BKpmZ7XzgPd0NaptIkqTdbq+trT351FNnzpz56Ec/Pj+/pygKW5TsvEIK0v7sPYgIO0JBEXZOvFeIhAJc41sYEYhQKdqSTg7jObuTEcJmVVDvfdAU8t4HYsM15lxsSCG2XOMnx+MFCsEkjn9y5BlsNTNhw5/bkKZPDg6c1AuanEVgrUXEPM/rRjgQeUHrBUgvra4Uzu6/484HH/rkjp27Hn/8f7344ovOuTiO0zS1VgBAKbzZYBO3DmZO66jX27G8vFKW7s/+79HFpf5HPvIX9+2ZW1pcWFpaWlsbxnEcx7FSlQq+9x5E6h1chEXEaFPNEva+HpwxWYvckkBYWcmE5dGE7f58qgpb9LluIIK/WgF0y5jqGkjBLVWvw8jxRtrKcFiW1hhdOnDOMjMzDYfZkfs/njSao2F+/PjJp59+OhuOOu324uVLIjIzc5sxWFoXRfpmg1HfIj5grTXGTE9Pv/nmqbvn9mZ5eeLEicFgMH/bzkN333X7HXctLi6+9db54ShvJKkxpOPIWluZO1vPVd19NBpoHYWOz+TqOKbL1D1/Gtv8xMoa2CrBB5RikMmc4R3pq20exXeNxPpGdDHeaSWKhbccBxgl8TDPisLqKGHAIi/iOE47jd27d8dxurLcf/nV46++evzc2fNElDTStbW+93737t3tduocRJFmhjDmftsH3uPDGOMcP/zww08+9UPnnFIaiC5cvNRfWb1waWH//v0HDhz4yC8dKYpsaWmp3+9ny8ta6ziOgBAEGTwBsEiSJOENK73B9ZItsrnZLNcKYDYMUd2Sm3KNpPZq1adNucSVdsRmhfdrkOPCw9d1pMkcJs9zAAhiYYhqz947ZmdnR6PR8tLKidefP3Xq1Fp/UBRFu9tL42TQX4nj+NLFt77whb9VlDaOTVmWWuubDT/3wfMBvkoSoxQ99NAnPv3pTz/70xfuOnRImThJkiwr1taKV199/bXXT83NzB46dGh+9/477kwGw/5oNFhdXR4VeayNSWJkKcuCmZGEUGutxwqBIXZSgZYFAAgKJGDhRKsr1s/CAU5UWfwEd/bGyYTXraL+fOLVk2HPeg4nb3QAuaoDEBEZLQhIen73niRJ+v3Bc8+9cHFh4cKFi449ADTbHR0V1nFeWOv9xfNn7jp44O/83b8ZqqVxHI2v4U2Ujn6QfECuYzpIBI899thXfud3L1y8eODOu4ejotPp2aJ0DGLp5JtnXjnxeq/XmZubufvgXdPTO2bmZpnd2mp/MBo4awkiRC8inj2MKZQiKCLGRLC1htTkOooiArhxKGXYUjYvftcNXa7hBuvFAQBugChTv+pGwKebi6ShE7+6utrpHB6sjY4dO7GystIfDIfDLIoSUpECBgAWL0CtVqMoigtvvr13795vfvObIkAEcWycc0rhNqf+/XEPESIcZa7VMl/72te+/gf/7o033jh06PBgLQ+pMKLoKGLm0ro3T507c+ZcmsY7p3vz87N75ud3zc4mJgKQ0XDV26IobFmW3olzjkhfsR7GChtKoXUwLstgtYJu8IqQS1xjCM3GOAqvX9bcShsPrzshYct5m9fmM2x4ZvCBohg98+yzi4vLe/fuLwtLpJO41Wy38rxoNpMsz5dXlmZmZi5cuvjyyy8+/CsP/dt//c8akQpvg4ha0/qvgm+G3eCD5APBvrYS6CEiGA6zRjP1Avv3T//Tr/3uv/j9f3X82Eu/9JEjZeHyfKQjE0WR0mIgQsRRNhxk5ejswrnzl56hF9I03XXb9PT0jn3zc2maTE1PB3nQIsuzLCtLJyLgOSiJM9txsgBEREoqTcR1NVsREQ8BO2MFGFEQkOtppjcWzAR1FGCpfopUoilX30muxm7bLNwiEoY1TBLtabPjBY0MRgI0pXXLq4M4ac7N7z1x/LUoSjq9hnMuiqIsyxBhfnbm2ed/uri48KVHH/3ib/0megCAABnaUuTrprCrm5nk9g6SBGYistZro7wHpaAo/H/9b9/53pNPT/WmuzumBIhIaxMVhe1M7WA/US7EarX23iqFaZpOdTtTU912p9luNnqdbrPZbKapK0sC8N4W+YDZA0BRFKPSJUlibcHiG3FSlnmRj9I0ZUFExYBrg/yZZ59f7Y9YaOdtcwhGUZVs1PJHiMjjuUb1eATvvfNWPOf5yOa2cAVbNyryfJjfc889AR3oQdbn01WnTzYpWDjnahizgK8vemhxVBbPwUlQRLK80FqXZZnneV5kzrksyxYWLqyuLuzcOVWMstEoj6Ok2+kYHSuNwEKEp8+8fv6tMx//+P1ffPS3Dt99l/WuqTTe9MZzi8RCY8C6NUZpBc65JNZ/46//tYc+8cAffud/vnrsRKc31ens0Fp3u92lpdVOpyfjNA8RAQWBBJiI8nx0+tzF0+cvxEbHSZQYHWnT7XTSKO52Wu12I41N2jCNRqM7NZU0m8OhRRSjqbSZRoiiyDmX56X13Gx2l1f6q2t/5hi7nTYAIAoShNtY7yqEQDLmY4kIb5DOHRs6QZgVoCgQcWpg8/gnaE0iGF4rgiIegABY6yhUE5idCAgwgkKSK0KiVZiHIui9N5FmZuct4Hi+BlEUJUqborA6Tro6AYBer6eUyobD1147uba2fPgvHPzyP/ztT33yAQFwXKbqg9GBvUV8wDmntQ5abmE1dc4Zo++6a/9Xv/oPXn/93FM/+OGpM+cXFxfmd6e798z0+wOUwP9griaqEBHFcZxEBrrtAIPx3paFKwo7HObee28tIBujlEJjTJLG7LHZbLZajWaaNJtpr9tuNBqoqN3qKoEoIRo2yhJUFIGK8qxsNg2i1DcADv+ERCJ0oqSqzTMACwKQEmRB8sIsIEikNJAK0P4rUaIIAnhhgHGnAhCVBkFA8o6rJ1W+RYCEIuy9AvAglXdB1SsEFm9L7y0REjFz6W3muXC2LNg1pqamduwAAIX4xoljq6vLf/XXf/2BBz56z70HlQJgQAJNKhsNWo3uByDGvpVioRCfRFFUaxJ6LybSRcEmJufhn//Lr//pE09+5q98ttedIhNpHYWauvMexjpwSimjUAiDTkmktNa6KAqlVF3hKcvceRtFUQBL2iJXSsWRDklwFEUAlDYaxiR5YV8+dnx610ySNKIoSiJDCrSKlEZCTQoAFQAjKgAWQe9tWL+9F++99VCWpbU2z3NXlKMid0V55MiRDZO0r6azPQmjuNLlqMnTAuCZCBipbmYH53fOOV/mRRGIoKPRaDAYLC8tDlZX2q1GEsXOuZXFpbfffvulF5+//957vve9xxEBAQQBARg8VamR3t4H/v/FQmErCBKf9aCK0O2NDCGAVtBqxC+++NN2pwlCvR0752bnd83OdbvdRhorpYL+j/feW+eZCRUCWhZbWqUNqYjBee+BVNxMOnHcbjf37d394ovPj9YGrVaryPPaA8vCCcS5k/6o6PamlUkYEJX2AsgohCAkRAKA1QJM4wU98HQDjk8EuUa1ekAWDIxNpSZkHhFD41pEBGo9vKp9hjzRoeOqozauNTOyAChEQRb2dryreBZnjAJQWV7k2YC9azWjSE31lxYWLr496PdHo5EryzLPV5cXOu2UEJgrQjUICDMDoyL8IBjPrYMXqjFtRFSj0xQBMysyIuid3L5/d6SoLEaRSZcuLywuXKZXXknTtLdzx/T0bVOd7q5du2KTNBqNkKeGmMoJM7ODkhlQkTGxY15YXD599vzKykpRWh0nHlCbVOlEKYWg0pS8F5PERSFlsWz9WrfbtdbqKAZRIChMSGGKZu0ACkRAVKA5iPhgxwxewg0ZQ7SP4L0Lth4QaCFyqgo4AATgRahCcNTBEgcEhAIUQo0EoAqb1cgFpWsFFCSC0pcC3O22d+7sDkdrp06dOvbyK+dPnwXm2Bjvy3w0VAoVyf79eyAoRDITEJAopQCUMH8gMJm3jg9EUVRjeyYaUqyIvLNKR4pgbuY2BPZlkTTbXtB5sd6t9ldW+yvnTp9RSiVJ0un0duzY0e12u+3O1NRUt9tNGikRFc4WRWGtDYqi4m1/ZemlxQt33nlH0mhlWZaYRJGxpQ2LNLMgkDGGmRMTx3GklEJUiAqAEEO8VclRVIgGCAqhDAAkEoQeQDjgWBWiIlEkCiVtpOE0CDGUg4LbV3MvBcaJcRUOabyybxAowUqRI0l6sF48i5mdL51zhdWLi8Ozp8+dPXv2woXzq6urK8tL090d2XBkrWXxpFhAWOzBQ3eEchMGNoaQd04phfjBsK5bKidGxMDP8H48HToUSiGw6PHIffcfPnTXcNCf6u5QRCrSRpAZvHAYZpplWZZlly69jaiM0kTk2VprDx06ODXVnZmb7fV6adpstzrzt+3cOzctwEopQpUYXZaO2UfGCICw01q7shC2kaFOMxZfeMY4NoiiAMNPAQZQdfUGBQE4jEgFFhIGcSAWxCI4hV4TCzKhL4shAGskJlBIACDMIjKypYiv23PMHFSBqy8EAEExs7W2LK1zdm04CAXQMDLHWptlWZ7nw+FwOFzr9/uMnp0X5DROkjgdDoeayPtK1HF1dVlEHn74YWZLSoXTQEBlNAg47242usyt7APhu74yY7Rm0yvD1ioThcih02k88LGPP/5Hfwx7WCmtlRkVJaJKo8RaJwBSC0drAAAKnElEQVRWnFIKBJHF+RIZX3nppbdOv/bk/2ZAVlHUbrd37tw1Ozs3P7dnanrn3NxMs93qdqcaaauRpsYYTRoIUcCxj0zSytXq0ttLly/s27ev2+0iREopTUaQUQhIEAgJvRNAEQYHQoqYlGgqmVOIXILOmbIs11ZWlxaWzp0795Mf/TDSBpDxiqSPVIA+IqR11EfvLTO7woUGX5ZlS0vLWZbNzcwXNrdV1y8gW8OXRoH165xDRFJoTKQjMxoM2+0moxPhrMhJcZIk514++5cfeeSee+/FcccXqxYEIMIHwgFunbrQ1bMEAURg9s4BaaXp8uWVBx745dm53btm5xRFSBq1yQtLRKgIFGRFrsmAE61UbMxrJ155/rlnkoYBtszOe+8dj4N4AiITx0nSSJKk1Wr3ujs6nU6apuHn9PR0o9G4eHlhMOi3Wi1E3LVrrtVqTfV2trutZtoysSbSABxFSUC1Obau9IXNy9wWRTbKBktLS5cuXVpaWsqGI+dKESGFCtB7z8475zxb771zjtmFLbEosjzPsyzL8lGe59Za77goCvHeOweg07Rx3333mSTO8pwr7kPYLQMfKKTmVWdgMOjHcZwkSZ7ntshareba2uqOnb0//8FT+w7c/uLPnms0E00q9B9kU2t/ex/4BR8iKCykiHSEBADQbre/8Y1v/PYX/55J0tmZeWVMkVujKY7S/mAtasYhoGJx3jvWqAhASkMEFLTaNACyr3jIpbNeisFatrbMC1XdHYEoCDCACGoS54Co2WkHLo4xJjIJGUqjNGkmadrUmpxjpZBIM3hvuXSFK71zzpe2hhshIotj55m5LEtmB2Mwkvfeeyci1loZD5ghNTmOgETEqEhrIx7TRBMK2xKpDptsSKlJAuyDiKjIM2NMu9EEgEjpnF3aaghJURR//vTTn/nsZx//o++ydYpU1XOoVx5Y//u2D/witzkCFPSOlSb2AgBxon7jNz4XRd/68j/6xxffunDkYw8QSprEiNjptBz6lmmgaA8o4JtJmiQxABtFnhnYi7cAhKIQDQMoAk0Kja6v+FhdR7TWzjkiUFHsvS1HA1vmSIRjpURfNSUEQEKTCpTawD3wBVfuhEhUTcQhIvGhdkpIAkI15idNtIgaw3w8QAUHIiQRUQoBwHlh9mWZM4idqN0gKkRUREQqz/M0SlOVBqxDv993vmy3W4uLC6fPvBlF+t/8wdcf+/LfZwFjPvAmdKvHQgAAUJZOa00I3jmldeBzCMDv/d7v/+F3vttud1vt7s6d00DaokRJXGQOWdDLVLf96ivP//Dp/9OIFaBFCqm2AlHChgXDWsschEqrddd7H8dxmE0fmMSIqJQR8dYWURLHcRwKuCENteyRRQgnWbxEpJGK3ENo4RLh2MFEhEInCqjOpyd7YZUjkQAAUsDekfceUYmId9hqtQ4ePOQFsyIPeomIGBCy4UiiuCxLY6KAjNJaLy4uLly+SMRf/Se/85WvPCYCGsE5Npq8r7wLNuHbcdsHfuFHfXmYmZCcK5zlJE2ddwCkNJ06df4/fPs//smfPDHKit1797WnppJGC8IuYF27mZ567fj3vv/HaaIIHaBjEGEFokAiL6KJoBrY5xClVpwtCxfH8bg8pZxzCikQdJTW"
                   + "NUG5slfCIssFQZNCRTVUm4hs4YLd111ehTTpKhskvYJqAxEBMFdtg0pCVASJSBid4yhJb7/9QFk6E0XeVzQ0Y0wUVTzSMi96vd5wOFxavtzv9/v9lbm5uS996dEv/O3f3LGjFzLf8N06643ZiIWVbR+4iXyAgQiss0YbW+ZRpAFImJEoyzITJ4qUF1haGjzxxBN/+sSTLx07JqDn5nbvnNrZajTTWL915s3//F/+U7MZkXIizrEXJqBEUQIA6B0hAwV0GiOigBdhRFJKsfNKGe/EWqt1FKKRwOKfiJrYsRfPDKJJKaProhYiutJ6tjXyuZZ+GE8VUJOdckTlbTiHAIZ1Ib8NGY7jalFgx0mzdcftd5alC1ZKRFEUJUkSRZFCEuHBYPDmqdf7/f7ddx/82JH7Hn300Qcf/IQxKCDWFpGJECgk4nEUsxdSuN7qby6m2IfaB8bTuYSZNSEAsxcA9gzGmCC0iAgeINQ13jhz+bv//X+89NIrr594PY7j2ZldsaFvfevfp6k2BkmHsEcxaBAlIhpEEQryOByqpIqq0RseoigKXBxj4rBm6/E+sIEsXw9dRVXhHRCFnXe+DPvApDzRuKdGk7oVGApblfaMD2UiIERE70QII6WFlLM+iqI9e/aNRrkwaq2TJInjGBGHw+HyyuLa2tq+3fOf+EsP/dojv/r5z3/eGCKqVn3PVpEqK0iIqqx9w2q/TqZp2wduvlppiJ5F1qmky5iggwihWXb27MWjR48+//zzzz37zI9+9KPllaUQgARhnzhpaG1ExCjlfFlPEQ79qWCvzrkQnRPp2iu8t7WaS9gHYKzbM5kK144R0oYrZ79JQeiK51TBkgoSQMaoAPSoncexV0il9ex9p9ttNpujUV6WJQCUZemdM1F0//33f+5zn3vooYc+82u/Kutt+52O9tnOiW/+mulVqbq2FGNC4AEAsLy8+sYbb/zsZz87evToj3/844WFhdFotDZYC8UWFtdoNJIkCdYWVtOiKILqdaj/BGcYG7GrfaCe1BT84QqWYUKPMVh5LXIRHlVKOecmZ2hXuCbnjDH1LlHP9A5EmaIoQnbrnIMxqsoYc++99z7yyCOf+tSn7r333rm5OWNMaLpv+Y1t+8CHY6fg2h8qBSFrvTEqz8sAIT558uTRo0dffvnl1dXVs2fPnj59ut/vA4AxJsgc9Xq9YKmIGEyzJhY7V9YmNZkWb7Dy2gGCaymlJlOIunsV3Cz8T8DM9vv9wP+a3D3qE+t2u71eb8+ePQ8++OAnP/nJPXv23HnnnWmaaq0nGZg1uWzD6nDLFtC3fWBDFdUYjQjMlcSQ1ir8Op50BN4HWB6IwOpqf2Vl5YUXXvjJT36ysLDAzBcuXDh58uTKyko9Liko6mRZNhgMjFEhlaxjmGDHYZHeIOsZ1ungRZMnuX4QUyUrFB4KJAciOnDgwO7du40xBw4cePDBB48cOTIzMzM7OxvcsvaoIIS4oa7KvJH4ews7wLYPbBEj1UpVY7xNJSoaLGNyrsf6F17ZNPI8X1xcvHjx4vHjx0+ePLmwsJBl2Wg0Gg6HCwsXi6KipGRZFoCoN6JFHkVROj5CDafZbHa73SiKlFJTU1OHDx8+dOjQoUOH5ufnm80mM4eI6wY/9YZZBNcekrntA7e+G4QI5GqQr9oxiMj7EHlXbhCEdCbDqjGWe0PXojrChuC9Hw6Hk3XPei58MPEoiuI4DucTrtckqQ0mhsVvmL4T8oSxoGolG1y7dO3wIXLbMu3+MBzbPnC1rIDr3aDuT4X/rIswW+aOYU1nZqVoUtGwkrBA2XJuTTDlSR/YvEhfd/xMsPI6Upo066CADQChABXub/7Ik6/68BzbPrB1ODR5pyYrT5pasNT1CqQb46JwZ/P+cOPxyebcdJIutyGOn3xCKPuEM68freO6cD+0KerPOCnsfjOP1N72gfd9A3iHz6f3yvGuVqvdviTv90HbX8H28SE//h9gyUdlxDpGaQAAAABJRU5ErkJggg==",
              fileName="modelica://WaterHeatingLibrary/../../../../../Pictures/waterheater.png")}),
        defaultComponentName="tan",
        Documentation(info="<html>
<p>
This is a model of a water heater tank.
The tank uses several volumes to model the stratification.
Heat conduction is modeled between between the volumes and the ambient.
</p>
<p>
The tank has <code>nSeg</code> fluid volumes. The top volume has the index <code>1</code>.
</p>
<p>
The height of the thermostat is controlled by adjusting the parameter value for which segment the thermostat is in. An <code>onOffController</code> compares the
temperature in the user-specified segment to the setpoint and outputs an on/off signal. The on/iff signal is sent to control logic which is placed outside of the heater
model.
</p>
<p>
Sub-models within this model are used to identify all of the heat transfers. These include draHeaTra (identifies the heat transfer in each segment caused by a hot
water draw event), buoHeaTra (heat transfer caused by buoyant flows when the burner is activated), cirHeaTra (heat transfer caused by flow through a recirculation loop),
and UALos (heat loss to ambient conditions). These sub-models were necessary because the volume model does not contain any native method of handling complex flows
into/out of each segment (only direct flow from one to the next).
</p>
<p>
This model is intended to replace the ComplexTank model. The ComplexTank model was based on algorithms which were shown to not be accurate in modeling storage tank
water heaters. Additionally it was a very complicated model which included several equations which could not be validated against experimental data. The simplified tank
model is intended to be simplified to include only details which can be experimentally observed.
</p>
<p>
Planned future modifications include making the model neater and easier to understand.
</p>
</html>",   revisions="<html>
<ul>
<li>
Mar 29,2013 by Peter Grant:<br>
First implementation.
</li>
</ul>
</html>"),
        Icon(graphics={Rectangle(
                extent={{-40,60},{40,20}},
                lineColor={255,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,-20},{40,-60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-76,2},{-90,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{0,84},{-80,80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-76,84},{-80,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{82,0},{78,-86}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{0,84},{-4,60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{82,-84},{2,-88}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{6,-60},{2,-84}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{92,2},{78,-2}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,20},{40,-20}},
                lineColor={255,0,0},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.CrossDiag),Text(
                extent={{100,106},{134,74}},
                lineColor={0,0,127},
                textString="QLoss"),Rectangle(
                extent={{-10,10},{10,-10}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}),Rectangle(
                extent={{50,68},{40,-66}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-40,66},{-50,-68}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-48,68},{50,60}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Rectangle(
                extent={{-48,-60},{50,-68}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),Line(
                points={{26,72},{102,72},{100,72}},
                color={127,0,0},
                pattern=LinePattern.Dot),Line(
                points={{56,6},{56,72},{58,72}},
                color={127,0,0},
                pattern=LinePattern.Dot),Line(
                points={{22,-74},{70,-74},{70,72}},
                color={127,0,0},
                pattern=LinePattern.Dot)}),
        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics));
    end SimplifiedStorageTank;

    model SimplifiedStorageTankMediumModel
      "model of a gas water heater without burner"
      import SI = Modelica.SIunits;
      import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
      replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
        "Medium in the component" annotation (choicesAllMatching=true);
      //   replaceable package MediumB = Modelica.Media.Interfaces.PartialMedium
      //     "Medium in the component" annotation (choicesAllMatching=true);
      parameter Modelica.SIunits.Temperature T_Initial[nSeg] = {273.105 + 60,273.105 + 55,273.105 + 50,273.105 + 45,273.105 + 40,273.105 + 35,273.105 + 30,273.105 + 20};
      parameter Real perInA[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0033,2.8428,-0.4415,6.1873,4.0134};
      parameter Real perInB[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1405,0.102,-0.2213,-2.8662,-2.0619};
      parameter Real perInC[nSeg] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.0224,-0.0032,0.2329,0.5048,0.7896};
      parameter Real timDelA[nSeg] = {-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2376.6,-2660.9,-3112.4,-1971.9,-567.21,100.33,0};
      parameter Real timDelB[nSeg] = {812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,802.41,792.21,805.42,475.76,79.1,-14.047,0};
      parameter Real timDelC[nSeg] = {7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.9334,8.2512,8.1676,14.305,21.676,0.2408,0};
      Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
      parameter Integer nSeg(min=2) = 8 "Number of volume segments";
      ////////////////////////////////////////////////////////////////////
      //   // Assumptions
      // Initialization
      parameter Medium.AbsolutePressure p_start=Medium.p_default
        "Start value of pressure" annotation (Dialog(tab="Initialization"));
      parameter Medium.MassFraction X_start[Medium.nX]=Medium.X_default
        "Start value of mass fractions m_i/m"
        annotation (Dialog(tab="Initialization", enable=Medium.nXi > 0));
      parameter Medium.ExtraProperty C_start[Medium.nC](quantity=Medium.extraPropertiesNames)=
           fill(0, Medium.nC) "Start value of trace substances"
        annotation (Dialog(tab="Initialization", enable=Medium.nC > 0));
      parameter Integer TStatHeight = 7 "Segment the thermostat is located in";
      parameter Real TSet = 273.105 + 52 "Setpoint";
      parameter Integer RecircOutSeg "Outlet segment in the recirculation loop";
      parameter Integer RecircInSeg "Inlet segment in the recirculation loop";
      parameter Real Deadband
        "The total width of the deadband on the thermostat";
      parameter Real UA "The UA value of the storage tank";
      parameter Real VTan = 0.15 "Volume of the tank";
      parameter Real QDotPilot(unit = "W") = 120
        "Pilot light heat consumption rate";
      parameter Real perQFlu = 1/3
        "Percentage of heat transfer occuring in the flue";
      parameter Real perQBas = 2/3
        "Percentage of heat transfer occuring in the base";
      parameter Real PMains(unit="Pa") = 150000 "Mains water pressure";
      ////////////////////////////////////////////////////////////////////
      WaterHeaterLib.BaseClasses.draHeaTra       draHeaTra(nSeg=nSeg, redeclare
          package Medium = Medium,
        perInA=perInA,
        perInB=perInB,
        perInC=perInC,
        timDelA=timDelA,
        timDelB=timDelB,
        timDelC=timDelC)
        "Calculates the heat transfer in each segment caused by a hot water draw"
                                                                      annotation (
          Placement(transformation(
            extent={{-23,-23},{23,23}},
            rotation=-90,
            origin={-121,339})));
      Modelica.Blocks.Sources.RealExpression draHea[nSeg](y=draHeaTra.draHeaTra)
                                                          annotation (Placement(
            transformation(
            extent={{-28,-14},{28,14}},
            rotation=180,
            origin={170,-4})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow        prescribedHeatFlow1[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-4})));
      Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temperatureSensor[
        nSeg] annotation (Placement(transformation(
            extent={{-17,17},{17,-17}},
            rotation=180,
            origin={-13,383})));
      Modelica.Blocks.Interfaces.IntegerOutput
                                            TStatSig
        annotation (Placement(transformation(extent={{640,-230},{692,-178}}),
            iconTransformation(extent={{60,-64},{80,-44}})));
      Modelica.Blocks.Interfaces.RealInput TInRec
        "Recirulation loop inlet temperature"
        annotation (Placement(transformation(extent={{-106,-94},{-58,-46}}),
            iconTransformation(extent={{-80,-68},{-58,-46}})));
      Modelica.Blocks.Interfaces.RealOutput TOutRec
        "Temperature out to the recirculation loop"
        annotation (Placement(transformation(extent={{56,46},{108,98}}),
            iconTransformation(extent={{58,46},{80,68}})));
      Modelica.Blocks.Interfaces.RealInput mFloRec "Recirculation flow rate"
        annotation (Placement(transformation(extent={{-102,-20},{-62,20}}),
            iconTransformation(extent={{-80,-28},{-58,-6}})));
      Hybrid.HeatersUsed.EditedBaseClasses.cirHeaTra cirHeaTra(nSeg=nSeg,
          redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{-238,-198},{-182,-142}})));
      Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=cirHeaTra.cirHeaTra)
        annotation (Placement(transformation(
            extent={{-30,-19},{30,19}},
            rotation=180,
            origin={168,-41})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow[nSeg]
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-40})));
      Modelica.Blocks.Interfaces.RealInput QDotIn "Heat entering the flue"
        annotation (Placement(transformation(extent={{-132,24},{-60,96}}),
            iconTransformation(extent={{-80,76},{-60,96}})));
      Modelica.Blocks.Sources.RealExpression realExpression1[nSeg](y=buoHeaTraMod.buoHeaTra)
        annotation (Placement(transformation(
            extent={{-27,-16},{27,16}},
            rotation=180,
            origin={169,-80})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow2[nSeg]
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-80})));
      Hybrid.HeatersUsed.EditedBaseClasses.UALoss uALoss(nSeg=nSeg, UA=UA)
        annotation (Placement(transformation(extent={{-314,204},{-270,248}})));
      Modelica.Blocks.Sources.RealExpression realExpression2[nSeg](y=-uALoss.UALoss)
        annotation (Placement(transformation(
            extent={{-24,-13},{24,13}},
            rotation=180,
            origin={168,-111})));
      Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow3[
        nSeg] annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={104,-110})));
      Modelica.Blocks.Interfaces.RealInput TAmb
        annotation (Placement(transformation(extent={{-502,178},{-420,260}}),
            iconTransformation(extent={{-80,38},{-58,60}})));
      Modelica.Blocks.Interfaces.RealOutput TOutDra
        "Temperature of water going to the draw"
        annotation (Placement(transformation(extent={{640,-116},{700,-56}}),
            iconTransformation(extent={{58,-10},{80,12}})));
      Modelica.Blocks.Sources.RealExpression realExpression3(y=vol[TStatHeight].T)
        annotation (Placement(transformation(extent={{172,-274},{232,-214}})));
      Modelica.Blocks.Sources.Constant Setpoint(k=TSet)
        annotation (Placement(transformation(extent={{190,-184},{228,-146}})));
      Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=Deadband)
        annotation (Placement(transformation(extent={{314,-224},{358,-180}})));
      Modelica.Blocks.Math.BooleanToInteger booleanToInteger
        annotation (Placement(transformation(extent={{404,-226},{448,-182}})));
      Modelica.Blocks.Math.Gain QPerFlu(k=perQFlu)
        "Percentage of total heat transfer taking place in the flue"
        annotation (Placement(transformation(extent={{-330,360},{-310,380}})));
      Modelica.Blocks.Math.Gain QPerBas(k=perQBas)
        "Percentage of heat transfer passing through the base"
        annotation (Placement(transformation(extent={{-324,324},{-304,344}})));
      WaterHeaterLib.BaseClasses.buoHeaTraMod buoHeaTraMod(
        redeclare package Medium = Medium,
        nSeg=nSeg,
        QDotPilot=QDotPilot)
        annotation (Placement(transformation(extent={{-218,338},{-180,376}})));
      Modelica.Blocks.Interfaces.RealInput EffTan
        "Conversion efficiency of the tank"
        annotation (Placement(transformation(extent={{-98,-8},{-58,32}}),
            iconTransformation(extent={{-80,10},{-58,32}})));
      Modelica.Blocks.Math.Product product1
        annotation (Placement(transformation(extent={{-376,356},{-356,376}})));
      Modelica.Blocks.Sources.RealExpression realExpression4(y=EffTan)
        annotation (Placement(transformation(extent={{-414,410},{-394,430}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
            Medium)
        annotation (Placement(transformation(extent={{-24,94},{-4,114}}),
            iconTransformation(extent={{-30,94},{-10,114}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
            Medium)
        annotation (Placement(transformation(extent={{14,96},{34,116}}),
            iconTransformation(extent={{20,94},{40,114}})));
      Modelica.Blocks.Routing.Replicator replicator(nout=nSeg) annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-132,390})));
      Buildings.Fluid.MixingVolumes.MixingVolume vol[nSeg](
        redeclare package Medium = Medium,
        each m_flow_nominal=0.001,
        each V=VTan/nSeg,
        each nPorts=1,
        T_start=T_Initial)
        annotation (Placement(transformation(extent={{72,78},{124,126}})));
      Buildings.Fluid.Sources.Boundary_pT boundary(
        redeclare package Medium = Medium,
        use_T_in=true,
        p=PMains,
        nPorts=1) annotation (Placement(transformation(
            extent={{-32,-39},{32,39}},
            rotation=90,
            origin={303,324})));
      Modelica.Blocks.Sources.RealExpression realExpression5(y=vol[1].T)
        annotation (Placement(transformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={286,238})));
      Buildings.Fluid.Sources.MassFlowSource_T boundary1(
        redeclare package Medium = Medium,
        nPorts=1,
        use_m_flow_in=true,
        T=288.15)
        annotation (Placement(transformation(extent={{68,420},{48,440}})));
      Buildings.Fluid.Sensors.MassFlowRate senMasFlo1(redeclare package Medium
          = Medium) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={306,408})));
      Buildings.Fluid.Sources.Boundary_pT boundary2[nSeg](each nPorts=1, redeclare
          package Medium = Medium)
        annotation (Placement(transformation(extent={{228,50},{190,84}})));
      Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium
          = Medium) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-12,250})));
      Buildings.Fluid.Sensors.Temperature senTem(redeclare package Medium =
            Medium)
        annotation (Placement(transformation(extent={{-20,184},{-40,204}})));
      Modelica.Blocks.Sources.RealExpression realExpression6(y=-senMasFlo1.m_flow)
        annotation (Placement(transformation(extent={{138,428},{118,448}})));
    equation
      TOutRec = vol[RecircOutSeg].T;
      TOutDra = vol[1].T;
      connect(draHea.y, prescribedHeatFlow1.Q_flow) annotation (Line(
          points={{139.2,-4},{132.9,-4},{132.9,-4},{126.6,-4},{126.6,-4},{114,-4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(temperatureSensor.T, draHeaTra.TWat) annotation (Line(
          points={{-30,383},{-30,382},{-104.44,382},{-104.44,366.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(mFloRec, cirHeaTra.mFloCir) annotation (Line(
          points={{-82,0},{-344,0},{-344,-170},{-243.6,-170}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TInRec, cirHeaTra.TRec) annotation (Line(
          points={{-82,-70},{-344,-70},{-344,-192.4},{-243.6,-192.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression.y, prescribedHeatFlow.Q_flow) annotation (Line(
          points={{135,-41},{125.5,-41},{125.5,-40},{114,-40}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression1.y, prescribedHeatFlow2.Q_flow) annotation (Line(
          points={{139.3,-80},{114,-80}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression2.y, prescribedHeatFlow3.Q_flow) annotation (Line(
          points={{141.6,-111},{129.8,-111},{129.8,-110},{114,-110}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TAmb, uALoss.TAmb) annotation (Line(
          points={{-461,219},{-391.5,219},{-391.5,221.82},{-318.4,221.82}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(onOffController.y, booleanToInteger.u) annotation (Line(
          points={{360.2,-202},{379.9,-202},{379.9,-204},{399.6,-204}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(booleanToInteger.y, TStatSig) annotation (Line(
          points={{450.2,-204},{666,-204}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(Setpoint.y, onOffController.reference) annotation (Line(
          points={{229.9,-165},{280,-165},{280,-188.8},{309.6,-188.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression3.y, onOffController.u) annotation (Line(
          points={{235,-244},{274,-244},{274,-215.2},{309.6,-215.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QPerBas.y, buoHeaTraMod.QDotBas) annotation (Line(
          points={{-303,334},{-244,334},{-244,338},{-221.8,338}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QPerFlu.y, buoHeaTraMod.QDotFlu) annotation (Line(
          points={{-309,370},{-270,370},{-270,353.2},{-221.8,353.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QDotIn, product1.u2) annotation (Line(
          points={{-96,60},{-257,60},{-257,360},{-378,360}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(product1.y, QPerBas.u) annotation (Line(
          points={{-355,366},{-346,366},{-346,334},{-326,334}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(QPerFlu.u, product1.y) annotation (Line(
          points={{-332,370},{-344,370},{-344,366},{-355,366}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(realExpression4.y, product1.u1) annotation (Line(
          points={{-393,420},{-386,420},{-386,372},{-378,372}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(replicator.y, draHeaTra.mFloIn) annotation (Line(
          points={{-132,379},{-132,374.5},{-132.5,374.5},{-132.5,366.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(temperatureSensor.T, uALoss.TWat) annotation (Line(
          points={{-30,383},{-46,383},{-46,382},{-60,382},{-60,278},{-340,278},{-340,
              234.8},{-318.4,234.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(temperatureSensor.T, cirHeaTra.TWat) annotation (Line(
          points={{-30,383},{-46,383},{-46,380},{-60,380},{-60,-114},{-266,-114},{-266,
              -147.6},{-243.6,-147.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(vol.heatPort, temperatureSensor.port) annotation (Line(
          points={{72,102},{38,102},{38,383},{4,383}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedHeatFlow1.port, vol.heatPort) annotation (Line(
          points={{94,-4},{60,-4},{60,102},{72,102}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
          points={{94,-40},{60,-40},{60,102},{72,102}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedHeatFlow2.port, vol.heatPort) annotation (Line(
          points={{94,-80},{60,-80},{60,102},{72,102}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(prescribedHeatFlow3.port, vol.heatPort) annotation (Line(
          points={{94,-110},{60,-110},{60,102},{72,102}},
          color={191,0,0},
          smooth=Smooth.None));
      connect(vol.heatPort, buoHeaTraMod.TWat) annotation (Line(
          points={{72,102},{38,102},{38,300},{-238,300},{-238,363.84},{-219.14,363.84}},
          color={191,0,0},
          smooth=Smooth.None));

      connect(realExpression5.y, boundary.T_in) annotation (Line(
          points={{286,260},{286,285.6},{287.4,285.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(port_b, senMasFlo1.port_b) annotation (Line(
          points={{24,106},{24,262},{306,262},{306,418}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(senMasFlo1.port_a, boundary.ports[1]) annotation (Line(
          points={{306,398},{306,356},{303,356}},
          color={0,127,255},
          smooth=Smooth.None));

      for i in 1:nSeg loop
        connect(vol[i].ports[1], boundary2[i].ports[1]);
      end for;

      connect(port_a, senMasFlo.port_a) annotation (Line(
          points={{-14,104},{-12,104},{-12,240}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(senMasFlo.port_b, boundary1.ports[1]) annotation (Line(
          points={{-12,260},{-12,346},{28,346},{28,432},{48,432},{48,430}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(senMasFlo.m_flow, replicator.u) annotation (Line(
          points={{-23,250},{-44,250},{-44,416},{-132,416},{-132,402}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(port_a, senTem.port) annotation (Line(
          points={{-14,104},{-30,104},{-30,184}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(senTem.T, draHeaTra.TIn) annotation (Line(
          points={{-37,194},{-44,194},{-44,416},{-113.64,416},{-113.64,366.6}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(realExpression6.y, boundary1.m_flow_in) annotation (Line(
          points={{117,438},{68,438}},
          color={0,0,127},
          smooth=Smooth.None));

      annotation (Line(
          points={{98,78},{100,78},{100,64},{190,64},{190,67}},
          color={0,127,255},
          smooth=Smooth.None),
                  Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-420,
                -360},{640,460}}), graphics), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Bitmap(
              extent={{-152,100},{152,-94}},
              imageSource=""
                   + ""
                   + "NUG5slfCIssFQZNCRTVUm4hs4YLd111ehTTpKhskvYJqAxEBMFdtg0pCVASJSBid4yhJb7/9QFk6E0XeVzQ0Y0wUVTzSMi96vd5wOFxavtzv9/v9lbm5uS996dEv/O3f3LGjFzLf8N06643ZiIWVbR+4iXyAgQiss0YbW+ZRpAFImJEoyzITJ4qUF1haGjzxxBN/+sSTLx07JqDn5nbvnNrZajTTWL915s3//F/+U7MZkXIizrEXJqBEUQIA6B0hAwV0GiOigBdhRFJKsfNKGe/EWqt1FKKRwOKfiJrYsRfPDKJJKaProhYiutJ6tjXyuZZ+GE8VUJOdckTlbTiHAIZ1Ib8NGY7jalFgx0mzdcftd5alC1ZKRFEUJUkSRZFCEuHBYPDmqdf7/f7ddx/82JH7Hn300Qcf/IQxKCDWFpGJECgk4nEUsxdSuN7qby6m2IfaB8bTuYSZNSEAsxcA9gzGmCC0iAgeINQ13jhz+bv//X+89NIrr594PY7j2ZldsaFvfevfp6k2BkmHsEcxaBAlIhpEEQryOByqpIqq0RseoigKXBxj4rBm6/E+sIEsXw9dRVXhHRCFnXe+DPvApDzRuKdGk7oVGApblfaMD2UiIERE70QII6WFlLM+iqI9e/aNRrkwaq2TJInjGBGHw+HyyuLa2tq+3fOf+EsP/dojv/r5z3/eGCKqVn3PVpEqK0iIqqx9w2q/TqZp2wduvlppiJ5F1qmky5iggwihWXb27MWjR48+//zzzz37zI9+9KPllaUQgARhnzhpaG1ExCjlfFlPEQ79qWCvzrkQnRPp2iu8t7WaS9gHYKzbM5kK144R0oYrZ79JQeiK51TBkgoSQMaoAPSoncexV0il9ex9p9ttNpujUV6WJQCUZemdM1F0//33f+5zn3vooYc+82u/Kutt+52O9tnOiW/+mulVqbq2FGNC4AEAsLy8+sYbb/zsZz87evToj3/844WFhdFotDZYC8UWFtdoNJIkCdYWVtOiKILqdaj/BGcYG7GrfaCe1BT84QqWYUKPMVh5LXIRHlVKOecmZ2hXuCbnjDH1LlHP9A5EmaIoQnbrnIMxqsoYc++99z7yyCOf+tSn7r333rm5OWNMaLpv+Y1t+8CHY6fg2h8qBSFrvTEqz8sAIT558uTRo0dffvnl1dXVs2fPnj59ut/vA4AxJsgc9Xq9YKmIGEyzJhY7V9YmNZkWb7Dy2gGCaymlJlOIunsV3Cz8T8DM9vv9wP+a3D3qE+t2u71eb8+ePQ8++OAnP/nJPXv23HnnnWmaaq0nGZg1uWzD6nDLFtC3fWBDFdUYjQjMlcSQ1ir8Op50BN4HWB6IwOpqf2Vl5YUXXvjJT36ysLDAzBcuXDh58uTKyko9Liko6mRZNhgMjFEhlaxjmGDHYZHeIOsZ1ungRZMnuX4QUyUrFB4KJAciOnDgwO7du40xBw4cePDBB48cOTIzMzM7OxvcsvaoIIS4oa7KvJH4ews7wLYPbBEj1UpVY7xNJSoaLGNyrsf6F17ZNPI8X1xcvHjx4vHjx0+ePLmwsJBl2Wg0Gg6HCwsXi6KipGRZFoCoN6JFHkVROj5CDafZbHa73SiKlFJTU1OHDx8+dOjQoUOH5ufnm80mM4eI6wY/9YZZBNcekrntA7e+G4QI5GqQr9oxiMj7EHlXbhCEdCbDqjGWe0PXojrChuC9Hw6Hk3XPei58MPEoiuI4DucTrtckqQ0mhsVvmL4T8oSxoGolG1y7dO3wIXLbMu3+MBzbPnC1rIDr3aDuT4X/rIswW+aOYU1nZqVoUtGwkrBA2XJuTTDlSR/YvEhfd/xMsPI6Upo066CADQChABXub/7Ik6/68BzbPrB1ODR5pyYrT5pasNT1CqQb46JwZ/P+cOPxyebcdJIutyGOn3xCKPuEM68freO6cD+0KerPOCnsfjOP1N72gfd9A3iHz6f3yvGuVqvdviTv90HbX8H28SE//h9gyUdlxDpGaQAAAABJRU5ErkJggg==",
              fileName="modelica://WaterHeatingLibrary/../../../../../Pictures/waterheater.png")}),
        Documentation(info="<html>
<p>
This is a model of a water heater tank.
The tank uses several volumes to model the stratification.
Heat conduction is modeled between between the volumes and the ambient.
</p>
<p>
The tank has <code>nSeg</code> fluid volumes. The top volume has the index <code>1</code>.
</p>
<p>
The height of the thermostat is controlled by adjusting the parameter value for which segment the thermostat is in. An <code>onOffController</code> compares the
temperature in the user-specified segment to the setpoint and outputs an on/off signal. The on/iff signal is sent to control logic which is placed outside of the heater
model.
</p>
<p>
Sub-models within this model are used to identify all of the heat transfers. These include draHeaTra (identifies the heat transfer in each segment caused by a hot
water draw event), buoHeaTra (heat transfer caused by buoyant flows when the burner is activated), cirHeaTra (heat transfer caused by flow through a recirculation loop),
and UALos (heat loss to ambient conditions). These sub-models were necessary because the volume model does not contain any native method of handling complex flows
into/out of each segment (only direct flow from one to the next).
</p>
<p>
This model is intended to replace the SimplifiedStorageTank model. The implemented changes retain the same functionality while replacing Real input/output connections
with fluid connections using components from the Modelica and Buildings libraries. It is intended to be closer to Buildings library standards.
</p>
<p>
Planned future revisions include:<br>
CLEAN THE MODEL and make it easier to understand.<br>
Continue to bring it up to Buildings library standards.
</p>
</html>",   revisions="<html>
<ul>
<li>
Mar 29,2013 by Peter Grant:<br>
First implementation.
</li>
</ul>
</html>"));
    end SimplifiedStorageTankMediumModel;

    package Examples
      model ComplexTank "Test model for water heater"
        import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
        extends Modelica.Icons.Example;
        import Modelica.SIunits;
        package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nStaRef=6 "Number of states in a reference material";
      //  parameter Integer nSeg=tan.nSeg;
        parameter Real T_DB = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "DryBulbTemperature");
        parameter Real TMeaRad = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "MeanRadiantTemperature");
        parameter Real T_Floor = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FloorTemperature");
        parameter Real Q_P = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "QDot_Pilot");
        parameter Real Q_Burner = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "QDot_Burner");
        parameter Real T_Set = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "T_Set");
        parameter Real Deadband = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "ThermostatDeadband");
        parameter Real TankVolume = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "TankVolume");
        parameter Real FlueDiameter = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueDiameter");
        parameter Real FlueLength = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueLength");
      //  parameter Real InletWaterTemp = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "InletWaterTemp");
        parameter Real FlueToWaterConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueToWaterConvectionCoefficient");
        parameter Real GasToFlueConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasToFlueConvectionCoefficient");
        parameter Real TankDiameter = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "TankDiameter");
        parameter Real GasToBaseConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasToBaseConvectionCoefficient");
        parameter Real FuelHigherHeatingValue = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FuelHigherHeatingValue");
        parameter Real FuelLowerHeatingValue = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FuelLowerHeatingValue");
        parameter Real StoichiometricAirFuelRatio = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "StoichiometricAirFuelRatio");
        parameter Real ExcessAir = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "ExcessAir");
        parameter Real GasSpecificHeat = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasSpecificHeat");
      //  parameter Real InitialTemp = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "T_Initial");
        parameter Integer nSeg = 20;//WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "nSeg");
      //  parameter Integer ThermostatHeight = WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "ThermostatHeight");
        inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            massDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial) annotation (
            Placement(transformation(extent={{-140,-138},{-120,-118}})));
        Buildings.HeatTransfer.Sources.PrescribedTemperature TBCBot
          "Boundary condition for tank" annotation (Placement(transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={-56,-8})));
        Modelica.Blocks.Sources.Constant QBurner(k=12000) annotation (Placement(
              transformation(extent={{140,-78},{120,-98}}, rotation=0)));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayExt(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          nLay=2,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
              x=0.012,
              k=4.671,
              c=473,
              d=7801,
              nStaRef=nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
              x=0.013,
              k=0.04,
              c=1380,
              d=150,
              nStaRef=nStaRef)}) "Tank Envelope"
          annotation (Placement(transformation(extent={{-142,-98},{-124,-80}})));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayTanBot(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          final nLay=1,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
                  x=0.003176,
                  k=4.671,
                  c=473,
                  d=7801,
                  nStaRef=nStaRef)}) "Flue Wall"
          annotation (Placement(transformation(extent={{-114,-98},{-96,-80}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor T_sensor
          "switch temperature"
          annotation (Placement(transformation(extent={{62,-16},{72,-6}})));
        Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=12)
          annotation (Placement(transformation(extent={{56,-142},{36,-122}})));
        Modelica.Blocks.Sources.Constant T_switch(k=273.105 + 48)
          annotation (Placement(transformation(extent={{142,-136},{122,-116}})));
        Modelica.Blocks.Math.BooleanToReal booleanToInteger
          annotation (Placement(transformation(extent={{24,-142},{4,-122}})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-2,-74})));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayFlue(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          final nLay=1,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
                  x=0.000753,
                  k=4.671,
                  c=1,
                  d=7801,
                  nStaRef=nStaRef)}) "Flue Wall"
          annotation (Placement(transformation(extent={{-84,-98},{-66,-80}})));
        Modelica.Blocks.Sources.Constant TFloor(k=T_Floor)
          annotation (Placement(transformation(extent={{-134,-18},{-114,2}})));
        Modelica.Blocks.Sources.Constant QPilot(k=158) annotation (Placement(
              transformation(extent={{140,-46},{120,-66}}, rotation=0)));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,-42})));
        BaseClasses.Burner.Gas burn(
          datTanEnv(
            layers=matLayExt,
            A=1.75,
            til=Buildings.HeatTransfer.Types.Tilt.Wall,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvBot(
            layers=matLayTanBot,
            A=0.12,
            til=Buildings.HeatTransfer.Types.Tilt.Floor,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          absIR_FS=0.2,
          DTan=TankDiameter,
          DFlu=FlueDiameter,
          deltaHc_H=FuelHigherHeatingValue,
          deltaHc_L=FuelLowerHeatingValue,
          stoich=StoichiometricAirFuelRatio,
          EA=ExcessAir,
          cp_G=GasSpecificHeat,
          h_GB=450)
          annotation (Placement(transformation(extent={{-24,0},{34,42}})));
        WaterHeaterLib.ComplexTank tan(
          allowFlowReversal=false,
          m_flow_nominal=0.001,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          redeclare package Medium = Medium,
          datTanEnv(
            layers=matLayExt,
            A=1.75,
            til=Buildings.HeatTransfer.Types.Tilt.Wall,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvTop(
            layers=matLayExt,
            A=0.04,
            til=Buildings.HeatTransfer.Types.Tilt.Ceiling,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvBot(
            layers=matLayTanBot,
            A=0.12,
            til=Buildings.HeatTransfer.Types.Tilt.Floor,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          h_cw_B_cons=1000,
          datFlueWall(
            layers=matLayFlue,
            A=0.236,
            til=Buildings.HeatTransfer.Types.Tilt.Wall),
          c_wB=1/15,
          c_wI=0.001,
          c_sr=110000,
          conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
          VTan=TankVolume,
          DFlu=FlueDiameter,
          LFlu=FlueLength,
          h_WF_cons=FlueToWaterConvectionCoefficient,
          h_cv_F=GasToFlueConvectionCoefficient,
          perInA={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.0033,2.8428,-0.4415,6.1873,4.0134},
          perInB={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1405,0.102,-0.2213,-2.8662,-2.0619},
          perInC={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.0224,-0.0032,0.2329,0.5048,0.7896},
          timDelA={-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,-2092.3,
              -2092.3,-2092.3,-2092.3,-2092.3,-2376.6,-2660.9,-3112.4,-1971.9,-567.21,
              100.33,0},
          timDelB={812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,812.61,
              812.61,812.61,812.61,802.41,792.21,805.42,475.76,79.1,-14.047,0},
          timDelC={7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,7.6157,
              7.6157,7.6157,7.6157,7.9334,8.2512,8.1676,14.305,21.676,0.2408,0},
          nSeg=20,
          T_Initial={321.85,321.85,321.85,321.85,321.85,321.85,321.85,321.85,
              321.85,321.85,321.85,321.85,321.85,321.85,321.85,321.85,321.85,
              321.85,321.85,321.85})
          annotation (Placement(transformation(extent={{-52,48},{62,136}})));
        Modelica.Blocks.Tables.CombiTable1Ds WaterFlow[nSeg](
          tableOnFile=true,
          tableName="Inputs",
          fileName="WaterFromTest16.txt")
          annotation (Placement(transformation(extent={{-112,126},{-92,146}})));
        Modelica.Blocks.Sources.RealExpression Time[nSeg](y=time)
          annotation (Placement(transformation(extent={{-154,126},{-134,146}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=time)
          annotation (Placement(transformation(extent={{-148,38},{-128,58}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData(
          tableOnFile=true,
          tableName="Data",
          fileName="ValidationDataFromTest16.txt",
          columns=2:12)
          annotation (Placement(transformation(extent={{-114,38},{-94,58}})));
        Modelica.Blocks.Tables.CombiTable1Ds Inlet(
          tableOnFile=true,
          tableName="Inputs",
          fileName="InletFromTest16.txt")
          annotation (Placement(transformation(extent={{-114,96},{-94,116}})));
        Modelica.Blocks.Tables.CombiTable1Ds Ambient(
          tableOnFile=true,
          tableName="Inputs",
          fileName="AmbientFromTest16.txt")
          annotation (Placement(transformation(extent={{-114,68},{-94,88}})));
        WaterHeaterLib.BaseClasses.TimeBasedIfGain timeBasedIfGain(
          TimeLow=122776,
          TimeHigh=164298,
          InIfGain=0,
          OutIfGain=0.85) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={16,-12})));
        Modelica.Blocks.Math.Gain gain(k=1.375) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={60,-88})));
      equation
        connect(T_switch.y, onOffController.reference) annotation (Line(
            points={{121,-126},{58,-126}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(onOffController.y, booleanToInteger.u) annotation (Line(
            points={{35,-132},{26,-132}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(booleanToInteger.y, product.u1) annotation (Line(
            points={{3,-132},{-6.8,-132},{-6.8,-83.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TFloor.y, TBCBot.T) annotation (Line(
            points={{-113,-8},{-88.1,-8},{-88.1,-8},{-63.2,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, add.u1) annotation (Line(
            points={{-2,-65.2},{-2,-54},{-8.88178e-016,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TBCBot.port, burn.heaPorBot) annotation (Line(
            points={{-50,-8},{3.26,-8},{3.26,5.50345}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(tan.heaPorBot, burn.heaPorTop) annotation (Line(
            points={{-9.84151,45.8537},{-9.84151,47},{-9.5,47},{-9.5,36.2069}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(tan.Q_B, burn.Q_B) annotation (Line(
            points={{0.483019,45.8537},{0.483019,47},{1.23,47},{1.23,36.3517}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.T_F0_y, burn.T_F0_y) annotation (Line(
            points={{9.73208,46.9268},{9.73208,47.5},{10.365,47.5},{10.365,
                36.2069}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.cdot_G_y, burn.cdot_G_y) annotation (Line(
            points={{18.766,46.9268},{18.766,47.5},{19.355,47.5},{19.355,
                35.9172}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.heaPor[19], T_sensor.port) annotation (Line(
            points={{28.3377,86.2961},{46,86.2961},{46,-11},{62,-11}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(T_sensor.T, onOffController.u) annotation (Line(
            points={{72,-11},{80,-11},{80,-138},{58,-138}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y, WaterFlow.u)               annotation (Line(
            points={{-133,136},{-114,136}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, ValidationData.u)
                                                   annotation (Line(
            points={{-127,48},{-116,48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, Ambient.u) annotation (Line(
            points={{-127,48},{-122,48},{-122,78},{-116,78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, Inlet.u) annotation (Line(
            points={{-127,48},{-122,48},{-122,106},{-116,106}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Inlet.y[1], tan.TIn) annotation (Line(
            points={{-93,106},{-73.4679,106},{-73.4679,105.737},{-53.9358,
                105.737}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Ambient.y[1], burn.TDryBul) annotation (Line(
            points={{-93,78},{-26,78},{-26,0},{-8.195,0},{-8.195,5.50345}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Ambient.y[1], tan.TDryBul) annotation (Line(
            points={{-93,78},{-62,78},{-62,142},{36,142},{36,100.371},{28.4453,
                100.371}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Ambient.y[1], tan.TRadMea) annotation (Line(
            points={{-93,78},{-62,78},{-62,142},{36,142},{36,66.4585},{27.8,
                66.4585}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QPilot.y, add.u2) annotation (Line(
            points={{119,-56},{102,-56},{102,-66},{12,-66},{12,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeBasedIfGain.u, add.y) annotation (Line(
            points={{16,-24},{12,-24},{12,-31},{6,-31}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeBasedIfGain.y, burn.QBurner) annotation (Line(
            points={{15.8,-0.8},{15.8,2.6},{16.31,2.6},{16.31,5.64828}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QBurner.y, gain.u) annotation (Line(
            points={{119,-88},{72,-88}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain.y, product.u2) annotation (Line(
            points={{49,-88},{2.8,-88},{2.8,-83.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(WaterFlow.y[1], tan.m_flow_in) annotation (Line(
            points={{-91,136},{-56.5509,136},{-56.5509,136.429},{-22.1019,
                136.429}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-150,-150},
                  {150,150}}), graphics),
          __Dymola_Commands(file=
                "modelica://Buildings/Resources/Scripts/Dymola/Fluid/Storage/Examples/Stratified.mos"
              "Simulate and plot"),
          Documentation(info="<html>
This test model compares two tank models. The only difference between
the two tank models is that one uses the third order upwind discretization
scheme that reduces numerical diffusion that is induced when connecting 
volumes in series.
</html>"),Icon(coordinateSystem(preserveAspectRatio=true, extent={{-150,-150},{
                  150,150}})));
      end ComplexTank;

      model StorageTankWithFan
        import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
        extends Modelica.Icons.Example;
        import Modelica.SIunits;
        package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nStaRef=6 "Number of states in a reference material";
      //  parameter Integer nSeg=tan.nSeg;
        parameter Real T_DB = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "DryBulbTemperature");
        parameter Real TMeaRad = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "MeanRadiantTemperature");
        parameter Real T_Floor = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FloorTemperature");
        parameter Real Q_P = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "QDot_Pilot");
        parameter Real Q_Burner = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "QDot_Burner");
        parameter Real T_Set = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "T_Set");
        parameter Real Deadband = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "ThermostatDeadband");
        parameter Real TankVolume = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "TankVolume");
        parameter Real FlueDiameter = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueDiameter");
        parameter Real FlueLength = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueLength");
        parameter Real InletWaterTemp = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "InletWaterTemp");
        parameter Real FlueToWaterConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FlueToWaterConvectionCoefficient");
        parameter Real GasToFlueConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasToFlueConvectionCoefficient");
        parameter Real TankDiameter = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "TankDiameter");
        parameter Real GasToBaseConvectionCoefficient = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasToBaseConvectionCoefficient");
        parameter Real FuelHigherHeatingValue = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FuelHigherHeatingValue");
        parameter Real FuelLowerHeatingValue = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "FuelLowerHeatingValue");
        parameter Real StoichiometricAirFuelRatio = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "StoichiometricAirFuelRatio");
        parameter Real ExcessAir = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "ExcessAir");
        parameter Real GasSpecificHeat = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "GasSpecificHeat");
      //  parameter Real InitialTemp = Modelica.Utilities.Examples.readRealParameter("StorageExampleParameters.txt", "T_Initial");
        parameter Integer nSeg = WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "nSeg");
      //  parameter Integer ThermostatHeight = WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "ThermostatHeight");
        parameter Real QEleIdl = WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "QEleIdl");
        parameter Real QEleAct = WaterHeaterLib.BaseClasses.readIntegerParameter("StorageExampleParameters.txt", "QEleAct");
        inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            massDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial) annotation (
            Placement(transformation(extent={{-134,-138},{-114,-118}})));
        Buildings.HeatTransfer.Sources.PrescribedTemperature TBCBot
          "Boundary condition for tank" annotation (Placement(transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={-50,-8})));
        Modelica.Blocks.Sources.Constant QBurner(k=11000) annotation (Placement(
              transformation(extent={{146,-78},{126,-98}}, rotation=0)));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayExt(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          nLay=2,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
              x=0.012,
              k=4.671,
              c=473,
              d=7801,
              nStaRef=nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
              x=0.013,
              k=0.04,
              c=1380,
              d=150,
              nStaRef=nStaRef)}) "Tank Envelope"
          annotation (Placement(transformation(extent={{-136,-98},{-118,-80}})));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayTanBot(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          final nLay=1,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
                  x=0.003176,
                  k=4.671,
                  c=473,
                  d=7801,
                  nStaRef=nStaRef)}) "Flue Wall"
          annotation (Placement(transformation(extent={{-108,-98},{-90,-80}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor T_sensor
          "switch temperature"
          annotation (Placement(transformation(extent={{68,-16},{78,-6}})));
        Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=12)
          annotation (Placement(transformation(extent={{62,-142},{42,-122}})));
        Modelica.Blocks.Sources.Constant T_switch(k=273.105 + 48)
          annotation (Placement(transformation(extent={{148,-136},{128,-116}})));
        Modelica.Blocks.Math.BooleanToReal booleanToInteger
          annotation (Placement(transformation(extent={{30,-142},{10,-122}})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={4,-74})));
        parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
          matLayFlue(
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          final nLay=1,
          material={Buildings.HeatTransfer.Data.Solids.Generic(
                  x=0.000753,
                  k=4.671,
                  c=1,
                  d=7801,
                  nStaRef=nStaRef)}) "Flue Wall"
          annotation (Placement(transformation(extent={{-78,-98},{-60,-80}})));
        Modelica.Blocks.Sources.Constant TDryBul(k=T_DB)
          annotation (Placement(transformation(extent={{146,68},{126,88}})));
        Modelica.Blocks.Sources.Constant TRadMea(k=TMeaRad)
          annotation (Placement(transformation(extent={{146,30},{126,50}})));
        Modelica.Blocks.Sources.Constant TFloor(k=T_Floor)
          annotation (Placement(transformation(extent={{-128,-18},{-108,2}})));
        Modelica.Blocks.Sources.Constant QPilot(k=158) annotation (Placement(
              transformation(extent={{146,-42},{126,-62}}, rotation=0)));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={12,-36})));
        BaseClasses.Burner.Gas burn(
          datTanEnv(
            layers=matLayExt,
            A=1.75,
            til=Buildings.HeatTransfer.Types.Tilt.Wall,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvBot(
            layers=matLayTanBot,
            A=0.12,
            til=Buildings.HeatTransfer.Types.Tilt.Floor,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          absIR_FS=0.2,
          DTan=TankDiameter,
          DFlu=FlueDiameter,
          h_GB=GasToBaseConvectionCoefficient,
          deltaHc_H=FuelHigherHeatingValue,
          deltaHc_L=FuelLowerHeatingValue,
          stoich=StoichiometricAirFuelRatio,
          EA=ExcessAir,
          cp_G=GasSpecificHeat)
          annotation (Placement(transformation(extent={{-18,0},{40,42}})));
        WaterHeaterLib.ComplexTank tan(
          allowFlowReversal=false,
          m_flow_nominal=0.001,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          redeclare package Medium = Medium,
          datTanEnv(
            layers=matLayExt,
            A=1.75,
            til=Buildings.HeatTransfer.Types.Tilt.Wall,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvTop(
            layers=matLayExt,
            A=0.04,
            til=Buildings.HeatTransfer.Types.Tilt.Ceiling,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          datTanEnvBot(
            layers=matLayTanBot,
            A=0.12,
            til=Buildings.HeatTransfer.Types.Tilt.Floor,
            azi=Buildings.HeatTransfer.Types.Azimuth.W),
          h_cw_B_cons=1000,
          datFlueWall(
            layers=matLayFlue,
            A=0.236,
            til=Buildings.HeatTransfer.Types.Tilt.Wall),
          c_wB=1/15,
          c_wI=0.001,
          c_sr=110000,
          conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature,
          VTan=TankVolume,
          DFlu=FlueDiameter,
          LFlu=FlueLength,
          TIn=InletWaterTemp,
          h_WF_cons=FlueToWaterConvectionCoefficient,
          h_cv_F=GasToFlueConvectionCoefficient,
          nSeg=nSeg,
          perInA={0,0,0,0,0,1},
          perInB={0,0,0,0,0,1},
          perInC={0,0,0,0,0,1},
          timDelA={0,0,0,0,0,1},
          timDelB={0,0,0,0,0,1},
          timDelC={0,0,0,0,0,1},
          T_Initial={321.15,321.15,321.15,321.15,321.15,321.15})
          annotation (Placement(transformation(extent={{-46,48},{68,136}})));
        Modelica.Blocks.Tables.CombiTable1Ds WaterFlow[nSeg](
          tableOnFile=true,
          tableName="Flow",
          fileName="26-WaterFlowFromTest8.txt")
          annotation (Placement(transformation(extent={{-106,126},{-86,146}})));
        Modelica.Blocks.Sources.RealExpression Time[nSeg](y=time)
          annotation (Placement(transformation(extent={{-148,126},{-128,146}})));
        WaterHeaterLib.BaseClasses.QEle qEle(QEleIdl=QEleIdl, QEleAct=QEleAct)
                                             annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-28,-72})));
      equation
        connect(T_switch.y,onOffController. reference) annotation (Line(
            points={{127,-126},{64,-126}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(onOffController.y,booleanToInteger. u) annotation (Line(
            points={{41,-132},{32,-132}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(booleanToInteger.y,product. u1) annotation (Line(
            points={{9,-132},{-0.8,-132},{-0.8,-83.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TFloor.y,TBCBot. T) annotation (Line(
            points={{-107,-8},{-82.1,-8},{-82.1,-8},{-57.2,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QBurner.y,product. u2) annotation (Line(
            points={{125,-88},{8.8,-88},{8.8,-83.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y,add. u1) annotation (Line(
            points={{4,-65.2},{4,-48},{6,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QPilot.y,add. u2) annotation (Line(
            points={{125,-52},{18,-52},{18,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y,burn. QBurner) annotation (Line(
            points={{12,-25},{12,-2},{22.31,-2},{22.31,5.64828}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TBCBot.port,burn. heaPorBot) annotation (Line(
            points={{-44,-8},{9.26,-8},{9.26,5.50345}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(TDryBul.y,burn. TDryBul) annotation (Line(
            points={{125,78},{80,78},{80,-2},{-2.195,-2},{-2.195,5.50345}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.heaPorBot,burn. heaPorTop) annotation (Line(
            points={{-3.84151,45.8537},{-3.84151,47},{-3.5,47},{-3.5,36.2069}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(tan.Q_B,burn. Q_B) annotation (Line(
            points={{6.48302,45.8537},{6.48302,47},{7.23,47},{7.23,36.3517}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.T_F0_y,burn. T_F0_y) annotation (Line(
            points={{15.7321,46.9268},{15.7321,47.5},{16.365,47.5},{16.365,
                36.2069}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.cdot_G_y,burn. cdot_G_y) annotation (Line(
            points={{24.766,46.9268},{24.766,47.5},{25.355,47.5},{25.355,
                35.9172}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul.y,tan. TDryBul) annotation (Line(
            points={{125,78},{80,78},{80,100.371},{34.4453,100.371}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TRadMea.y,tan. TRadMea)  annotation (Line(
            points={{125,40},{80,40},{80,66.4585},{33.8,66.4585}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.heaPor[5],T_sensor. port) annotation (Line(
            points={{34.3377,84.3805},{52,84.3805},{52,-11},{68,-11}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(T_sensor.T,onOffController. u) annotation (Line(
            points={{78,-11},{86,-11},{86,-138},{64,-138}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y,WaterFlow. u)               annotation (Line(
            points={{-127,136},{-108,136}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(WaterFlow.y[1],tan. m_flow_in)     annotation (Line(
            points={{-85,136},{-50.5509,136},{-50.5509,136.429},{-16.1019,
                136.429}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(booleanToInteger.y, qEle.BurnerStatus) annotation (Line(
            points={{9,-132},{-28,-132},{-28,-84}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-150,-150},
                  {150,150}}), graphics), Icon(coordinateSystem(preserveAspectRatio=true,
                extent={{-150,-150},{150,150}})));
      end StorageTankWithFan;

      model SimplifiedStorageTankExampleValidation
        "A model used to validate SimplifiedStorageTank"
        extends Modelica.Icons.Example;
        package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
        parameter Integer nSeg = 5;
        SimplifiedStorageTank tan(
          RecircInSeg=1,
          redeclare package Medium = Water,
          perQFlu=1/3,
          perQBas=2/3,
          VTan=0.1438,
          Deadband=12,
          QDotPilot=158,
          TSet=273.105 + 46,
          UA=5.5,
          nSeg=nSeg,
          perInA={0,0,0,0,0},
          perInB={0,0,0,0,0},
          perInC={0,0,0,0,1},
          timDelA={0,0,0,0,0},
          timDelB={0,0,0,0,0},
          timDelC={0,0,0,0,0},
          T_Initial={318.15,318.15,318.15,318.15,318.15},
          TStatHeight=4,
          RecircOutSeg=4)
                 annotation (Placement(transformation(extent={{24,-64},{130,18}})));

        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={70,-108})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={32,-102})));
        Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-102})));
        Modelica.Blocks.Sources.Constant QDotBurner(k=12000) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-132})));
        Modelica.Blocks.Sources.Constant QDotPilot(k=158) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={80,-82})));
        Modelica.Blocks.Sources.Constant mFloRecirc(k=0)
          annotation (Placement(transformation(extent={{-18,-48},{2,-28}})));
        Modelica.Blocks.Sources.Constant TInRecirc(k=273.105 + 20)
          annotation (Placement(transformation(extent={{-18,-78},{2,-58}})));
        Modelica.Blocks.Tables.CombiTable1Ds DrawFlow[nSeg](
          tableOnFile=true,
          tableName="Inputs",
          fileName="/home/peter/WaterHeaterModeling/modeling/branches/pgrant/PlainStorageWaterHeater/27 - Simplified Model/WaterFromTest16.txt")
          annotation (Placement(transformation(extent={{2,22},{22,42}})));
        Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=time)
          annotation (Placement(transformation(extent={{-28,22},{-8,42}})));
        inner Modelica.Fluid.System system
          annotation (Placement(transformation(extent={{-14,-142},{6,-122}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=time)
          annotation (Placement(transformation(extent={{-130,94},{-110,114}})));
        Modelica.Blocks.Tables.CombiTable1Ds TIn(
          tableOnFile=true,
          tableName="Inputs",
          fileName="/home/peter/WaterHeaterModeling/modeling/branches/pgrant/PlainStorageWaterHeater/27 - Simplified Model/InletFromTest16.txt")
          annotation (Placement(transformation(extent={{-76,122},{-56,142}})));
        Modelica.Blocks.Tables.CombiTable1Ds TAmb(
          tableOnFile=true,
          tableName="Inputs",
          fileName="/home/peter/WaterHeaterModeling/modeling/branches/pgrant/PlainStorageWaterHeater/27 - Simplified Model/AmbientFromTest16.txt")
          annotation (Placement(transformation(extent={{-76,94},{-56,114}})));
        Modelica.Blocks.Tables.CombiTable1Ds ValidationData(
          tableOnFile=true,
          tableName="Data",
          columns=2:12,
          fileName="/home/peter/WaterHeaterModeling/modeling/branches/pgrant/PlainStorageWaterHeater/27 - Simplified Model/ValidationDataFromTest16.txt")
          annotation (Placement(transformation(extent={{-76,68},{-56,88}})));
        Modelica.Blocks.Sources.Constant EffTan(k=0.75)
          annotation (Placement(transformation(extent={{-62,-30},{-42,-10}})));
      equation
        connect(product.y, add.u1) annotation (Line(
            points={{59,-108},{44,-108}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y, product.u2) annotation (Line(
            points={{109,-102},{82,-102}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.u, tan.TStatSig) annotation (Line(
            points={{132,-102},{144,-102},{144,-48.4},{132.6,-48.4}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(QDotBurner.y, product.u1) annotation (Line(
            points={{109,-132},{96,-132},{96,-114},{82,-114}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotPilot.y, add.u2) annotation (Line(
            points={{69,-82},{54,-82},{54,-96},{44,-96}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, tan.QDotIn) annotation (Line(
            points={{21,-102},{-24,-102},{-24,8},{20.2,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRecirc.y, tan.mFloRec) annotation (Line(
            points={{3,-38},{8,-38},{8,-34},{21.8,-34}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRecirc.y, tan.TInRec) annotation (Line(
            points={{3,-68},{10,-68},{10,-47.2},{21.6,-47.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.m_flow_in, DrawFlow.y[1]) annotation (Line(
            points={{51.8,18.4},{36,18.4},{36,32},{23,32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, DrawFlow.u) annotation (Line(
            points={{-7,32},{0,32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, TAmb.u) annotation (Line(
            points={{-109,104},{-78,104}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, TIn.u) annotation (Line(
            points={{-109,104},{-92,104},{-92,132},{-78,132}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, ValidationData.u) annotation (Line(
            points={{-109,104},{-92,104},{-92,78},{-78,78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TIn.y[1], tan.TIn) annotation (Line(
            points={{-55,132},{86,132},{86,20.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb.y[1], tan.TAmb) annotation (Line(
            points={{-55,104},{-40,104},{-40,-6.1},{19.9,-6.1}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(EffTan.y, tan.EffTan) annotation (Line(
            points={{-41,-20},{22,-20}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-150,
                  -150},{150,150}}),
                            graphics), Icon(coordinateSystem(preserveAspectRatio=true,
                extent={{-150,-150},{150,150}})));
      end SimplifiedStorageTankExampleValidation;

      model SimplifiedStorageWithFan
        extends Modelica.Icons.Example;

        parameter Integer nSeg = 8;
        SimplifiedStorageTank tan(nSeg=nSeg,
          RecircOutSeg=7,
          RecircInSeg=2,
          Deadband=12,
          UA=30,
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          T_Initial={293.15,293.15,293.15,293.15,293.15,293.15,293.15,293.15},
          perInA={0,0,0,0,0,0,0,0},
          perInB={0,0,0,0,0,0,0,0},
          perInC={0,0,0,0,0,0,0,1},
          timDelA={0,0,0,0,0,0,0,0},
          timDelB={0,0,0,0,0,0,0,0},
          timDelC={0,0,0,0,0,0,0,0})
          annotation (Placement(transformation(extent={{-46,-18},{60,64}})));
        Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={46,-98})));
        Modelica.Blocks.Sources.Constant QDotBurner(k=12000) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={46,-66})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-4,-72})));
        Modelica.Blocks.Sources.Constant QDotPilot(k=158) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={6,-46})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-42,-66})));
        Modelica.Blocks.Sources.Constant mFloRecirc(k=0)
          annotation (Placement(transformation(extent={{-92,4},{-72,24}})));
        Modelica.Blocks.Sources.Constant TInRecirc(k=273.105 + 20)
          annotation (Placement(transformation(extent={{-92,-28},{-72,-8}})));
        BaseClasses.QEle qEle annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-4,-120})));
        Modelica.Blocks.Sources.Ramp ramp[nSeg](
          duration=100,
          height=0.006,
          offset=0.006)
          annotation (Placement(transformation(extent={{-60,92},{-40,112}})));
        Modelica.Blocks.Sources.Constant const(k=273.15 + 15)
          annotation (Placement(transformation(extent={{-60,136},{-40,156}})));
        Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
          annotation (Placement(transformation(extent={{-94,32},{-78,48}})));
        Modelica.Blocks.Sources.Constant EffTan(k=0.75)
          annotation (Placement(transformation(extent={{-164,16},{-144,36}})));
      equation
        connect(QDotBurner.y,product. u1) annotation (Line(
            points={{35,-66},{8,-66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,product. u2) annotation (Line(
            points={{35,-98},{22,-98},{22,-78},{8,-78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotPilot.y,add. u2) annotation (Line(
            points={{-5,-46},{-20,-46},{-20,-60},{-30,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y,add. u1) annotation (Line(
            points={{-15,-72},{-30,-72}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.TStatSig, integerToReal.u) annotation (Line(
            points={{62.6,-2.4},{80,-2.4},{80,-98},{58,-98}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(add.y, tan.QDotIn) annotation (Line(
            points={{-53,-66},{-108,-66},{-108,54},{-49.8,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRecirc.y, tan.mFloRec) annotation (Line(
            points={{-71,14},{-60,14},{-60,12},{-48.2,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRecirc.y, tan.TInRec) annotation (Line(
            points={{-71,-18},{-66,-18},{-66,-1.2},{-48.4,-1.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y, qEle.BurnerStatus) annotation (Line(
            points={{35,-98},{22,-98},{22,-120},{8,-120}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ramp.y, tan.m_flow_in) annotation (Line(
            points={{-39,102},{-18.2,102},{-18.2,64.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const.y, tan.TIn) annotation (Line(
            points={{-39,146},{16,146},{16,66.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb.y, tan.TAmb) annotation (Line(
            points={{-77.2,40},{-63.65,40},{-63.65,39.9},{-50.1,39.9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(EffTan.y, tan.EffTan) annotation (Line(
            points={{-143,26},{-48,26}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -200},{200,200}}),        graphics), Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-200,-200},{200,200}})));
      end SimplifiedStorageWithFan;

      model SimplifiedStorageTankMediumModel
        import WaterHeatingLibrary;
        extends Modelica.Icons.Example;
        WaterHeatingLibrary.NonCondensingTank.SimplifiedStorageTankMediumModel
          tan(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          nSeg=4,
          TStatHeight=1,
          RecircOutSeg=1,
          RecircInSeg=4,
          Deadband=12,
          UA=3.5,
          T_Initial={333.15,333.15,333.15,333.15},
          perInA={0,0,0,0},
          perInB={0,0,0,0},
          perInC={0,0,0,1},
          timDelA={0,0,0,0},
          timDelB={0,0,0,0},
          timDelC={0,0,0,0})
          annotation (Placement(transformation(extent={{2,60},{58,104}})));
        Buildings.Fluid.Sources.Boundary_pT      boundary(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          p=150000,
          T=288.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-50,122},{-30,142}})));
        Buildings.Fluid.Sources.Boundary_pT boundary1(          redeclare
            package Medium = Buildings.Media.ConstantPropertyLiquidWater,
          p=101325,
          nPorts=1)
          annotation (Placement(transformation(extent={{96,120},{76,140}})));
        Modelica.Blocks.Math.Product product annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={30,-54})));
        Modelica.Blocks.Math.Add add annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-8,-48})));
        Modelica.Blocks.Math.IntegerToReal integerToReal annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={80,-48})));
        Modelica.Blocks.Sources.Constant QDotBurner(k=12000) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={80,-78})));
        Modelica.Blocks.Sources.Constant QDotPilot(k=158) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,-28})));
        Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
          annotation (Placement(transformation(extent={{-88,72},{-68,92}})));
        Modelica.Blocks.Sources.Constant mFloRecirc(k=0)
          annotation (Placement(transformation(extent={{-88,10},{-68,30}})));
        Modelica.Blocks.Sources.Constant TInRecirc(k=273.15 + 60)
          annotation (Placement(transformation(extent={{-88,-22},{-68,-2}})));
        Modelica.Blocks.Sources.Constant effTan(k=0.75)
          annotation (Placement(transformation(extent={{-88,40},{-68,60}})));
        Buildings.Fluid.FixedResistances.FixedResistanceDpM res(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          m_flow_nominal=0.06,
          dp_nominal=10000)
          annotation (Placement(transformation(extent={{-20,122},{0,142}})));
        Buildings.Fluid.FixedResistances.FixedResistanceDpM res1(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          m_flow_nominal=0.063,
          dp_nominal=10000)
          annotation (Placement(transformation(extent={{44,120},{64,140}})));
      equation
        connect(product.y,add. u1) annotation (Line(
            points={{19,-54},{4,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerToReal.y,product. u2) annotation (Line(
            points={{69,-48},{42,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBurner.y,product. u1) annotation (Line(
            points={{69,-78},{56,-78},{56,-60},{42,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotPilot.y,add. u2) annotation (Line(
            points={{29,-28},{14,-28},{14,-42},{4,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tan.TStatSig, integerToReal.u) annotation (Line(
            points={{49.6,70.12},{108,70.12},{108,-48},{92,-48}},
            color={255,127,0},
            smooth=Smooth.None));
        connect(add.y, tan.QDotIn) annotation (Line(
            points={{-19,-48},{-94,-48},{-94,100.92},{10.4,100.92}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb.y, tan.TAmb) annotation (Line(
            points={{-67,82},{-60,82},{-60,92.78},{10.68,92.78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(effTan.y, tan.EffTan) annotation (Line(
            points={{-67,50},{-52,50},{-52,86.62},{10.68,86.62}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloRecirc.y, tan.mFloRec) annotation (Line(
            points={{-67,20},{-46,20},{-46,78.26},{10.68,78.26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TInRecirc.y, tan.TInRec) annotation (Line(
            points={{-67,-12},{-38,-12},{-38,69.46},{10.68,69.46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary.ports[1], res.port_a) annotation (Line(
            points={{-30,132},{-20,132}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(res.port_b, tan.port_a) annotation (Line(
            points={{0,132},{24.4,132},{24.4,104.88}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(res1.port_a, tan.port_b) annotation (Line(
            points={{44,130},{38.4,130},{38.4,104.88}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(res1.port_b, boundary1.ports[1]) annotation (Line(
            points={{64,130},{76,130}},
            color={0,127,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{150,150}}),        graphics), Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{150,150}})));
      end SimplifiedStorageTankMediumModel;
    end Examples;

    package BaseClasses
      model buo "flue gas flow rate times capacity"
        import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Real c_w=1 "standard correlation for natural convection";
        parameter Real A=1 "area surface";
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Medium in the component" annotation (choicesAllMatching=true);
        WaterHeaterLib.BaseClasses.SISO
                    Q_Wx annotation (Placement(transformation(
              extent={{13,-13},{-13,13}},
              rotation=0,
              origin={33,25})));
        Modelica.Blocks.Math.Gain gain1(k=-1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={72,60})));
        WaterHeaterLib.BaseClasses.TH
            t_H(A=A, c_w=c_w)
          "Calculates the temperature of water flow caused by buoyancy"
          annotation (Placement(transformation(extent={{0,-8},{-36,28}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor T_vol_nSeg
          "Temperature of the water"
          annotation (Placement(transformation(extent={{88,16},{66,-6}})));
        WaterHeaterLib.BaseClasses.mFlowBuo   m_flow_buo_x(
          A=A,
          c_w=c_w,
          redeclare package Medium = Medium)
          "Calculates the rate of mass flow caused by buoyancy"
          annotation (Placement(transformation(extent={{-58,-76},{-90,-44}})));
        Modelica.Blocks.Interfaces.RealInput h annotation (Placement(
              transformation(extent={{138,-92},{98,-52}}), iconTransformation(
                extent={{138,-92},{98,-52}})));
        Modelica.Blocks.Interfaces.RealOutput t_h annotation (Placement(
              transformation(extent={{-100,0},{-120,20}}), iconTransformation(
                extent={{-100,-10},{-120,10}})));
        Modelica.Blocks.Interfaces.RealOutput m_flow_buo annotation (Placement(
              transformation(extent={{-100,-70},{-120,-50}}), iconTransformation(
                extent={{-100,-70},{-120,-50}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow
          annotation (Placement(transformation(extent={{140,40},{100,80}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a T_vol
          "Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition"
          annotation (Placement(transformation(extent={{92,-10},{122,20}},
                rotation=0), iconTransformation(extent={{102,-24},{142,16}})));
        Modelica.Blocks.Interfaces.RealOutput Q_W annotation (Placement(
              transformation(extent={{-100,50},{-120,70}}),iconTransformation(
                extent={{-100,58},{-120,78}})));
      equation
        connect(T_vol_nSeg.T, t_H.T) annotation (Line(
            points={{66,5},{18,5},{18,13.6},{3.6,13.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Q_Wx.y, t_H.Q_flow) annotation (Line(
            points={{18.7,25},{13.35,25},{13.35,24.4},{3.6,24.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(h, t_H.h) annotation (Line(
            points={{118,-72},{54,-72},{54,-0.8},{3.6,-0.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(t_H.y, t_h) annotation (Line(
            points={{-37.8,10},{-110,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Q_flow, gain1.u) annotation (Line(
            points={{120,60},{84,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_vol_nSeg.port, T_vol) annotation (Line(
            points={{88,5},{107,5}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(Q_Wx.y, Q_W) annotation (Line(
            points={{18.7,25},{13.35,25},{13.35,60},{-110,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_buo, m_flow_buo_x.y) annotation (Line(
            points={{-110,-60},{-91.6,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain1.y, Q_Wx.u) annotation (Line(
            points={{61,60},{56,60},{56,25},{48.6,25}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Q_Wx.y, m_flow_buo_x.QDotFlu) annotation (Line(
            points={{18.7,25},{14,25},{14,-60},{-54.8,-60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_vol_nSeg.T, m_flow_buo_x.TWat) annotation (Line(
            points={{66,5},{46,5},{46,6},{20,6},{20,-72.8},{-54.8,-72.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(t_H.y, m_flow_buo_x.T_H) annotation (Line(
            points={{-37.8,10},{-46,10},{-46,-47.2},{-54.8,-47.2}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Icon(graphics));
      end buo;

      model cdotG "flue gas flow rate times capacity"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput T_AD(start=303.15)
          annotation (Placement(transformation(extent={{-142,-20},{-102,20}})));
        Modelica.Blocks.Math.Add add(k2=-1)
          annotation (Placement(transformation(extent={{-36,-24},{-16,-4}})));
        Modelica.Blocks.Interfaces.RealInput QIn(start=1000) annotation (
            Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-120})));
        Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-60,-120})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{14,-22},{34,-2}})));
        Modelica.Blocks.Math.Add add1(k2=1)
          annotation (Placement(transformation(extent={{68,-48},{88,-28}})));
        Modelica.Blocks.Sources.Constant guard(k=1e-6)
          annotation (Placement(transformation(extent={{16,-72},{36,-52}})));
      equation
        connect(T_AD, add.u1) annotation (Line(
            points={{-122,0},{-84,0},{-84,-8},{-38,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul, add.u2) annotation (Line(
            points={{-60,-120},{-60,-20},{-38,-20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, division.u2) annotation (Line(
            points={{-15,-14},{2,-14},{2,-18},{12,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QIn, division.u1) annotation (Line(
            points={{0,-120},{0,-6},{12,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(division.y, add1.u1) annotation (Line(
            points={{35,-12},{58,-12},{58,-32},{66,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(guard.y, add1.u2) annotation (Line(
            points={{37,-62},{64,-62},{64,-44},{66,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add1.y, y) annotation (Line(
            points={{89,-38},{90,-38},{90,0},{110,0}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end cdotG;

      model hCB "Convective heat transfer coefficient"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        import Modelica.Constants;
        parameter Modelica.SIunits.SpecificHeatCapacity cp_G=4186*0.28
          "mean specific heat of flue gas";
        parameter Modelica.SIunits.Length DT=1 "diameter of the tank";
        parameter Modelica.SIunits.Length DF=0.5 "diameter of the flue";
        parameter Modelica.SIunits.Length DM=0.5*(DT + DF);
        parameter Modelica.SIunits.Length Xn=0.5*(DT - DF);
        parameter Modelica.SIunits.Angle alphaF=6*Constants.pi/180
          "flame spreading angle = 6 degree see page 15 heater manual";
        parameter Modelica.SIunits.DynamicViscosity muF_G=0.120*4.133789E-4;
        parameter Modelica.SIunits.ThermalConductivity k_g=0.045*1.7307
          "flue gas thermal conductivity";
        Modelica.SIunits.MassFlowRate mdot_G;
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput C_dotG
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      algorithm
        mdot_G := C_dotG/cp_G;
      equation
        y = k_g*0.51*(((mdot_G/(Constants.pi*DM*2*Modelica.Math.tan(alphaF/2)))*
          Xn/muF_G)^(0.62))/Xn;
        annotation (Diagram(graphics));
      end hCB;

      block hRB "Single Input Single Output continuous control block"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Modelica.Constants;
        Modelica.Blocks.Interfaces.RealInput T_AD "flame temperature" annotation (
           Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-120})));
        Modelica.Blocks.Interfaces.RealOutput y
          "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}},
                rotation=0)));
        parameter Real absIR_tan=0.9 "emissivity of tank bottom";
        parameter Real absIR_flame=0.9 "emissivity of flame";
        Modelica.Blocks.Interfaces.RealInput T_WL "tank temperature at bottom"
          annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=-90,
              origin={0,120})));
      equation
        y = ((T_AD^3*absIR_flame*(1 + absIR_tan)*0.5)*Modelica.Constants.sigma)*(
          1 + T_WL/T_AD) annotation (Documentation(info="<html>
<p>
Block has one continuous Real input and one continuous Real output signal.
</p>
</html>"));
        annotation (Diagram(graphics));
      end hRB;

      model InteriorWH
        "Model for a interior (room-side) convective heat transfer for water heater modelling"
        extends Buildings.HeatTransfer.Convection.BaseClasses.PartialConvection;
        parameter Buildings.HeatTransfer.Types.InteriorConvection conMod=
            Buildings.HeatTransfer.Types.InteriorConvection.Fixed
          "Convective heat transfer model" annotation (Evaluate=true);
      public
        Modelica.Blocks.Interfaces.RealInput u annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-120})));
      equation
        if (conMod == Buildings.HeatTransfer.Types.InteriorConvection.Fixed) then
          q_flow = hFixed*dT;
        else
          // Even if hCon is a step function with a step at zero,
          // the product hCon*dT is differentiable at zero with
          // a continuous first derivative
          q_flow = u*dT;
        end if;
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}),graphics),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-90,80},{-60,-80}},
                lineColor={0,0,0},
                fillColor={192,192,192},
                fillPattern=FillPattern.Backward),
              Line(points={{100,0},{100,0}}, color={0,127,255}),
              Line(points={{100,0},{100,0}}, color={0,127,255}),
              Line(points={{100,0},{100,0}}, color={0,127,255}),
              Text(
                extent={{-35,42},{-5,20}},
                lineColor={255,0,0},
                textString="Q_flow"),
              Line(points={{-60,20},{76,20}}, color={191,0,0}),
              Line(points={{-60,-20},{76,-20}}, color={191,0,0}),
              Line(points={{-34,80},{-34,-80}}, color={0,127,255}),
              Line(points={{6,80},{6,-80}}, color={0,127,255}),
              Line(points={{40,80},{40,-80}}, color={0,127,255}),
              Line(points={{76,80},{76,-80}}, color={0,127,255}),
              Line(points={{-34,-80},{-44,-60}}, color={0,127,255}),
              Line(points={{-34,-80},{-24,-60}}, color={0,127,255}),
              Line(points={{6,-80},{-4,-60}}, color={0,127,255}),
              Line(points={{6,-80},{16,-60}}, color={0,127,255}),
              Line(points={{40,-80},{30,-60}}, color={0,127,255}),
              Line(points={{40,-80},{50,-60}}, color={0,127,255}),
              Line(points={{76,-80},{66,-60}}, color={0,127,255}),
              Line(points={{76,-80},{86,-60}}, color={0,127,255}),
              Line(points={{56,-30},{76,-20}}, color={191,0,0}),
              Line(points={{56,-10},{76,-20}}, color={191,0,0}),
              Line(points={{56,10},{76,20}}, color={191,0,0}),
              Line(points={{56,30},{76,20}}, color={191,0,0})}),
          defaultComponentName="con",
          Documentation(info="<html>
This is a model for a convective heat transfer for interior, room-facing surfaces.
The parameter <code>conMod</code> determines the model that is used to compute
the heat transfer coefficient:
</p>
<p>
<ol>
<li><p>If <code>conMod=<a href=\"modelica://Buildings.HeatTransfer.Types.InteriorConvection\">
Buildings.HeatTransfer.Types.InteriorConvection.Fixed</a></code>, then
the convective heat transfer coefficient is set to the value specified by the parameter
<code>hFixed</code>.
</p>
</li>
</li>
<p>
If <code>conMod=<a href=\"modelica://Buildings.HeatTransfer.Types.InteriorConvection\">
Buildings.HeatTransfer.Types.InteriorConvection.Temperature</a></code>, then
the convective heat tranfer coefficient is a function of the temperature difference.
The convective heat flux is computed using
</p>
<ol>
<li>
for floors the function 
<a href=\"modelica://Buildings.HeatTransfer.Convection.Functions.ConvectiveHeatFlux.floor\">
Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.floor</a>
</li>
<li>
for ceilings the function
<a href=\"modelica://Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.ceiling\">
Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.ceiling</a>
</li>
<li>
for walls the function
<a href=\"modelica://Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.wall\">
Buildings.HeatTransfer.Functions.Convection.ConvectiveHeatFlux.wall</a>
</li>
</ol>
</li>
</html>",   revisions="<html>
<ul>
<li>
April 2, 2011 by Michael Wetter:<br>
Added <code>homotopy</code> operator.
</li>
<li>
March 10 2010, by Michael Wetter:<br>
First implementation.
</li>
</ul>
</html>"));
      end InteriorWH;

      model LongWaveRadiationExchange
        "Radiative heat exchange between two surfaces"
        import Buildings;
        extends Buildings.BaseClasses.BaseIcon;
        //parameter Integer n(min=1) "Number of constructions";
        parameter Modelica.SIunits.Area A "Area of exterior constructions";
        //parameter Modelica.SIunits.Emissivity absIR
        //"Infrared absorptivity of building surface";
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port "Heat port"
          annotation (Placement(transformation(extent={{94,-8},{114,12}})));
        Modelica.Blocks.Interfaces.RealInput u
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput T_In annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=-90,
              origin={0,120})));
      equation
        port.Q_flow = u*A*Modelica.Constants.sigma*(port.T^4 - T_In^4);
        annotation (
          Diagram(graphics),
          Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-60,80},{-40,-60}},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{88,-60},{-74,-74}},
                fillColor={5,135,13},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Ellipse(
                extent={{2,82},{86,36}},
                pattern=LinePattern.None,
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid,
                lineColor={0,0,0}),
              Line(
                points={{-40,16},{-30,28},{-14,28},{-6,44},{10,42},{12,46}},
                smooth=Smooth.None,
                color={255,0,0},
                thickness=0.5),
              Line(
                points={{-40,16},{-22,-4},{2,-6},{12,-30},{42,-40},{48,-58}},
                smooth=Smooth.None,
                color={255,0,0},
                thickness=0.5),
              Text(
                extent={{-128,12},{-78,-34}},
                lineColor={0,0,127},
                textString="TOut"),
              Text(
                extent={{-130,96},{-80,50}},
                lineColor={0,0,127},
                textString="TSky"),
              Text(
                extent={{86,52},{136,6}},
                lineColor={0,0,127},
                textString="QIR_flow")}),
          Documentation(info="<html>
    <p>
This model computes the infrared radiative heat flow 
between exterior building surfaces and the ambient. The ambient consists
of the sky black-body radiation and the outdoor temperature 
(which is used as an approximation to the surface temperature of
the ground and neighboring buildings).
</p>
<p>
The input u is a user calculated value describing the view factor ane emmissitivity value used in calculations for radiation between opaque objects.
</p>
</html>",   revisions="<html>
<ul>
<li>
June 4 2010, by Michael Wetter:<br>
First implementation.
</li>
</ul>
</html>"));
      end LongWaveRadiationExchange;

      model mFlowBuo "mass flow rate induced buoyancy"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Medium in the component" annotation (choicesAllMatching=true);
        parameter Real c_w=1 "standard correlation for natural convection";
        parameter Real A "area";
        // Get the specific heat capacity of MediumB.
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
                Medium.p_default,
                Medium.T_default,
                Medium.X_default));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput T_H
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput TWat
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
      algorithm
        if QDotFlu > 5 then
          y := QDotFlu / (c_p*(T_H - TWat));
        else
          y:= 0;
        end if;
        annotation (Diagram(graphics));
      end mFlowBuo;

      model SISO "single input, single output"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput u annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,0})));
      equation
        y = u;
        annotation (Diagram(graphics), Icon(graphics));
      end SISO;

      model TFlame "Calculate the adiabatic flame temperature"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        import Modelica.SIunits;
        parameter Modelica.SIunits.SpecificEnergy deltaHc_H=22000*2e3
          "fuel calorific value at higher heating value";
        parameter Real cp_G=1170 "mean specific heat capacity of flue gas";
        parameter Modelica.SIunits.StoichiometricNumber stoich=16
          "stoichchiometric air/fuel ratio";
        parameter Real EA=0.5 "excess air ratio";
        Modelica.Blocks.Sources.Constant const(k=(deltaHc_H/cp_G)/((1 + stoich)*(
              1 + EA)))
          annotation (Placement(transformation(extent={{-52,62},{-32,82}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,20},{120,40}})));
        Modelica.Blocks.Interfaces.RealInput TDryBul
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Modelica.Blocks.Interfaces.RealInput QBurner
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{62,-20},{82,0}})));
        Modelica.Blocks.Logical.Greater greater
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Modelica.Blocks.Sources.Constant const2(k=273.15)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
      equation
        connect(const.y, add.u1) annotation (Line(
            points={{-31,72},{-20,72},{-20,36},{-2,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul, add.u2) annotation (Line(
            points={{-120,60},{-62,60},{-62,24},{-2,24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QBurner, greater.u1) annotation (Line(
            points={{-120,-20},{-68,-20},{-68,-10},{-22,-10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, greater.u2) annotation (Line(
            points={{-59,-50},{-40,-50},{-40,-18},{-22,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greater.y, switch1.u2) annotation (Line(
            points={{1,-10},{60,-10}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(const2.y, switch1.u3) annotation (Line(
            points={{1,-50},{24,-50},{24,-18},{60,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, switch1.u1) annotation (Line(
            points={{21,30},{34,30},{34,-2},{60,-2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, y) annotation (Line(
            points={{21,30},{110,30}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics), Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}})));
      end TFlame;

      model TF0 "flue entrance temperature"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Real deltaHc_L=20000*2e3
          "fuel calorific value at lower heating value";
        parameter Real deltaHc_H=22000*2e3
          "fuel calorific value at higher heating value";
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput C_dot_G(start=1) annotation (
            Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={40,-120})));
        Modelica.Blocks.Interfaces.RealInput QIn annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-62,-120})));
        Modelica.Blocks.Math.Add add(k2=+1)
          annotation (Placement(transformation(extent={{-6,-14},{14,6}})));
        Modelica.Blocks.Math.Gain gain1(k=deltaHc_L/deltaHc_H)
          annotation (Placement(transformation(extent={{-44,-8},{-24,12}})));
        Modelica.Blocks.Math.Gain gain2(k=1/1.06)
          annotation (Placement(transformation(extent={{-48,-52},{-28,-32}})));
        Modelica.Blocks.Math.Add add1(k2=+1)
          annotation (Placement(transformation(extent={{66,-4},{86,16}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{28,-22},{48,-2}})));
        Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,0})));
        Modelica.Blocks.Interfaces.RealInput QLoss(start=1) annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-12,-120})));
      equation
        connect(gain1.y, add.u1) annotation (Line(
            points={{-23,2},{-8,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain2.y, division.u2) annotation (Line(
            points={{-27,-42},{22,-42},{22,-18},{26,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(division.y, add1.u2) annotation (Line(
            points={{49,-12},{50,-12},{50,0},{64,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QIn, gain1.u) annotation (Line(
            points={{-62,-120},{-62,2},{-46,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, division.u1) annotation (Line(
            points={{15,-4},{22,-4},{22,-6},{26,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add1.y, y) annotation (Line(
            points={{87,6},{94,6},{94,0},{110,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain2.u, C_dot_G) annotation (Line(
            points={{-50,-42},{-54,-42},{-54,-88},{40,-88},{40,-120}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TDryBul, add1.u1) annotation (Line(
            points={{-120,0},{-78,0},{-78,36},{30,36},{30,12},{64,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QLoss, add.u2) annotation (Line(
            points={{-12,-120},{-12,-10},{-8,-10}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Icon(graphics));
      end TF0;

      model TH "Temeprature flue stream"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Real c_w=1 "standard correlation for natural convection";
        parameter Real A "area";
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput T
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput h
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      algorithm
        y := T + c_w*Q_flow/(h*A) annotation (Diagram(graphics));
        annotation (Diagram(graphics));
      end TH;

      model THotGas "Hot gas temperature"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        Real Ntu_B;
        parameter Real A_B=1 "Area of the base of the tank";
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput T_WL
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Interfaces.RealInput T_AD
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput h_RB
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput h_CB
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput C_dotG
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      equation
        Ntu_B = ((h_RB + h_CB)*A_B)/C_dotG;
        y = (T_AD + Ntu_B*T_WL)/(1 + Ntu_B);
        annotation (Diagram(graphics));
      end THotGas;

      model buoHeaTra
        "Calculates the heat transfer between segments in the heater caused by buoyant flow"
        import WaterHeatingLibrary;
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        parameter Integer nSeg(min=2) = 2;
        parameter Real QDotPilot;
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a TWat[nSeg]
          annotation (Placement(transformation(extent={{-116,26},{-96,46}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor WatT[nSeg]
          annotation (Placement(transformation(extent={{-96,26},{-76,46}})));
        Modelica.Blocks.Interfaces.RealOutput buoHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-6},{132,26}})));
        WaterHeatingLibrary.NonCondensingTank.BaseClasses.strLay strLay(nSeg=nSeg,
            QDotPilot=QDotPilot)
                                annotation (Placement(transformation(extent={{-66,26},
                  {-46,46}})));
        heaSum heaSum1(nSeg=nSeg)
          annotation (Placement(transformation(extent={{-36,-14},{-16,6}})));
        QIn qIn(nSeg=nSeg)
                annotation (Placement(transformation(extent={{20,-54},{40,-34}})));
        Modelica.Blocks.Interfaces.RealInput QLosTop
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      equation
        connect(TWat, WatT.port) annotation (Line(
            points={{-106,36},{-96,36}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(WatT.T, strLay.TWat) annotation (Line(
            points={{-76,36},{-68,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(strLay.strLay, heaSum1.strLay) annotation (Line(
            points={{-44.4,36},{-42,36},{-42,0},{-38,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotFlu, heaSum1.QDotFlu) annotation (Line(
            points={{-120,-20},{-80,-20},{-80,-8},{-38,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBas, heaSum1.QDotBas) annotation (Line(
            points={{-120,-100},{-60,-100},{-60,-14},{-38,-14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(strLay.strLay, qIn.strLay) annotation (Line(
            points={{-44.4,36},{0,36},{0,-38},{18,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(heaSum1.QBelStrTot, qIn.heaBelStrTot) annotation (Line(
            points={{-15,-4},{-8,-4},{-8,-42},{18,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotFlu, qIn.QDotFlu) annotation (Line(
            points={{-120,-20},{-20,-20},{-20,-50},{18,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBas, qIn.QDotBas) annotation (Line(
            points={{-120,-100},{-20,-100},{-20,-54},{18,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(qIn.QInCom, buoHeaTra) annotation (Line(
            points={{41,-44},{78,-44},{78,10},{116,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(WatT.T, qIn.TWat) annotation (Line(
            points={{-76,36},{-76,-46},{18,-46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QLosTop, heaSum1.QLosTop) annotation (Line(
            points={{-120,80},{-38,80},{-38,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QLosTop, qIn.QLosTop) annotation (Line(
            points={{-120,80},{4,80},{4,-34},{18,-34}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}),
                            graphics), Icon(coordinateSystem(preserveAspectRatio=true,
                extent={{-100,-100},{100,100}})));
      end buoHeaTra;

      model buoMas
        "Identifies mass flow rates in each segment caused by buoyancy (flows caused by both base and flue heat transfer)"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 2;
        Real m_flow_BU[nSeg];
        Real mFloInFlu[nSeg];
        Real mFloInFluSeg[nSeg];
        Real smoDel = 0.00001;
        Real deadband = 0.01;
        Modelica.Blocks.Interfaces.RealInput mFloOutBas
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
         Modelica.Blocks.Interfaces.RealInput mFloOutFlu[nSeg]
           annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput THotOutBas
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
         Modelica.Blocks.Interfaces.RealInput THotOutFlu[nSeg]
           annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealOutput mFloIn[nSeg]
          annotation (Placement(transformation(extent={{100,10},{120,30}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
      algorithm
          //  total buoyancy flow from lower zones which mixes into zone i, see Eqn 7. page 8 of water heater manual
        for i in 2:(nSeg-1) loop
            m_flow_BU[i] :=  mFloOutBas * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutBas - TWat[i] - deadband,smoDel) * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i-1] - THotOutBas,smoDel);
           for j in i:nSeg loop
               mFloInFluSeg[j] :=  mFloOutFlu[j] * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutFlu[j] - TWat[i] - deadband,smoDel) * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i-1] - THotOutFlu[j],smoDel);
           end for;
           mFloInFlu[i] :=  sum(mFloInFluSeg[i:nSeg]);
           mFloIn[i] :=  m_flow_BU[i] + mFloInFlu[i];
        end for;
        //  total buoyancy flow from lower zones which mixes into zone nSeg, see Eqn 7. page 8 of water heater manual
           m_flow_BU[1] :=mFloOutBas * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutBas - TWat[1] - deadband,smoDel);
          for j in 1:nSeg loop
              mFloInFluSeg[j] :=  mFloOutFlu[j] * Buildings.Utilities.Math.Functions.smoothHeaviside(THotOutFlu[j] - TWat[1] - deadband,smoDel);
          end for;
          mFloInFlu[1] :=  sum(mFloInFluSeg[1:nSeg]);
          mFloIn[1] :=  m_flow_BU[1] + mFloInFlu[1];
          m_flow_BU[nSeg] := mFloOutBas * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] - THotOutBas,smoDel);
          mFloInFlu[nSeg] := mFloOutFlu[nSeg] * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] - THotOutFlu[nSeg],smoDel);
          mFloIn[nSeg] := m_flow_BU[nSeg] + mFloInFlu[nSeg];
        annotation (Diagram(graphics));
      end buoMas;

      model mDCal
        "Calculate the fownward mass flow rates which balance the buoyancy flow rates (mdot_D)"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2)=2;
        Modelica.Blocks.Interfaces.RealInput mDotBas
          annotation (Placement(transformation(extent={{-140,70},{-100,110}})));
        Modelica.Blocks.Interfaces.RealInput mDotIn[nSeg]
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput mDotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-110},{-100,-70}})));
        Modelica.Blocks.Interfaces.RealOutput mDotD[nSeg]
          annotation (Placement(transformation(extent={{100,-20},{140,20}})));
      equation
      mDotD[1] = mDotIn[1] - mDotFlu[1];
      mDotD[nSeg] = 0;
      for i in 2:(nSeg-1) loop
        0 = mDotIn[i] - mDotFlu[i] + mDotD[i-1] - mDotD[i];
      end for;
        annotation (Diagram(graphics));
      end mDCal;

      model QBuo "Calculates the heat transfer rate caused by buoyancy"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
        parameter Integer nSeg(min=2)=2;
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput mDotD[nSeg]
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput dHBU[nSeg]
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealOutput buoHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-18},{136,18}})));
        Modelica.Blocks.Interfaces.RealInput QBas
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealInput QFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput mDotC[nSeg]
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      equation
        for i in 2:(nSeg - 1) loop
          buoHeaTra[i] =  dHBU[i] + c_p*mDotD[i - 1]*(TWat[i - 1] - TWat[i]) + c_p*mDotC[i]*(TWat[i - 1] - TWat[i]) - c_p*mDotC[i]*(TWat[i] - TWat[i + 1]) + QFlu[i] - c_p * mDotD[i] * (TWat[i] - TWat[i+1]);
        end for;
        // calculate total heat flux for zone 1 that will be added to port for energy balance calculation, see Eqn 10. page 8 of water heater manual
        buoHeaTra[1] =  dHBU[1] - c_p*mDotC[1]*(TWat[1] - TWat[2]) + QFlu[1] - c_p * mDotD[1] * (TWat[1] - TWat[2]);
        // calculate total heat flux for zone nSeg that will be added to port for energy balance calculation, see Eqn 10. page 8 of water heater manual
        buoHeaTra[nSeg] =  dHBU[nSeg] + c_p*mDotC[nSeg]*(TWat[nSeg-1] - TWat[nSeg]) + mDotD[nSeg-1] * c_p * (TWat[nSeg-1] - TWat[nSeg]) + QFlu[nSeg] + QBas;
        annotation (Diagram(graphics));
      end QBuo;

      model dHBU
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
          Medium.setState_pTX(
            Medium.p_default,
            Medium.T_default,
            Medium.X_default));
        parameter Integer nSeg(min=2)=2;
        Real smoDel = 0.00001;
        Real dH_BU_B[nSeg];
        Real dH_BU_F[nSeg];
        Real dH_BU_F_Seg[nSeg];
        Real deadband = 0.01;
        Modelica.Blocks.Interfaces.RealOutput dH_BU[nSeg]
          annotation (Placement(transformation(extent={{100,-2},{120,18}})));
        Modelica.Blocks.Interfaces.RealInput mDotBas
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput THotBas
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput mDotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput THotFlu[nSeg]
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
      algorithm
        dH_BU_B[1] :=mDotBas*c_p*(THotBas - TWat[1])*
          Buildings.Utilities.Math.Functions.smoothHeaviside(THotBas - TWat[1],smoDel);
          for j in 1:nSeg loop
              dH_BU_F_Seg[j] :=mDotFlu[j]*c_p*(THotFlu[j] - TWat[1])*Buildings.Utilities.Math.Functions.smoothHeaviside(THotFlu[j] - TWat[1]-deadband, smoDel);
          end for;
          dH_BU_F[1] :=sum(dH_BU_F_Seg[1:nSeg]);
          dH_BU[1] :=dH_BU_B[1] + dH_BU_F[1];
        // heat enthalpy of zone i, see Eqn 11. page 8 of water heater manual
        for i in 2:(nSeg - 1) loop
            dH_BU_B[i] :=mDotBas*c_p*(THotBas - TWat[i])*Buildings.Utilities.Math.Functions.smoothHeaviside(THotBas - TWat[i]-deadband,smoDel)*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i - 1]
             - THotBas, smoDel);
          for j in i:nSeg loop
              dH_BU_F_Seg[j] :=mDotFlu[j]*c_p*(THotFlu[j] - TWat[i])*Buildings.Utilities.Math.Functions.smoothHeaviside(THotFlu[j] - TWat[i]-deadband, smoDel)*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i - 1] - THotFlu[j], smoDel);
          end for;
          dH_BU_F[i] :=sum(dH_BU_F_Seg[i:nSeg]);
          dH_BU[i] :=dH_BU_B[i] + dH_BU_F[i];
        end for;
        // heat enthalpy of zone nSeg, see Eqn 11. page 8 of water heater manual
          dH_BU_B[nSeg] :=mDotBas*c_p*(THotBas - TWat[nSeg])*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] -THotBas, smoDel);
          dH_BU_F[nSeg] :=mDotFlu[nSeg]*c_p*(THotFlu[nSeg] - TWat[nSeg])*Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg - 1] -THotFlu[nSeg], smoDel);
          dH_BU[nSeg] :=dH_BU_B[nSeg] + dH_BU_F[nSeg];
        annotation (Diagram(graphics));
      end dHBU;

      model draHeaTra
        "Calculates the heat transfer rates caused by a hot water draw event"
        extends Modelica.Blocks.Interfaces.BlockIcon;
         replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
         Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
           Medium.setState_pTX(
             Medium.p_default,
             Medium.T_default,
             Medium.X_default));
        parameter Integer nSeg(min=2) = 8;
        Real SumBelow[nSeg];
        Real TotalFlow;
        Real small = 0.0001;
        parameter Real perInA[nSeg];
        parameter Real perInB[nSeg];
        parameter Real perInC[nSeg];
        parameter Real timDelA[nSeg];
        parameter Real timDelB[nSeg];
        parameter Real timDelC[nSeg];
        Modelica.Blocks.Interfaces.RealInput mFloIn[nSeg]
          annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
        Modelica.Blocks.Logical.Timer timer[nSeg]
          annotation (Placement(transformation(extent={{-4,-60},{16,-40}})));
        Modelica.Blocks.Logical.Greater greater[nSeg]
          annotation (Placement(transformation(extent={{-38,-60},{-18,-40}})));
        Modelica.Blocks.Sources.Constant const[nSeg](each k=0.00001)
          annotation (Placement(transformation(extent={{-74,-76},{-54,-56}})));
        timDel timDel1(
          nSeg=nSeg,
          timDelA=timDelA,
          timDelB=timDelB,
          timDelC=timDelC)
          annotation (Placement(transformation(extent={{-36,-100},{-16,-80}})));
        Modelica.Blocks.Logical.Greater greater1[nSeg]
          annotation (Placement(transformation(extent={{30,-60},{50,-40}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger[nSeg]
          annotation (Placement(transformation(extent={{60,-60},{80,-40}})));
        minFloIn minFloIn1(
          nSeg=nSeg,
          perInA=perInA,
          perInB=perInB,
          perInC=perInC)
          annotation (Placement(transformation(extent={{-68,2},{-48,22}})));
        perFloIn perFloIn1(nSeg=nSeg)
          annotation (Placement(transformation(extent={{-28,-4},{-8,16}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression[nSeg](y=
              booleanToInteger.y)
          annotation (Placement(transformation(extent={{-72,-18},{-52,2}})));
        Modelica.Blocks.Interfaces.RealOutput draHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-2},{120,18}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,52},{-100,92}})));
        Modelica.Blocks.Interfaces.RealInput TIn
          annotation (Placement(transformation(extent={{-140,12},{-100,52}})));
      equation
        TotalFlow = sum(perFloIn1.perFlo[1:nSeg]);
        for i in (1:nSeg-1) loop
          SumBelow[i] = sum(perFloIn1.perFlo[i:nSeg]) - perFloIn1.perFlo[i];
          draHeaTra[i] = (perFloIn1.perFlo[i] * mFloIn[i] * c_p * (TIn - TWat[i]) + SumBelow[i] * mFloIn[i] * c_p * (TWat[i+1] - TWat[i]))*1/(TotalFlow+small);
        end for;
        SumBelow[nSeg] = 0;
        draHeaTra[nSeg] = perFloIn1.perFlo[nSeg] * mFloIn[nSeg] * c_p * (TIn - TWat[nSeg]);
        connect(mFloIn, greater.u1) annotation (Line(
            points={{-120,-50},{-40,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greater.y, timer.u) annotation (Line(
            points={{-17,-50},{-6,-50}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(const.y, greater.u2) annotation (Line(
            points={{-53,-66},{-48,-66},{-48,-58},{-40,-58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timer.y, greater1.u1) annotation (Line(
            points={{17,-50},{28,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mFloIn, timDel1.m_flow_in) annotation (Line(
            points={{-120,-50},{-84,-50},{-84,-82},{-38,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timDel1.y, greater1.u2) annotation (Line(
            points={{-15,-88},{20,-88},{20,-58},{28,-58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greater1.y, booleanToInteger.u) annotation (Line(
            points={{51,-50},{58,-50}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(mFloIn, minFloIn1.m_flow_in) annotation (Line(
            points={{-120,-50},{-84,-50},{-84,20},{-70,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(minFloIn1.y, perFloIn1.minFloIn) annotation (Line(
            points={{-47,14},{-30,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integerExpression.y, perFloIn1.Active) annotation (Line(
            points={{-51,-8},{-40,-8},{-40,2},{-30,2}},
            color={255,127,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end draHeaTra;

      package Burner
        model Gas "model of a gas burner for water heater"
          import SI = Modelica.SIunits;
          import Modelica.Constants;
          import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
          import Modelica.Fluid.Types;
          import Modelica.Fluid.Types.Dynamics;
          import Modelica.Constants;
          parameter Modelica.SIunits.Length DTan=1 "diameter of the tank";
          parameter Modelica.SIunits.Length DFlu=0.5 "diameter of the flue";
          parameter Buildings.HeatTransfer.Types.InteriorConvection conMod=
              Buildings.HeatTransfer.Types.InteriorConvection.Temperature
            "Convective heat transfer model for opaque constructions"
            annotation (Dialog(group="Convective heat transfer"));
          parameter Modelica.SIunits.CoefficientOfHeatTransfer hFixed=3.0
            "Constant convection coefficient for opaque constructions"
            annotation (Dialog(group="Convective heat transfer", enable=(conMod
                   == Buildings.HeatTransfer.Types.InteriorConvection.Fixed)));
          parameter Real h_GB=3
            "Convection coefficient between the hot gas and the base of the tank";
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorBot
            "Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition"
            annotation (Placement(transformation(extent={{-14,-382},{14,-354}},
                  rotation=0), iconTransformation(extent={{16,-304},{56,-264}})));
        public
          parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnvBot(
            each A=0,
            redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
            each til=0,
            each azi=0) "Data for exterior construction" annotation (Placement(
                transformation(extent={{404,170},{442,208}})), HideResult=true);
          parameter Modelica.SIunits.SpecificEnergy deltaHc_H=10000
            "Fuel calorific value (higher heating value) in J/kg";
          parameter Modelica.SIunits.SpecificEnergy deltaHc_L=10
            "Fuel calorific value (lower heating value) in J/kg";
          parameter Real absIR_FS=0.4 "Absorptivity of floor shield -- fixme";
          parameter Real absIR_Fla=0.07 "Absorptivity of flame -- fixme";
          parameter Real fv=0.2 "view factor between flame and shield";
          parameter Real vfb=0.5 "view factor between the flame and the base";
          //parameter Real h_CB=10
          //  "Convective heat transfer coefficient between hot gas and tank bottom (see page 13) --fixme";
          parameter Modelica.SIunits.StoichiometricNumber stoich=16.20
            "stoichometric air fule ratio";
          parameter Real EA=0.5 "excess air fraction";
          parameter Modelica.SIunits.SpecificHeatCapacity cp_G=4186*0.28
            "mean specific heat of flue gas";
          WaterHeaterLib.BaseClasses.TFlame     T_AD_flame(
            deltaHc_H=deltaHc_H,
            stoich=stoich,
            EA=EA,
            cp_G=cp_G) annotation (Placement(transformation(
                extent={{-15,-15},{15,15}},
                rotation=0,
                origin={-105,-79})));
          WaterHeaterLib.BaseClasses.InteriorWH heaGasBas(
            each hFixed=hFixed,
            final til=datTanEnvBot.til,
            final A=datTanEnvBot.A,
            each conMod=Buildings.HeatTransfer.Types.InteriorConvection.Temperature)
            "Heat transfer between the gas and the base of the tank"
                                       annotation (Placement(transformation(
                extent={{-14,14},{14,-14}},
                rotation=90,
                origin={0,90})));
          Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature
            hotGasTemperature1 annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={0,44})));
          WaterHeaterLib.BaseClasses.hRB  h_RB annotation (Placement(
                transformation(
                extent={{16,-16},{-16,16}},
                rotation=270,
                origin={48,-116})));
          Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor TtanBot
            "tank bottom temperature"
            annotation (Placement(transformation(extent={{-48,-60},{-32,-44}})));
          WaterHeaterLib.BaseClasses.LongWaveRadiationExchange radGasFlr(A=
                datTanEnvBot.A)
            "Radiative heat transfer between the gas in the burner and the floor"
                                                   annotation (Placement(
                transformation(
                extent={{17,-16},{-17,16}},
                rotation=90,
                origin={0,-277})));
          Modelica.Blocks.Sources.RealExpression realExpression5(y=1/(2/
                datTanEnv.layers.absIR_b + (1/absIR_FS)*(1/(absIR_Fla*fv) + 1)
                 - 1)) annotation (Placement(transformation(extent={{158,-246},{
                    104,-216}})));
          WaterHeaterLib.BaseClasses.THotGas  hotGasTemp(A_B=datTanEnvBot.A)
            annotation (Placement(transformation(
                extent={{16,-16},{-16,16}},
                rotation=270,
                origin={0,-2})));
          WaterHeaterLib.BaseClasses.TF0  T_F0(final deltaHc_H=deltaHc_H, final
              deltaHc_L=deltaHc_L)
            annotation (Placement(transformation(extent={{344,4},{376,36}})));
          Modelica.Blocks.Interfaces.RealInput QBurner annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={100,-378}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={216,-282})));
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{268,6},{290,28}})));
          WaterHeaterLib.BaseClasses.hCB  h_CB(DT=DTan, DF=DFlu) annotation (
              Placement(transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={0,-116})));
          Modelica.Blocks.Interfaces.RealInput TDryBul annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-100,-376}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=90,
                origin={-122,-284})));
          Modelica.Blocks.Sources.RealExpression fsRadiationExchange4_Q_flow(y=
                radGasFlr.port.Q_flow)
            annotation (Placement(transformation(extent={{174,-20},{232,18}})));
          WaterHeaterLib.BaseClasses.cdotG  cdot_G annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={106,-114})));
          Modelica.Blocks.Sources.RealExpression heaCoef(y=h_GB)
            "heat transfer hot gas to tank base --fixme"
            annotation (Placement(transformation(extent={{-152,72},{-88,108}})));
          Modelica.Blocks.Interfaces.RealInput Q_B "heat flow rate of the base"
            annotation (Placement(transformation(
                extent={{20,-20},{-20,20}},
                rotation=90,
                origin={176,238}), iconTransformation(
                extent={{20,-20},{-20,20}},
                rotation=90,
                origin={8,142})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heaPorTop
            "Heat port top of burner" annotation (Placement(transformation(extent=
                   {{-14,212},{14,240}}, rotation=0), iconTransformation(extent={
                    {-160,120},{-120,160}})));
          parameter Buildings.Rooms.BaseClasses.ParameterConstruction datTanEnv(
            each A=0,
            redeclare Buildings.HeatTransfer.Data.OpaqueConstructions.Brick120 layers,
            each til=0,
            each azi=0) "Data for exterior construction" annotation (Placement(
                transformation(extent={{406,106},{446,146}})),HideResult=true);
          Modelica.Blocks.Interfaces.RealOutput T_F0_y annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={274,236}), iconTransformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={134,140})));
          Modelica.Blocks.Interfaces.RealOutput cdot_G_y annotation (Placement(
                transformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={332,236}), iconTransformation(
                extent={{-16,-16},{16,16}},
                rotation=90,
                origin={258,136})));
        equation
          connect(hotGasTemperature1.port, heaGasBas.solid)   annotation (Line(
              points={{1.83697e-015,54},{1.83697e-015,76},{9.19104e-016,76}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(hotGasTemp.y, hotGasTemperature1.T) annotation (Line(
              points={{3.23307e-015,15.6},{3.23307e-015,28},{-2.20436e-015,28},{
                  -2.20436e-015,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TtanBot.T, hotGasTemp.T_WL) annotation (Line(
              points={{-32,-52},{-12.8,-52},{-12.8,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hotGasTemp.T_AD, T_AD_flame.y) annotation (Line(
              points={{-6.4,-21.2},{-6.4,-74.5},{-88.5,-74.5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_CB.y, hotGasTemp.h_CB) annotation (Line(
              points={{1.07769e-015,-98.4},{1.07769e-015,-66.2},{-3.52698e-015,
                  -66.2},{-3.52698e-015,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_RB.y, hotGasTemp.h_RB) annotation (Line(
              points={{48,-98.4},{48,-80},{6.4,-80},{6.4,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cdot_G.y, hotGasTemp.C_dotG) annotation (Line(
              points={{106,-96.4},{106,-70},{12.8,-70},{12.8,-21.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_CB.C_dotG, cdot_G.y) annotation (Line(
              points={{-1.17566e-015,-135.2},{-1.17566e-015,-150},{162,-150},{162,
                  -70},{106,-70},{106,-96.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heaCoef.y, heaGasBas.u)   annotation (Line(
              points={{-84.8,90},{-16.8,90}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_AD_flame.y, cdot_G.T_AD) annotation (Line(
              points={{-88.5,-74.5},{-74,-74.5},{-74,-176},{106,-176},{106,-133.52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(radGasFlr.u, realExpression5.y)            annotation (Line(
              points={{1.24914e-015,-256.6},{1.24914e-015,-232},{101.3,-232},{
                  101.3,-231}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(radGasFlr.port, heaPorBot)            annotation (Line(
              points={{-0.32,-294.68},{-0.32,-326.26},{1.77636e-015,-326.26},{
                  1.77636e-015,-368}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(heaPorBot, heaPorBot) annotation (Line(
              points={{1.77636e-015,-368},{1,-369},{0,-370},{1.77636e-015,-368}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(T_AD_flame.y, radGasFlr.T_In)            annotation (Line(
              points={{-88.5,-74.5},{-74,-74.5},{-74,-277},{-19.2,-277}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TDryBul, T_AD_flame.TDryBul) annotation (Line(
              points={{-100,-376},{-100,-316},{-142,-316},{-142,-70},{-123,-70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner, T_AD_flame.QBurner) annotation (Line(
              points={{100,-378},{100,-340},{-156,-340},{-156,-82},{-123,-82}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TDryBul, cdot_G.TDryBul) annotation (Line(
              points={{-100,-376},{-100,-314},{194,-314},{194,-123.6},{125.2,-123.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner, cdot_G.QIn) annotation (Line(
              points={{100,-378},{100,-338},{242,-338},{242,-114},{125.2,-114}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(fsRadiationExchange4_Q_flow.y, add.u2) annotation (Line(
              points={{234.9,-1},{246,-1},{246,10.4},{265.8,10.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TDryBul, T_F0.TDryBul) annotation (Line(
              points={{-100,-376},{-100,-314},{322,-314},{322,20},{340.8,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Q_B, add.u1) annotation (Line(
              points={{176,238},{176,23.6},{265.8,23.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heaGasBas.fluid, heaPorTop)   annotation (Line(
              points={{2.63361e-015,104},{2.63361e-015,163},{1.77636e-015,163},{
                  1.77636e-015,226}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(TtanBot.port, heaPorTop) annotation (Line(
              points={{-48,-52},{-62,-52},{-62,200},{1.77636e-015,200},{
                  1.77636e-015,226}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(T_F0.y, T_F0_y) annotation (Line(
              points={{377.6,20},{402,20},{402,78},{274,78},{274,236}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cdot_G.y, cdot_G_y) annotation (Line(
              points={{106,-96.4},{106,102},{332,102},{332,236}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner, T_F0.QIn) annotation (Line(
              points={{100,-378},{100,-294},{350,-294},{350,0.8},{350.08,0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, T_F0.QLoss) annotation (Line(
              points={{291.1,17},{304,17},{304,-20},{358.08,-20},{358.08,0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cdot_G.y, T_F0.C_dot_G) annotation (Line(
              points={{106,-96.4},{106,-66},{366,-66},{366,0.8},{366.4,0.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_RB.T_WL, TtanBot.T) annotation (Line(
              points={{67.2,-116},{74,-116},{74,-162},{-32,-162},{-32,-52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_AD_flame.y, h_RB.T_AD) annotation (Line(
              points={{-88.5,-74.5},{-58,-74.5},{-58,-194},{20,-194},{20,-116},{
                  28.8,-116}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-340,-360},
                    {460,220}}), graphics),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-340,-360},{
                    460,220}}), graphics={Bitmap(
                  extent={{-270,150},{364,-272}},
                  imageSource=
                      "/9j/4AAQSkZJRgABAQEAlgCWAAD/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCABaAJMDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDe8W+I9Z0/Upo7O+kiRZXUAKpwAgI6j1NdtodzLdaFZXE8heWSFWdjjk4rzTx6hTX7gZYbiXwT/sgf0ru/D2mQvoGnuZJuYFJUSHHSqno0bVIpNG75qqMs4AHUk1xtn4iunuL5ZdRUqlyyx5K8L2HSup/suyJ5hB7ck1w2n2dqbnUN1vHiO8cLx05rN3JSibkes3Uudl2Wx14HH6U/+1L7/n4b8h/hWTe6lY6bCZbiZEUEA45PPTOKh07Wo9SuXijt5lVRlZSPlb2z61dna4pRtqtjc/tS9/5+G/If4Uf2pe/8/DfkP8KZ5EcUJlnkCqBk1XjudPmRzHdg+X1yMYrOLlJtRi9DlliaUd5Fr+1b7/n4b8h/hR/at9/z8N+Q/wAKriWzVctJu4zhepoe701ULtKwAIHr1rSUKkVflMljqDe5YOq33/Pw35D/AAo/tS//AOfhvyH+FUZtT02xj3XUjDecKNvJpkGs6NctthnYt6EY4qnSrKPMoOwfXaP8xo/2rff8/DfkP8KX+1L7/n4b8h/hWc2r6RHIFkmkAYZHynio01nSrm4NvBcbZcZCuMBvoaXJVtdxZcMXSnLli9TV/tS+/wCfhvyH+FB1S+/5+G/If4VUBBGQcjHUUc+tTodWpYfUb5wMXciY6kAc/pXLeKvEWv6QbMQavNiZmz8iDp+FdD+Fcd8QOG03/eesqukGzWjL31oekeDL661LwpZXd5MZp5PM3OQMnDsB09gKKr/D3jwRp/8A21/9GNRTpO8I+hFT43bucp8RdQsLjU47SGRWvIA4mTHzBcAj+dS6b4ytbTSIIl1lUMMQzEbclhjtWp408LR3SvqtvDJPco2XjQDLLgA/XHWsG38TLpNgtrcaNDM0K4EzxbTgd2yK2U5ctjVVYqKT1LsPj0STHfq8ccWOCbc7s+47Vjw6lpE0dw8+uMr3ErOyCIjn1FaX/CwdHAy2h2vTJIdf8KyYtctIww/saFgzs3TsTnHSlzvoUq/K7pWM620+3a8Bhm+3STNtSDP3fRzXc2k0lpp0dteRxxsTnfGMKD6cVzsfiS3hbdHpEaN/eXg/nipG8W7l2tp2VPUFjz+lUqklBxepz1rVqqm9LdDY8QXF4NJZrOEzSKQNg/iB61zFvc6mkgeTQ7o7mG8gHt/Orsfix4UwbRn5wuWOQPfinnxg+c/Ym/77PP6VUMRUirJnJPA0W7tDLm+uTcXLw6NdsSVaJipGfU+1VW1u8sIzcz6FJEiNu3vkAN/9erv/AAmMn/Pix/4Gf8Kq6nr51SzNrJaeWrMCWJJHB9MVXt6ltWQsFQ/lKlzrc3iNd9tpDyCM4ZocnBx3pbdr2D5h4euGcHhjnj8K2/Cpj23vkrtTevRSueK38t/eNUsXVUeRS0H9Sw/8pxRub+S9Wd/D1wecMOTkVraFZpJcz3UtjLbeW5EMcw7Hr9a38t/eNIeRyc0niaslZsccHQjLmSIPsUaEvEzRO3dTx+VJm6iIwFmTuejVY7Yorlt2O5VO+pALyED94TEf+mgxXK/EDn+zGHTc3PrXYOqyDDqGHoRmuM8eRJC+nmMbQzNlewPtWdb+GzWjyuaWx6H8Pv8AkSNP/wC2n/oxqKPh9/yJGn/9tP8A0Y1FVS/hx9EZVf4kvVnQleaxfGAx4Q1T/r3atysLxsSPBmrFTg/Zm/lWii5vlXUhOzueFGPzIAmQvyjBxXSw+NdRigjiEFvhFC5x1xXAJqF0EUeceBS/2hdf89jXox4ZzBapo3eLovdHoP8AwnOpf8+9v+VH/Cc6jnH2e3/75rz7+0Lv/nsa6PwNpNz4o8RJZSyyfZo0LzspwQO3NRiMjx+HpupOSsiVXw8nZI3j441Egg29ufUY60yPxnqUWQsMOw9FI+7XcD4V+H+0l6B/12/+tR/wqzQP+et5/wB/v/rV4rhXf2jZVKK6HFf8JxqXa3t/++TR/wAJzqP/AD7wfka664+GGjxEPG13IgHzJ5vP1HFPh+GXhueMOk14ynv53/1qShXX2hOVHdI40+N9RP8Aywt/yNL/AMJvqH/PCD8jXbf8Kr8P4/1t5/3+/wDrUf8ACq9A/wCet7/3+/8ArVXJX/mFz0exxH/Cb6h/zwg/I0f8JxqP/PCD8jXb/wDCrPD/APz1vP8Av9/9aj/hVfh//nref9/v/rUuSv8AzBz0exxH/Ccah/zwg/I0f8JvqP8Az7wflXW6j8LdKXTpzYTXS3QjJiLy5Xd2zxXir3l7DI8TyMrxsVZSOhHBruwWXYvFtxpyVxSq0Ir4Tvf+E31H/nhB+RrM1nWbnWzB9oRE+zkldg65rkjqF3/z2NL/AGhdf89jXoy4azJq10SsVh4u9j6H+Hv/ACJGn/8AbT/0Y1FQfDGRpfh7pju25j5uT/21eivNlSlRbpS3jo/loYykpNyXU6qsLxt/yJerf9er/wAq3awvG3/Il6t/17P/ACrSh/Ej6ol7HzOv3R9KWkH3R9KWv1yD91HAL0Un0r334YeGP7B8PrcXMAS9u/ndu+zsK8m8A+HW8SeJoIGH+j25EsxIyCAen419GIqqoVV2hRgAdhXxfEWN5pLDx9WdNGPUfRRRXyRuIRWfcW0sM32mzB3L96HOFk/wNaNIRmgCva3UdwpKkhhwyt1U1ZHSqdxbPv8AOt2EcvckcN9adaXQnUow2Spw6dx7/SgbXYtUUgpaBDSK8Q+Lnhr+zdbXWLdMW98cOFGArgf1r3E1h+LfD8XiTw9c2Eg+crviPdXHSu7L8VLC4iNRbdSJxuj5oNJT5IpIHeGVdskbFXU9QQcGmV+p05qcVJdTieh9D/Cz/knOl/8Abb/0c9FHws/5J1pf/bb/ANHPRX5Vj/8Ae6v+KX5s7o/CjrawvG3/ACJerf8AXs/8q3awvG3/ACJerf8AXs/8q56P8SPqhvY+aB90fSlz7Z9BSL90fSum8BeHH8Q+J4IShNtbsJZ2B6AdP1r9SxFeOHw7qS6I4krux6r8LfDI0Xw4t5KGF1fgPIG42jsK7jFIgAGAAAOgFOr8trVZVqjqS3Z2pWVgpaKKzGFJS0lAB17VUubRZ2DoxjmTlXX+R9RVuigdynaXbO3k3ACXC9VHRvcVbBqC6gWdApJRgcq69VqGK7kScW10FWQ/6tgeHH+NAWuXqa1CsT1pSKBHhvxa8MjStbXVraHbbX3+sI6CTv8ATNefV9MeL9BXxJ4butNJCyOu6JiOjjpXzXNE8E0kMi7XiYow9wcV99w/jva0fYyesfyOWrCzufQnws/5J1pf/bb/ANHPRSfCz/knOl/9tv8A0c9FfG4//e6v+KX5s6I/Cjrap6vp8WraVc6dMzLHcxmNmXqAau0lcadnco80HwT0TaP+JjedPaun8I+DLDwhDPHaO8zztlpJPvY9K6SjFdE8VXqR5ZybQuVCAYp1FFc4wooooAKKKKACiiigBCKhuLeOdNsiA+h7ip6TAPUUAZ0U8llIIbpiyH/Vy/0b3q8GJOPSnPGkilHRWU9QRkGlAA6AUDYmM1wmt/CbRta1efUmubi3e4bc6R4259a7yirp1p0neDsS0nuZvh3RIPDmhW2k20jyRW+7az9TuYsf1NFadFTKTk3KW7Gf/9k=",
                  fileName="C:/Documents and Settings/user/Desktop/chamber.jpg")}),
            defaultComponentName="burn",
            Documentation(info="<html>
<p>
This is a model of a gas burner.
</p>
<p>
The tank has <code>nSeg</code> fluid volumes. The top volume has the index <code>1</code>.
Thus, to add a heating element to the bottom element, connect a heat input to
<code>heaPorVol[nSeg]</code>.
</p>
</html>",   revisions="<html>
<ul>
<li>
May 15, 2011 by Thierry S. Nouidui:<br>
First implementation.
</li>
</ul>
</html>"),  Icon(graphics={Rectangle(
                        extent={{-40,60},{40,20}},
                        lineColor={255,0,0},
                        fillColor={255,0,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-40,-20},{40,-60}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-76,2},{-90,-2}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{0,84},{-80,80}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-76,84},{-80,-2}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{82,0},{78,-86}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{0,84},{-4,60}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{82,-84},{2,-88}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{6,-60},{2,-84}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{92,2},{78,-2}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-40,20},{40,-20}},
                        lineColor={255,0,0},
                        pattern=LinePattern.None,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.CrossDiag),Text(
                        extent={{100,106},{134,74}},
                        lineColor={0,0,127},
                        textString="QLoss"),Rectangle(
                        extent={{-10,10},{10,-10}},
                        lineColor={0,0,0},
                        fillPattern=FillPattern.Sphere,
                        fillColor={255,255,255}),Rectangle(
                        extent={{50,68},{40,-66}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-40,66},{-50,-68}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-48,68},{50,60}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Rectangle(
                        extent={{-48,-60},{50,-68}},
                        lineColor={0,0,255},
                        pattern=LinePattern.None,
                        fillColor={255,255,0},
                        fillPattern=FillPattern.Solid),Line(
                        points={{26,72},{102,72},{100,72}},
                        color={127,0,0},
                        pattern=LinePattern.Dot),Line(
                        points={{56,6},{56,72},{58,72}},
                        color={127,0,0},
                        pattern=LinePattern.Dot),Line(
                        points={{22,-74},{70,-74},{70,72}},
                        color={127,0,0},
                        pattern=LinePattern.Dot)}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics));
        end Gas;

        package Examples
          model Gas
            import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
            Modelica.Blocks.Sources.Constant TDryBul(k=273.15 + 21)
              annotation (Placement(transformation(extent={{78,-36},{58,-16}})));
            Buildings.HeatTransfer.Sources.PrescribedTemperature TBCBot
              "Boundary condition for tank" annotation (Placement(transformation(
                  extent={{6,-6},{-6,6}},
                  rotation=180,
                  origin={-40,-34})));
            Modelica.Blocks.Sources.Constant TFloor(k=273.15 + 15) annotation (
                Placement(transformation(extent={{-96,-44},{-76,-24}})));
            Modelica.Blocks.Sources.Constant QBurner(k=13180)
              annotation (Placement(transformation(extent={{78,-70},{58,-50}})));
            Modelica.Blocks.Sources.Constant QLoss(k=0)
              annotation (Placement(transformation(extent={{80,40},{60,60}})));
            Modelica.Blocks.Sources.Constant TFloor1(k=273.15 + 30)
              annotation (Placement(transformation(extent={{-98,48},{-78,68}})));
            Buildings.HeatTransfer.Sources.PrescribedTemperature TBCBot1
              "Boundary condition for tank" annotation (Placement(transformation(
                  extent={{6,-6},{-6,6}},
                  rotation=180,
                  origin={-42,58})));
            WaterHeaterLib.BaseClasses.Burner.Gas burn
              annotation (Placement(transformation(extent={{-28,-20},{52,38}})));
          equation
            connect(TFloor.y, TBCBot.T) annotation (Line(
                points={{-75,-34},{-47.2,-34}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(TFloor1.y, TBCBot1.T) annotation (Line(
                points={{-77,58},{-49.2,58}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(TBCBot.port, burn.heaPorBot) annotation (Line(
                points={{-34,-34},{9.6,-34},{9.6,-12.4}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(TBCBot1.port, burn.heaPorTop) annotation (Line(
                points={{-36,58},{-8,58},{-8,30}},
                color={191,0,0},
                smooth=Smooth.None));
            connect(TDryBul.y, burn.TDryBul) annotation (Line(
                points={{57,-26},{-6.2,-26},{-6.2,-12.4}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(QBurner.y, burn.QBurner) annotation (Line(
                points={{57,-60},{27.6,-60},{27.6,-12.2}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(QLoss.y, burn.Q_B) annotation (Line(
                points={{59,50},{6.8,50},{6.8,30.2}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(graphics));
          end Gas;
        end Examples;
      end Burner;

      package Examples
        model cdotG "this is an example for cdotG"
          import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
          WaterHeaterLib.BaseClasses.cdotG  cdot_G
            annotation (Placement(transformation(extent={{12,26},{32,46}})));
          Modelica.Blocks.Sources.Constant T_AD_flame(k=273.15 + 1000)
            annotation (Placement(transformation(extent={{-46,26},{-26,46}})));
          Modelica.Blocks.Sources.Constant T_Dry_Bul(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-44,-18},{-24,2}})));
          Modelica.Blocks.Sources.Constant QBurner(k=13180)
            annotation (Placement(transformation(extent={{-44,-52},{-24,-32}})));
        equation
          connect(T_AD_flame.y, cdot_G.T_AD) annotation (Line(
              points={{-25,36},{9.8,36}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_Dry_Bul.y, cdot_G.TDryBul) annotation (Line(
              points={{-23,-8},{16,-8},{16,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner.y, cdot_G.QIn) annotation (Line(
              points={{-23,-42},{22,-42},{22,24}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end cdotG;

        model TFlame "this is an example for TFlame"
          import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
          WaterHeaterLib.BaseClasses.TFlame     t_AD_Flame
            annotation (Placement(transformation(extent={{22,-12},{42,8}})));
          Modelica.Blocks.Sources.Constant T_Dry_Bul(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-40,14},{-20,34}})));
          Modelica.Blocks.Sources.Constant QBurner(k=13180)
            annotation (Placement(transformation(extent={{-40,-30},{-20,-10}})));
        equation
          connect(T_Dry_Bul.y, t_AD_Flame.TDryBul) annotation (Line(
              points={{-19,24},{0,24},{0,4},{20,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBurner.y, t_AD_Flame.QBurner) annotation (Line(
              points={{-19,-20},{0,-20},{0,-4},{20,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end TFlame;

        model THotGas "this is an example for THotGas"
          import WaterHeaterLib = WaterHeatingLibrary.NonCondensingTank;
          WaterHeaterLib.BaseClasses.THotGas  t_hotGas
            annotation (Placement(transformation(extent={{58,6},{78,26}})));
          Modelica.Blocks.Sources.Constant h_RB(k=2)
            annotation (Placement(transformation(extent={{-80,22},{-60,42}})));
          Modelica.Blocks.Sources.Constant C_dot_G(k=1e4)
            annotation (Placement(transformation(extent={{-80,58},{-60,78}})));
          Modelica.Blocks.Sources.Constant h_CB(k=600)
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Blocks.Sources.Constant T_AD_Flame(k=1000)
            annotation (Placement(transformation(extent={{-80,-46},{-60,-26}})));
          Modelica.Blocks.Sources.Constant T_Wall(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-80,-80},{-60,-60}})));
        equation
          connect(C_dot_G.y, t_hotGas.C_dotG) annotation (Line(
              points={{-59,68},{-18,68},{-18,24},{56,24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_RB.y, t_hotGas.h_RB) annotation (Line(
              points={{-59,32},{-18,32},{-18,20},{56,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(h_CB.y, t_hotGas.h_CB) annotation (Line(
              points={{-59,0},{-16,0},{-16,16},{56,16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_AD_Flame.y, t_hotGas.T_AD) annotation (Line(
              points={{-59,-36},{-18,-36},{-18,12},{56,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_Wall.y, t_hotGas.T_WL) annotation (Line(
              points={{-59,-70},{-2,-70},{-2,8},{56,8}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end THotGas;

        model mDotDExample
          mDCal mDCal1(nSeg=3)
            annotation (Placement(transformation(extent={{-18,-6},{2,14}})));
          Modelica.Blocks.Sources.RealExpression mDotB(y=1)
            annotation (Placement(transformation(extent={{-92,10},{-72,30}})));
          Modelica.Blocks.Sources.RealExpression mDotIn[3](y=7/3)
            annotation (Placement(transformation(extent={{-92,-6},{-72,14}})));
          Modelica.Blocks.Sources.RealExpression mDotF[3](y=2)
            annotation (Placement(transformation(extent={{-92,-22},{-72,-2}})));
        equation
          connect(mDotF.y, mDCal1.mDotFlu) annotation (Line(
              points={{-71,-12},{-46,-12},{-46,-5},{-20,-5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotIn.y, mDCal1.mDotIn) annotation (Line(
              points={{-71,4},{-20,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotB.y, mDCal1.mDotBas) annotation (Line(
              points={{-71,20},{-46,20},{-46,13},{-20,13}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end mDotDExample;

        model dHBUExample
          package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          dHBU dHBU1(nSeg=3, redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-12,-6},{8,14}})));
          Modelica.Blocks.Sources.Constant TWat[3](k=45)
            annotation (Placement(transformation(extent={{-92,-6},{-72,14}})));
          Modelica.Blocks.Sources.Constant THotBas(k=70)
            annotation (Placement(transformation(extent={{-92,26},{-72,46}})));
          Modelica.Blocks.Sources.Constant mDotBas(k=0.05)
            annotation (Placement(transformation(extent={{-92,56},{-72,76}})));
          Modelica.Blocks.Sources.Constant mDotFlu[3](k=0.02)
            annotation (Placement(transformation(extent={{-92,-36},{-72,-16}})));
          Modelica.Blocks.Sources.Constant THotFlu[3](k=60)
            annotation (Placement(transformation(extent={{-92,-66},{-72,-46}})));
        equation
          connect(mDotBas.y, dHBU1.mDotBas) annotation (Line(
              points={{-71,66},{-28,66},{-28,12},{-14,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(THotBas.y, dHBU1.THotBas) annotation (Line(
              points={{-71,36},{-32,36},{-32,8},{-14,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TWat.y, dHBU1.TWat) annotation (Line(
              points={{-71,4},{-14,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotFlu.y, dHBU1.mDotFlu) annotation (Line(
              points={{-71,-26},{-32,-26},{-32,0},{-14,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(THotFlu.y, dHBU1.THotFlu) annotation (Line(
              points={{-71,-56},{-28,-56},{-28,-4},{-14,-4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end dHBUExample;

        model QBuoExample
          package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          QBuo qBuo(
            redeclare package Medium = Medium,
            nSeg=3,
            m_flow_C=0.0012)
                    annotation (Placement(transformation(extent={{-4,-10},{16,10}})));
          Modelica.Blocks.Sources.Constant mDotD[3](k=0.05)
            annotation (Placement(transformation(extent={{-90,20},{-70,40}})));
          Modelica.Blocks.Sources.Constant TWat[3](k=45)
            annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
          Modelica.Blocks.Sources.Constant dHBU[3](k=15)
            annotation (Placement(transformation(extent={{-90,-40},{-70,-20}})));
          Modelica.Blocks.Sources.Constant QBas(k=100)
            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));
          Modelica.Blocks.Sources.Constant QFlu[3](k=100)
            annotation (Placement(transformation(extent={{-90,-70},{-70,-50}})));
        equation
          connect(mDotD.y, qBuo.mDotD) annotation (Line(
              points={{-69,30},{-38,30},{-38,6},{-6,6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TWat.y, qBuo.TWat) annotation (Line(
              points={{-69,0},{-6,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(dHBU.y, qBuo.dHBU) annotation (Line(
              points={{-69,-30},{-38,-30},{-38,-6},{-6,-6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QFlu.y, qBuo.QFlu) annotation (Line(
              points={{-69,-60},{-26,-60},{-26,-10},{-6,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QBas.y, qBuo.QBas) annotation (Line(
              points={{-69,60},{-26,60},{-26,10},{-6,10}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end QBuoExample;

        model buoHeaTraExample
          "Provides an example on the use of the model buoHeaTra"
            package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          buoHeaTra buoHeaTra1(nSeg=10, redeclare package Medium = Medium,
            QDotPilot=150)
            annotation (Placement(transformation(extent={{58,0},{78,20}})));
          Modelica.Blocks.Sources.Constant QDotBas(k=2000)
            annotation (Placement(transformation(extent={{-8,16},{12,36}})));
          Modelica.Blocks.Sources.Constant QDotFlu(k=2000)
            annotation (Placement(transformation(extent={{-8,-100},{12,-80}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol[10](V=0.014, m_flow_nominal=0.001,
            redeclare package Medium = Medium)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-32,12})));
          Modelica.Blocks.Sources.RealExpression realExpression[10](y=buoHeaTra1.buoHeaTra)
            annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
          Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow
            prescribedHeatFlow[10]
            annotation (Placement(transformation(extent={{-46,-46},{-32,-32}})));
          Modelica.Blocks.Sources.Constant QLosTop(k=-4000)
            annotation (Placement(transformation(extent={{-8,60},{12,80}})));
        equation
          connect(QDotBas.y, buoHeaTra1.QDotBas) annotation (Line(
              points={{13,26},{20.5,26},{20.5,0},{56,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QDotFlu.y, buoHeaTra1.QDotFlu) annotation (Line(
              points={{13,-90},{46,-90},{46,8},{56,8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(vol.heatPort, buoHeaTra1.TWat) annotation (Line(
              points={{-22,12},{-22,-38},{36,-38},{36,13.6},{57.4,13.6}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(realExpression.y, prescribedHeatFlow.Q_flow) annotation (Line(
              points={{-59,-40},{-52,-40},{-52,-39},{-46,-39}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
              points={{-32,-39},{-28,-39},{-28,-38},{-22,-38},{-22,12}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(QLosTop.y, buoHeaTra1.QLosTop) annotation (Line(
              points={{13,70},{40,70},{40,18},{56,18}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end buoHeaTraExample;

        model T_F0Example
          TF0 tF0_1
            annotation (Placement(transformation(extent={{18,-12},{38,8}})));
          Modelica.Blocks.Sources.Constant TAmb(k=273.15 + 20)
            annotation (Placement(transformation(extent={{-64,-12},{-44,8}})));
          Modelica.Blocks.Sources.Constant Qin(k=10000)
            annotation (Placement(transformation(extent={{-22,-80},{-2,-60}})));
          Modelica.Blocks.Sources.Constant QLoss(k=-8000)
                                                         annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={28,-70})));
          Modelica.Blocks.Sources.Constant cDotG(k=7.9) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={72,-70})));
        equation
          connect(TAmb.y, tF0_1.TDryBul) annotation (Line(
              points={{-43,-2},{16,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QLoss.y, tF0_1.QLoss) annotation (Line(
              points={{28,-59},{28,-14},{26.8,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Qin.y, tF0_1.QIn) annotation (Line(
              points={{-1,-70},{6,-70},{6,-24},{21.8,-24},{21.8,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(cDotG.y, tF0_1.C_dot_G) annotation (Line(
              points={{61,-70},{48,-70},{48,-20},{32,-20},{32,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end T_F0Example;

        model minFloInExample
          parameter Integer nSeg(min=1) = 5;
          minFloIn minFloIn1(
            nSeg=nSeg,
            perInA={4.0134,6.1873,-0.4415,2.8428,-1.0033},
            perInB={-2.0619,-2.8662,-0.2213,0.102,1.1405},
            perInC={0.4896,0.5048,0.2329,-0.0032,-0.0224})
            annotation (Placement(transformation(extent={{-10,0},{10,20}})));
          Modelica.Blocks.Sources.Constant const[nSeg](k=0.12)
            annotation (Placement(transformation(extent={{-80,8},{-60,28}})));
        equation
          connect(const.y, minFloIn1.m_flow_in) annotation (Line(
              points={{-59,18},{-12,18}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end minFloInExample;

        model timDelExample
          "Provides an example using the time delay (timDel) model"
          parameter Integer nSeg(min=1) = 8;
          timDel timDel1(nSeg=nSeg,
            timDelB={0,-14.047,79.1,475.76,805.42,792.21,802.41,812.61},
            timDelC={0,0.2408,21.676,14.305,8.1676,8.2512,7.9334,7.6157},
            timDelA={0,100.33,-567.21,-1971.9,-3112.4,-2660.9,-2376.6,-2092.3})
            annotation (Placement(transformation(extent={{-18,6},{2,26}})));
          Modelica.Blocks.Sources.Constant const[nSeg](k=0.02)
            annotation (Placement(transformation(extent={{-86,14},{-66,34}})));
        equation
          connect(const.y, timDel1.m_flow_in) annotation (Line(
              points={{-65,24},{-20,24}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end timDelExample;

        model draHeaTraExample "Provides an example of how draHeaTra is used"
            package Medium = Modelica.Media.Water.WaterIF97_ph "Medium model";
          parameter Integer nSeg(min=1) = 8;
          draHeaTra draHeaTra1(nSeg=nSeg, redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{0,8},{20,28}})));
          Modelica.Blocks.Tables.CombiTable1Ds combiTable1Ds[nSeg](
            tableOnFile=true,
            tableName="Flow",
            fileName="StorageTankDrawProfile.txt")
            annotation (Placement(transformation(extent={{-64,4},{-44,24}})));
          Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=time)
            annotation (Placement(transformation(extent={{-98,4},{-78,24}})));
          Modelica.Blocks.Sources.Constant const[nSeg](k={273.105 + 20,273.105 +
                30,273.105 + 40,273.105 + 50,273.105 + 60,273.105 + 70,273.105 +
                80,273.105 + 90})
            annotation (Placement(transformation(extent={{-68,36},{-48,56}})));
        equation
          connect(realExpression.y, combiTable1Ds.u) annotation (Line(
              points={{-77,14},{-66,14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(combiTable1Ds.y[1], draHeaTra1.mFloIn) annotation (Line(
              points={{-43,14},{-22,14},{-22,13},{-2,13}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const.y, draHeaTra1.TWat) annotation (Line(
              points={{-47,46},{-22,46},{-22,25.2},{-2,25.2}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end draHeaTraExample;

        model QEleExample
          "Provides an example of how the model describing electricty consumption is used"
          QEle qEle(QEleIdl=5, QEleAct=150)
            annotation (Placement(transformation(extent={{40,-30},{60,-10}})));
          Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=12)
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-46,26})));
          Modelica.Blocks.Sources.Constant T_Set(k=273.105 + 48)
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-82,20})));
          Modelica.Blocks.Math.BooleanToReal booleanToInteger
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-14,26})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=12,
            freqHz=0.05,
            offset=273.105 + 48)
            annotation (Placement(transformation(extent={{-96,54},{-76,74}})));
        equation
          connect(onOffController.y, booleanToInteger.u) annotation (Line(
              points={{-35,26},{-26,26}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(T_Set.y, onOffController.reference) annotation (Line(
              points={{-71,20},{-58,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(sine.y, onOffController.u) annotation (Line(
              points={{-75,64},{-66,64},{-66,32},{-58,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(booleanToInteger.y, qEle.BurnerStatus) annotation (Line(
              points={{-3,26},{20,26},{20,-20},{38,-20}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end QEleExample;

        model buoHeaTraModExample "An example using the buoHeaTraMod model"
          extends Modelica.Icons.Example;
          package Water = Modelica.Media.Water.WaterIF97_ph "Medium model";
          parameter Integer nSeg = 8;
          buoHeaTraMod buoHeaTraMod1(nSeg=nSeg, QDotPilot=120,
            redeclare package Medium = Water)
            annotation (Placement(transformation(extent={{-14,-2},{6,18}})));
          Modelica.Blocks.Sources.Constant QDotFlu(k=12000*1/3)
            annotation (Placement(transformation(extent={{-90,-22},{-70,-2}})));
          Modelica.Blocks.Sources.Constant QDotBas(k=12000*2/3)
            annotation (Placement(transformation(extent={{-90,-52},{-70,-32}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol[nSeg](redeclare
              package Medium =
                Water, V=0.014,
            m_flow_nominal=0.0001,
            nPorts=1,
            T_start={333.15,328.15,323.15,318.15,313.15,308.15,303.15,293.15})
                                                               annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-44,54})));
          Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=buoHeaTraMod1.buoHeaTra)
            annotation (Placement(transformation(extent={{-98,20},{-78,40}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow[nSeg]
            annotation (Placement(transformation(extent={{-72,24},{-60,36}})));
          inner Modelica.Fluid.System system
            annotation (Placement(transformation(extent={{-58,-82},{-38,-62}})));
          Modelica.Fluid.Sources.Boundary_pT boundary[nSeg](nPorts=1, redeclare
              package Medium = Water) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={0,54})));
        equation
          connect(realExpression.y, prescribedHeatFlow.Q_flow) annotation (Line(
              points={{-77,30},{-72,30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
              points={{-60,30},{-44,30},{-44,44}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(vol.heatPort, buoHeaTraMod1.TWat) annotation (Line(
              points={{-44,44},{-44,11.6},{-14.6,11.6}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(QDotFlu.y, buoHeaTraMod1.QDotFlu) annotation (Line(
              points={{-69,-12},{-44,-12},{-44,6},{-16,6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QDotBas.y, buoHeaTraMod1.QDotBas) annotation (Line(
              points={{-69,-42},{-28,-42},{-28,-2},{-16,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(boundary.ports[1], vol.ports[1]) annotation (Line(
              points={{-10,54},{-34,54}},
              color={0,127,255},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end buoHeaTraModExample;
      end Examples;

      model strLay "Identifies the height of the boundary layer"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        import Buildings;
        parameter Integer nSeg(min=2) = 3;
        Real smoDel = 0.0001;
        parameter Real QDotPilot;
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput strLay[nSeg]
          annotation (Placement(transformation(extent={{100,-16},{132,16}})));
      equation
        //Defines the bottom segment as always being below the stratification layer
        strLay[nSeg] = 0;
        for i in 1:(nSeg-1) loop
          //Checks the location of each segment relative to the stratification layer. Two checks:
          //  1) Compares the temperature of the active segment to the temperature of the segment below. If the temperature difference is less than the smoothing range it is considered to be under the stratification layer
          //  2) Checks the status of the segment below. If that segment is below the stratification layer, then the top layer can also be considered below the stratification layer
      //    if timer.y > 0 and strLay[nSeg-i] > 0 then
            strLay[nSeg-i] = min(1,Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[nSeg-i] - TWat[nSeg-i+1] - 0.2 - smoDel, smoDel) + Buildings.Utilities.Math.Functions.smoothHeaviside(strLay[nSeg-i+1]-0.1,smoDel));
      //     elseif timer.y < 1 then
      //       strLay[nSeg-i] = 1;
      //     else
      //       strLay[nSeg-i] = 0;
      //     end if;
        end for;
        annotation (Diagram(graphics));
      end strLay;

      model heaSum
        "Sums all the heat entering the water below the stratification layer"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 3;
        Real heaBelStr[nSeg];
        Real smoDel = 0.0001;
        Modelica.Blocks.Interfaces.RealInput strLay[nSeg]
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealOutput QBelStrTot
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput QLosTop
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      equation
        // Identifies the heat transfer below the stratification layer caused by the top segment. Includes both heat in from the flue, and losses out through the top. In from the flue is only included if the segment is considered below the stratification layer
        heaBelStr[1] = QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[1] - 0.1,smoDel) - QLosTop;
        // Identifies the heat below the stratification layer caused by flue heat transfer for each segment in the tank. The value is only included if a segment is considered below the stratification layer
        for i in 2:(nSeg - 1) loop
          heaBelStr[i] = QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[i] - 0.1,smoDel);
        end for;
        //  Identifies the heat below the stratification layer caused by heat transfer into the bottom segment. Includes both the flue and base heat transfer. Only added if the bottom segment is considered below the stratification layer
        heaBelStr[nSeg] =  QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[nSeg] - 0.1,smoDel) + QDotBas * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[nSeg] - 0.1,smoDel);
        //  Sums up all of the heat added below the stratification layer. It will be divided evenly between all segments below the stratification layer in a separate model
        QBelStrTot = sum(heaBelStr[1:nSeg]);
        annotation (Diagram(graphics));
      end heaSum;

      model QIn "Identifies the amount of heat entering each segment"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 2;
        Real smoDel = 0.0001;
        Real QIn[nSeg];
        Real heaPerSeg;
        Modelica.Blocks.Interfaces.RealInput strLay[nSeg]
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealInput heaBelStrTot
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealOutput QInCom[nSeg]
          "Identifies the heat entering each segment"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput QLosTop
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      equation
        //  Identifies the amount of heat to add to each segment below the stratification layer. Accomplished by dividing the total heat below the stratification layer by the number of segments below the stratification layer
        heaPerSeg = heaBelStrTot / (nSeg - sum(strLay[1:nSeg]));
        for i in 1:(nSeg-1) loop
          //  Calculates the heat entering each segment. If a segment is below the stratification layer, value is heaPerSeg. If above the stratification layer, value is QDotFlu
          QIn[i] = heaPerSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i+1] - TWat[i] + 0.1 - smoDel, smoDel) + QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i] - TWat[i+1] - 0.1, smoDel);
        end for;
        //  Performs the same calculation for the bottom segment
        QIn[nSeg] = heaPerSeg * Buildings.Utilities.Math.Functions.smoothHeaviside((1 - smoDel) - strLay[nSeg], smoDel) + QDotBas * Buildings.Utilities.Math.Functions.smoothHeaviside(strLay[nSeg] - smoDel, smoDel);
        //  Identifies the final heat transfer into each segment. Does so combining flu/base/loss heat transfers to Qin to ensure that no heat transfer is double counted
        QInCom[1] = QIn[1] - QDotFlu/nSeg - QLosTop;
        for i in 2:(nSeg-1) loop
          QInCom[i] = QIn[i] - QDotFlu/nSeg;
        end for;
        QInCom[nSeg] = QIn[nSeg] - QDotFlu/nSeg - QDotBas;
        annotation (Diagram(graphics));
      end QIn;

      model minFloIn
        "Identifies the minimum inlet water flow entering each segment"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Real perInA[nSeg]= {4.0134};
        parameter Real perInB[nSeg] = {-2.0619};
        parameter Real perInC[nSeg] = {0.4896};
        parameter Integer nSeg(min = 1) = 1;
        Modelica.Blocks.Interfaces.RealInput m_flow_in[nSeg]
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=perInA)
          annotation (Placement(transformation(extent={{-70,36},{-50,56}})));
        Modelica.Blocks.Sources.RealExpression realExpression1[nSeg](y=perInB)
          annotation (Placement(transformation(extent={{-70,4},{-50,24}})));
        Modelica.Blocks.Sources.RealExpression realExpression2[nSeg](y=perInC)
          annotation (Placement(transformation(extent={{-70,-26},{-50,-6}})));
        Modelica.Blocks.Math.Product product1[nSeg]
          annotation (Placement(transformation(extent={{-30,64},{-10,84}})));
        Modelica.Blocks.Math.Product product2[nSeg]
          annotation (Placement(transformation(extent={{2,42},{22,62}})));
        Modelica.Blocks.Math.Product product3[nSeg]
          annotation (Placement(transformation(extent={{0,10},{20,30}})));
        Modelica.Blocks.Math.Add3 add3_1[nSeg]
          annotation (Placement(transformation(extent={{64,10},{84,30}})));
        Modelica.Blocks.Interfaces.RealOutput y[nSeg]
          annotation (Placement(transformation(extent={{100,10},{120,30}})));
      equation
        connect(m_flow_in, product1.u1) annotation (Line(
            points={{-120,80},{-32,80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in, product1.u2) annotation (Line(
            points={{-120,80},{-58,80},{-58,68},{-32,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y, product2.u1) annotation (Line(
            points={{-9,74},{-6,74},{-6,58},{0,58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, product2.u2) annotation (Line(
            points={{-49,46},{0,46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product2.y, add3_1.u1) annotation (Line(
            points={{23,52},{46,52},{46,28},{62,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in, product3.u1) annotation (Line(
            points={{-120,80},{-86,80},{-86,26},{-2,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y, product3.u2) annotation (Line(
            points={{-49,14},{-2,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y, add3_1.u2) annotation (Line(
            points={{21,20},{62,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression2.y, add3_1.u3) annotation (Line(
            points={{-49,-16},{48,-16},{48,12},{62,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add3_1.y, y) annotation (Line(
            points={{85,20},{110,20}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end minFloIn;

      function readIntegerParameter
        "Read the value of a Real parameter from file"
        import Modelica.Utilities.*;
        extends Modelica.Icons.Function;
        input String fileName "Name of file"       annotation(Dialog(
                               __Dymola_loadSelector(filter="Text files (*.txt)",
                               caption="Open file in which Real parameters are present")));
        input String name "Name of parameter";
        output Integer result "Actual value of parameter on file";
      protected
        String line;
        String identifier;
        String delimiter;
        Integer nextIndex;
        Integer iline=1;
        Modelica.Utilities.Types.TokenValue token;
        String message = "in file \"" + fileName + "\" on line ";
        String message2;
        Boolean found = false;
        Boolean endOfFile=false;
      algorithm
       (line, endOfFile) :=Modelica.Utilities.Streams.readLine(fileName, iline);
        while not found and not endOfFile loop
          (token, nextIndex) := Modelica.Utilities.Strings.scanToken(line);
           if token.tokenType == Modelica.Utilities.Types.TokenType.NoToken then
              // skip line
              iline := iline + 1;
           elseif token.tokenType == Modelica.Utilities.Types.TokenType.IdentifierToken then
              if token.string == name then
                 // name found, get value of "name = value;"
                 message2 := message + String(iline);
                 (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(line, nextIndex, {"="}, message2);
              (result,nextIndex) := integerExpression(
                      line,
                      nextIndex,
                      message2);
                 (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(line, nextIndex, {";", ""}, message2);
                 Modelica.Utilities.Strings.scanNoToken(line, nextIndex, message2);
                 found := true;
              else
                 // wrong name, skip line
                 iline := iline + 1;
              end if;
           else
              // wrong token
              Modelica.Utilities.Strings.syntaxError(line, nextIndex, "Expected identifier " + message + String(iline));
           end if;
           // read next line
           (line, endOfFile) :=Modelica.Utilities.Streams.readLine(fileName, iline);
        end while;
        if not found then
           Modelica.Utilities.Streams.error("Parameter \"" + name + "\" not found in file \"" + fileName + "\"");
        end if;
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
result = <b>readRealParameter</b>(fileName, name);
</pre></blockquote>
<h4>Description</h4>
<p>
This function demonstrates how a function can be implemented
that reads the value of a parameter from file. The function
performs the following actions:
</p>
<ol>
<li> It opens file \"fileName\" and reads the lines of the file.</li>
<li> In every line, Modelica line comments (\"// ... end-of-line\")
     are skipped </li>
<li> If a line consists of \"name = expression\" and the \"name\"
     in this line is identical to the second argument \"name\"
     of the function call, the expression calculator Examples.expression
     is used to evaluate the expression after the \"=\" character.
     The expression can optionally be terminated with a \";\".</li>
<li> The result of the expression evaluation is returned as
     the value of the parameter \"name\". </li>
</ol>
<h4>Example</h4>
<p>
On file \"test.txt\" the following lines might be present:
</p>
<blockquote><pre>
// Motor data
J        = 2.3     // inertia
w_rel0   = 1.5*2;  // relative angular velocity
phi_rel0 = pi/3
</pre></blockquote>
<p>
The function returns the value \"3.0\" when called as:
</p>
<blockquote><pre>
readRealParameter(\"test.txt\", \"w_rel0\")
</pre></blockquote>
</html>"));
      end readIntegerParameter;

      function integerExpression
        "Expression interpreter that returns with the position after the expression (expression may consist of +,-,*,/,(),sin(), cos(), tan(), sqrt(), pi"
        import Modelica.Utilities.Types;
        import Modelica.Utilities.Strings;
        import Modelica.Math;
        import Modelica.Constants;
        extends Modelica.Icons.Function;
        input String string "Expression that is evaluated";
        input Integer startIndex=1
          "Start scanning of expression at character startIndex";
        input String message=""
          "Message used in error message if scan is not successful";
        output Integer result "Value of expression";
        output Integer nextIndex "Index after the scanned expression";
      protected
      function term "Evaluate term of an expression"
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Real result;
        output Integer nextIndex;
        protected
        Integer result2;
        Boolean scanning=true;
        String opString;
      algorithm
        // scan for "primary * primary" or "primary / primary"
        (result, nextIndex) := primary(string, startIndex, message);
        while scanning loop
          (opString, nextIndex) := Strings.scanDelimiter(
                                          string, nextIndex, {"*","/",""}, message);
          if opString == "" then
             scanning := false;
          else
             (result2, nextIndex) := primary(string, nextIndex, message);
             result := if opString == "*" then result*result2 else result/result2;
          end if;
        end while;
      end term;

      function primary "Evaluate primary of an expression"
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Real result;
        output Integer nextIndex;
        protected
        Types.TokenValue token;
        Real result2;
        String delimiter;
        String functionName;
        Real pi = Modelica.Constants.pi;
      algorithm
        (token,nextIndex) := Strings.scanToken(string, startIndex,unsigned=true);
        if token.tokenType == Types.TokenType.DelimiterToken and token.string == "(" then
          (result,nextIndex) := expression(string, nextIndex,message);
          (delimiter,nextIndex) := Strings.scanDelimiter(string,nextIndex,{")"}, message);
        elseif token.tokenType == Types.TokenType.RealToken then
          result := token.real;
        elseif token.tokenType == Types.TokenType.IntegerToken then
          result := token.integer;
        elseif token.tokenType == Types.TokenType.IdentifierToken then
          if token.string == "pi" then
             result := pi;
          else
             functionName := token.string;
             (delimiter,nextIndex) := Strings.scanDelimiter(string,nextIndex,{"("}, message);
             (result,nextIndex)    := expression(string, nextIndex, message);
             (delimiter,nextIndex) := Strings.scanDelimiter(string,nextIndex,{")"}, message);
             if functionName == "sin" then
               result := Math.sin(result);
             elseif functionName == "cos" then
               result := Math.cos(result);
             elseif functionName == "tan" then
               result := Math.tan(result);
             elseif functionName == "sqrt" then
               if result < 0.0 then
                  Strings.syntaxError(string, startIndex, "Argument of call \"sqrt(" + String(result) + ")\" is negative.\n" +
                              "Imaginary numbers are not supported by the calculator.\n" + message);
               end if;
               result := sqrt(result);
             else
               Strings.syntaxError(string, startIndex, "Function \"" + functionName + "\" is unknown (not supported)\n" +
                                               message);
             end if;
          end if;
        else
          Strings.syntaxError(string, startIndex, "Invalid primary of expression.\n" + message);
        end if;
      end primary;
        Integer result2;
        String signOfNumber;
        Boolean scanning=true;
        String opString;
      algorithm
        // scan for optional leading "+" or "-" sign
        (signOfNumber, nextIndex) :=Modelica.Utilities.Strings.scanDelimiter(
                                         string, startIndex, {"+","-",""}, message);
        // scan for "term + term" or "term - term"
        (result,nextIndex) := integerTerm(
                string,
                nextIndex,
                message);
        if signOfNumber == "-" then
           result := -result;
        end if;
        while scanning loop
          (opString, nextIndex) := Modelica.Utilities.Strings.scanDelimiter(
                                          string, nextIndex, {"+","-",""}, message);
          if opString == "" then
             scanning := false;
          else
            (result2,nextIndex) := integerTerm(
                    string,
                    nextIndex,
                    message);
             result := if opString == "+" then result+result2 else result-result2;
          end if;
        end while;
        annotation (Documentation(info="<html>
<h4>Syntax</h4>
<blockquote><pre>
             result = <b>expression</b>(string);
(result, nextIndex) = <b>expression</b>(string, startIndex=1, message=\"\");
</pre></blockquote>
<h4>Description</h4>
<p>
This function is nearly the same as Examples.<b>calculator</b>.
The essential difference is that function \"expression\" might be
used in other parsing operations: After the expression is
parsed and evaluated, the function returns with the value
of the expression as well as the position of the character
directly after the expression.
</p>
<p>
This function demonstrates how a simple expression calculator
can be implemented in form of a recursive decent parser
using basically the Strings.scanToken(..) and scanDelimiters(..)
function. There are 2 local functions (term, primary) that
implement the corresponding part of the grammar.
</p>
<p>
The following operations are supported (pi=3.14.. is a predefined constant):
</p>
<pre>
   +, -
   *, /
   (expression)
   sin(expression)
   cos(expression)
   tan(expression)
   sqrt(expression)
   pi
</pre>
<p>
The optional argument \"startIndex\" defines at which position
scanning of the expression starts.
</p>
<p>
In case of error,
the optional argument \"message\" is appended to the error
message, in order to give additional information where
the error occured.
</p>
<p>
This function parses the following grammaer
</p>
<pre>
  expression: [ add_op ] term { add_op term }
  add_op    : \"+\" | \"-\"
  term      : primary { mul_op primary }
  mul_op    : \"*\" | \"/\"
  primary   : UNSIGNED_NUMBER
              | pi
              | ( expression )
              | functionName( expression )
  function  :   sin
              | cos
              | tan
              | sqrt
</pre>
<p>
Note, in Examples.readRealParameter it is shown, how the expression
function can be used as part of another scan operation.
</p>
<h4>Example</h4>
<blockquote><pre>
  expression(\"2+3*(4-1)\");  // returns 11
  expression(\"sin(pi/6)\");  // returns 0.5
</pre></blockquote>
</html>"));
      end integerExpression;

      function integerTerm
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Integer result;
        output Integer nextIndex;
      protected
        Integer result2;
        Boolean scanning=true;
        String opString;
      algorithm
        // scan for "primary * primary" or "primary / primary"
        (result,nextIndex) := integerPrimary(
                string,
                startIndex,
                message);
        while scanning loop
          (opString, nextIndex) := Modelica.Utilities.Strings.scanDelimiter(
                                          string, nextIndex, {"*","/",""}, message);
          if opString == "" then
             scanning := false;
          else
            (result2,nextIndex) := integerPrimary(
                    string,
                    nextIndex,
                    message);
             result :=result2; // if opString == "*" then result*result2 else result/result2;
          end if;
        end while;
      end integerTerm;

      function integerPrimary
        extends Modelica.Icons.Function;
        input String string;
        input Integer startIndex;
        input String message="";
        output Integer result;
        output Integer nextIndex;
      protected
        Modelica.Utilities.Types.TokenValue token;
        Integer result2;
        String delimiter;
        String functionName;
        Real pi = Modelica.Constants.pi;
      algorithm
        (token,nextIndex) := Modelica.Utilities.Strings.scanToken(string, startIndex,unsigned=true);
        if token.tokenType == Modelica.Utilities.Types.TokenType.DelimiterToken and token.string == "(" then
          (result,nextIndex) := integerExpression(
                  string,
                  nextIndex,
                  message);
          (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(string,nextIndex,{")"}, message);
      //  elseif token.tokenType == Modelica.Utilities.Types.TokenType.RealToken then
      //    result := token.real;
        elseif token.tokenType == Modelica.Utilities.Types.TokenType.IntegerToken then
          result := token.integer;
      //  elseif token.tokenType == Modelica.Utilities.Types.TokenType.IdentifierToken then
      //    if token.string == "pi" then
      //       result := pi;
      //    else
      //       functionName := token.string;
      //       (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(string,nextIndex,{"("}, message);
      //       (result,nextIndex)    := WaterHeaterLib.BaseClasses.integerExpression(string, nextIndex, message);
      //       (delimiter,nextIndex) := Modelica.Utilities.Strings.scanDelimiter(string,nextIndex,{")"}, message);
      //       if functionName == "sin" then
      //         result := Modelica.Math.sin(result);
      //       elseif functionName == "cos" then
      //         result := Modelica.Math.cos(result);
      //       elseif functionName == "tan" then
      //         result := Modelica.Math.tan(result);
      //       elseif functionName == "sqrt" then
      //         if result < 0.0 then
      //            Modelica.Utilities.Strings.syntaxError(string, startIndex, "Argument of call \"sqrt(" + String(result) + ")\" is negative.\n" +
      //                        "Imaginary numbers are not supported by the calculator.\n" + message);
      //         end if;
      //         result := sqrt(result);
      //       else
      //         Modelica.Utilities.Strings.syntaxError(string, startIndex, "Function \"" + functionName + "\" is unknown (not supported)\n" +
      //                                         message);
      //       end if;
      //    end if;
        else
          Modelica.Utilities.Strings.syntaxError(string, startIndex, "Invalid primary of expression.\n" + message);
        end if;
      end integerPrimary;

      model timDel
        "Calculates the time delay for each segment at the given flow rate"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min = 1) = 1;
        parameter Real timDelA[nSeg] = {0};
        parameter Real timDelB[nSeg] = {0};
        parameter Real timDelC[nSeg] = {0};
        Modelica.Blocks.Sources.RealExpression realExpression[nSeg](y=timDelA)
          annotation (Placement(transformation(extent={{-70,36},{-50,56}})));
        Modelica.Blocks.Sources.RealExpression realExpression1[nSeg](y=timDelB)
          annotation (Placement(transformation(extent={{-70,4},{-50,24}})));
        Modelica.Blocks.Sources.RealExpression realExpression2[nSeg](y=timDelC)
          annotation (Placement(transformation(extent={{-70,-26},{-50,-6}})));
        Modelica.Blocks.Math.Product product1[nSeg]
          annotation (Placement(transformation(extent={{-30,64},{-10,84}})));
        Modelica.Blocks.Math.Product product2[nSeg]
          annotation (Placement(transformation(extent={{2,42},{22,62}})));
        Modelica.Blocks.Math.Product product3[nSeg]
          annotation (Placement(transformation(extent={{0,10},{20,30}})));
        Modelica.Blocks.Math.Add3 add3_1[nSeg]
          annotation (Placement(transformation(extent={{64,10},{84,30}})));
        Modelica.Blocks.Interfaces.RealInput m_flow_in[nSeg]
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealOutput y[nSeg]
          annotation (Placement(transformation(extent={{100,10},{120,30}})));
      equation
        connect(m_flow_in,product1. u1) annotation (Line(
            points={{-120,80},{-32,80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in,product1. u2) annotation (Line(
            points={{-120,80},{-58,80},{-58,68},{-32,68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y,product2. u1) annotation (Line(
            points={{-9,74},{-6,74},{-6,58},{0,58}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y,product2. u2) annotation (Line(
            points={{-49,46},{0,46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product2.y,add3_1. u1) annotation (Line(
            points={{23,52},{46,52},{46,28},{62,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(m_flow_in,product3. u1) annotation (Line(
            points={{-120,80},{-86,80},{-86,26},{-2,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression1.y,product3. u2) annotation (Line(
            points={{-49,14},{-2,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y,add3_1. u2) annotation (Line(
            points={{21,20},{62,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression2.y,add3_1. u3) annotation (Line(
            points={{-49,-16},{48,-16},{48,12},{62,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add3_1.y,y)  annotation (Line(
            points={{85,20},{110,20}},
            color={0,0,127},
            smooth=Smooth.None));
      end timDel;

      model perFloIn
        "Calculates the percentage of inlet water entering a segment for a given flow rate and time"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 10;
        Modelica.Blocks.Interfaces.RealInput minFloIn[nSeg]
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.IntegerInput Active[nSeg]
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealOutput perFlo[nSeg]
          annotation (Placement(transformation(extent={{100,0},{120,20}})));
      equation
        for i in (1:nSeg) loop
          perFlo[i] = minFloIn[i] * Active[i];
        end for;
      end perFloIn;

      model QEle "Describes the electricity consumption of the unit"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Real QEleIdl = 5
          "Electricity consumption when the burner is idle";
        parameter Real QEleAct = 150
          "Electricity consumption when the burner is active";
        Modelica.Blocks.Interfaces.RealInput BurnerStatus
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Sources.Constant Act(k=QEleAct)
          annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
        Modelica.Blocks.Sources.Constant Idl(k=QEleIdl)
          annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{-44,-16},{-24,4}})));
        Modelica.Blocks.Math.Max max
          annotation (Placement(transformation(extent={{8,-10},{28,10}})));
        Modelica.Blocks.Interfaces.RealOutput QEle
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        connect(BurnerStatus, product.u1) annotation (Line(
            points={{-120,0},{-46,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Act.y, product.u2) annotation (Line(
            points={{-59,-30},{-54,-30},{-54,-12},{-46,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, max.u2) annotation (Line(
            points={{-23,-6},{6,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Idl.y, max.u1) annotation (Line(
            points={{-59,50},{-14,50},{-14,6},{6,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max.y, QEle) annotation (Line(
            points={{29,0},{110,0}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end QEle;

      model TimeBasedIfGain
        "A gain model which contains an if-statement to yield different values depending on the time"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Real TimeLow;
        parameter Real TimeHigh;
        parameter Real InIfGain;
        parameter Real OutIfGain;
        Modelica.Blocks.Interfaces.RealInput u
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{124,14}})));
        Modelica.Blocks.Sources.RealExpression Time(y=time)
          annotation (Placement(transformation(extent={{-68,32},{-48,52}})));
      equation
        if Time.y < TimeLow then
          y = OutIfGain * u;
        elseif Time.y > TimeHigh then
          y = OutIfGain * u;
        else
          y = 0;
        end if;
      end TimeBasedIfGain;

      model buoHeaTraMod
        "Modified buoHeaTra. Changed so that all inputs are single values instead of arrays"
        import WaterHeatingLibrary;
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        parameter Integer nSeg(min=2) = 2;
        parameter Real QDotPilot;
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a TWat[nSeg]
          annotation (Placement(transformation(extent={{-116,26},{-96,46}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor WatT[nSeg]
          annotation (Placement(transformation(extent={{-96,26},{-76,46}})));
        Modelica.Blocks.Interfaces.RealOutput buoHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-6},{132,26}})));
        WaterHeatingLibrary.NonCondensingTank.BaseClasses.strLay strLay(nSeg=nSeg,
            QDotPilot=QDotPilot)
                                annotation (Placement(transformation(extent={{-66,26},
                  {-46,46}})));
        heaSumMod
               heaSum1(nSeg=nSeg)
          annotation (Placement(transformation(extent={{-36,-14},{-16,6}})));
        QInMod
            qIn(nSeg=nSeg)
                annotation (Placement(transformation(extent={{20,-54},{40,-34}})));
      equation
        connect(TWat, WatT.port) annotation (Line(
            points={{-106,36},{-96,36}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(WatT.T, strLay.TWat) annotation (Line(
            points={{-76,36},{-68,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(strLay.strLay, heaSum1.strLay) annotation (Line(
            points={{-44.4,36},{-42,36},{-42,0},{-38,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotFlu, heaSum1.QDotFlu) annotation (Line(
            points={{-120,-20},{-80,-20},{-80,-8},{-38,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBas, heaSum1.QDotBas) annotation (Line(
            points={{-120,-100},{-60,-100},{-60,-14},{-38,-14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(strLay.strLay, qIn.strLay) annotation (Line(
            points={{-44.4,36},{0,36},{0,-38},{18,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(heaSum1.QBelStrTot, qIn.heaBelStrTot) annotation (Line(
            points={{-15,-4},{-8,-4},{-8,-42},{18,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotFlu, qIn.QDotFlu) annotation (Line(
            points={{-120,-20},{-20,-20},{-20,-50},{18,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QDotBas, qIn.QDotBas) annotation (Line(
            points={{-120,-100},{-20,-100},{-20,-54},{18,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(qIn.QInCom, buoHeaTra) annotation (Line(
            points={{41,-44},{78,-44},{78,10},{116,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(WatT.T, qIn.TWat) annotation (Line(
            points={{-76,36},{-76,-46},{18,-46}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}),
                            graphics), Icon(coordinateSystem(preserveAspectRatio=true,
                extent={{-100,-100},{100,100}})));
      end buoHeaTraMod;

      model HyDra
        "Calculates the heat transfer rates caused by a hot water draw event (Hybrid Model)"
        extends Modelica.Blocks.Interfaces.BlockIcon;
         replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
         Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
           Medium.setState_pTX(
             Medium.p_default,
             Medium.T_default,
             Medium.X_default));
        parameter Integer nSeg(min=2) = 8;
        Modelica.Blocks.Interfaces.RealInput mFloIn[nSeg]
          annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
        Modelica.Blocks.Interfaces.RealOutput draHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-2},{120,18}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,52},{-100,92}})));
        Modelica.Blocks.Interfaces.RealInput TIn
          annotation (Placement(transformation(extent={{-140,12},{-100,52}})));
      equation
      for i in 1:nSeg loop
        draHeaTra[i] = mFloIn[i]/nSeg * c_p * (TWat[i] - TIn);
      end for;
        annotation (Diagram(graphics));
      end HyDra;

      model cirHeaTra "Heat transfer caused by the recirculation loop"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium;
        Medium.SpecificHeatCapacity c_p=Medium.specificHeatCapacityCp(
            Medium.setState_pTX(
              Medium.p_default,
              Medium.T_default,
              Medium.X_default));
        parameter Integer nSeg(min=2) = 8;
        Modelica.Blocks.Interfaces.RealInput mFloCir "Recirculation flow rate"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          "Water temperature in all segments"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput TRec
          "Recirculation inlet temperature"
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Interfaces.RealOutput cirHeaTra[nSeg]
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        for i in 1:nSeg loop
          cirHeaTra[i] = mFloCir/nSeg * c_p * (TRec - TWat[i]);
        end for;
      end cirHeaTra;

      model UALoss "Identifies the UA losses in the tank"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 8;
        parameter Real UA;
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput TAmb
          annotation (Placement(transformation(extent={{-140,-40},{-100,2}})));
        Modelica.Blocks.Interfaces.RealOutput UALoss[nSeg]
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        for i in 1:nSeg loop
          UALoss[i] = UA/nSeg * (TWat[i] - TAmb);
        end for;
      end UALoss;

      model QInMod
        "Identifies the amount of heat entering each segment (Modified to use a single QDotFlu and UA)"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 2;
        Real smoDel = 0.0001;
      //   Real QIn[nSeg];
        Real heaPerSeg;
        Modelica.Blocks.Interfaces.RealInput strLay[nSeg]
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealInput heaBelStrTot
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealOutput QInCom[nSeg]
          "Identifies the heat entering each segment"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput TWat[nSeg]
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
      equation
        //  Identifies the amount of heat to add to each segment below the stratification layer. Accomplished by dividing the total heat below the stratification layer by the number of segments below the stratification layer
        heaPerSeg = heaBelStrTot / (nSeg - sum(strLay[1:nSeg]));
        for i in 1:(nSeg-1) loop
          //  Calculates the heat entering each segment. If a segment is below the stratification layer, value is heaPerSeg. If above the stratification layer, value is QDotFlu
          QInCom[i] = heaPerSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i+1] - TWat[i] + 0.1 - smoDel, smoDel) + QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(TWat[i] - TWat[i+1] - 0.1, smoDel);
        end for;
        //  Performs the same calculation for the bottom segment
        QInCom[nSeg] = heaPerSeg * Buildings.Utilities.Math.Functions.smoothHeaviside((1 - smoDel) - strLay[nSeg], smoDel) + QDotBas * Buildings.Utilities.Math.Functions.smoothHeaviside(strLay[nSeg] - smoDel, smoDel);
        //  Identifies the final heat transfer into each segment. Does so combining flu/base/loss heat transfers to Qin to ensure that no heat transfer is double counted
      //   QInCom[1] = QIn[1] - QDotFlu/nSeg;
      //   for i in 2:(nSeg-1) loop
      //     QInCom[i] = QIn[i] - QDotFlu/nSeg;
      //   end for;
      //
      //   QInCom[nSeg] = QIn[nSeg] - QDotFlu/nSeg - QDotBas;
        annotation (Diagram(graphics));
      end QInMod;

      model heaSumMod
        "Sums all the heat entering the water below the stratification layer (Modified to be used with a single QDotFlu and UA)"
        extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Integer nSeg(min=2) = 3;
        Real heaBelStr[nSeg];
        Real smoDel = 0.0001;
        Modelica.Blocks.Interfaces.RealInput strLay[nSeg]
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput QDotFlu
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput QDotBas
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealOutput QBelStrTot
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        // Identifies the heat transfer below the stratification layer caused by the top segment. Includes both heat in from the flue, and losses out through the top. In from the flue is only included if the segment is considered below the stratification layer
        heaBelStr[1] = QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[1] - 0.1,smoDel);
        // Identifies the heat below the stratification layer caused by flue heat transfer for each segment in the tank. The value is only included if a segment is considered below the stratification layer
        for i in 2:(nSeg - 1) loop
          heaBelStr[i] = QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[i] - 0.1,smoDel);
        end for;
        //  Identifies the heat below the stratification layer caused by heat transfer into the bottom segment. Includes both the flue and base heat transfer. Only added if the bottom segment is considered below the stratification layer
        heaBelStr[nSeg] =  QDotFlu/nSeg * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[nSeg] - 0.1,smoDel) + QDotBas * Buildings.Utilities.Math.Functions.smoothHeaviside(1 - strLay[nSeg] - 0.1,smoDel);
        //  Sums up all of the heat added below the stratification layer. It will be divided evenly between all segments below the stratification layer in a separate model
        QBelStrTot = sum(heaBelStr[1:nSeg]);
        annotation (Diagram(graphics));
      end heaSumMod;
    end BaseClasses;
    annotation (
      conversion(noneFromVersion=""));
  end NonCondensingTank;

  package NonCondensingTankless
    "A model for non-condensing tankless water heaters"
    model NonCondensingTanklessHeater

      HeatExchangers.NonCondensing HeatExchanger(
        ConductionCoefficient=0.000001,
        Capacitance=Capacitance_input,
        SteadyStateEff=SteadyStateEff_input,
        UA=UA_input,
        T_Set=T_Set_input,
        nNode = nNode_input,
        EffPilot = EffPilot_input,
        Qdot_Pilot = Qdot_Pilot_input,
        Qdot_Rated = Qdot_Rated_input,
        SpecificHeat = SpecificHeat_input,
        EnergyDensityGas=13500)
        annotation (Placement(transformation(extent={{-26,-28},{24,34}})));
      Controllers.NonCondensingTanklessHXController
        nonCondensingTanklessHXController(
        mdot_min_cons=mdot_min_input,
        SpecificHeat_cons=SpecificHeat_input,
        PID_y_start=0,
        SteadyStateEff_cons=SteadyStateEff_input,
        PID_I=PID_I_input,
        PID_D=PID_D_input,
        T_Set_cons=T_Set_input,
        Qdot_min_cons = Qdot_min_input,
        PID_P=PID_P_input,
        Qdot_Rated_cons=Qdot_Rated_input,
        QAct=QAct,
        QIdl=QIdl,
        t_short=t_short,
        t_long=t_long,
        t_switch=t_switch)
        "A controller intended to mimic the control logic used in non-condensing tankless water heaters. Includes logic to avoid firing when the flow rate is too low or the require heat rate is too low. Also includes logic to reduce the flow rate when the required heat rate surpasses the heaters maximum heat rate"
        annotation (Placement(transformation(extent={{0,-112},{20,-92}})));
      Modelica.Blocks.Interfaces.RealInput DemandFlowRate(unit = "kg/s")
        annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
      Modelica.Blocks.Interfaces.RealInput AmbientTemperature(unit = "K")
        annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      Modelica.Blocks.Interfaces.RealInput InletTemperature(unit = "K")
        annotation (Placement(transformation(extent={{-140,-12},{-100,28}})));
      Modelica.Blocks.Interfaces.RealInput pwrSig
        annotation (Placement(transformation(extent={{-140,-160},{-100,-120}})));
      parameter Real Capacitance_input(unit = "J/K") = 18138.9
        "Capacitance of the heat exchanger";
      parameter Real SteadyStateEff_input=0.83
        "Unit efficiency at steady state";
      parameter Real UA_input(unit = "W/K")=13.6521
        "Coefficient describing heat loss to ambient";
      parameter Real T_Set_input(unit = "K") = 273.15 + 60 "Setpoint";
      parameter Real mdot_min_input(unit = "kg/s") = 0.043
        "Minimum water flow rate";
      parameter Real SpecificHeat_input(unit = "J/(kg.K)") = 4190
        "Specific heat of the fluid";
      parameter Real PID_P_input = 0.405891
        "Proportional value in the PID controller";
      parameter Modelica.SIunits.Time PID_I_input = 47597.1
        "Integral value in the PID controller";
      parameter Real PID_D_input(unit = "s") = 35.3539
        "Derivative value in the PID controller";
      parameter Integer nNode_input = 10
        "Number of segments in the heat exchanger";
      parameter Real EffPilot_input = 0.8 "Efficiency of the pilot light";
      parameter Real Qdot_Pilot_input(unit = "W") = 0
        "Energy consumption rate of the pilot light";
      parameter Real Qdot_Rated_input(unit = "W") = 55555
        "Energy consumed by the burner at max capacity";
    //  parameter Real EnergyDensityGas_input = 13500;
      parameter Real Qdot_min_input(unit = "W") = 5275
        "Minimum heat rate the burner will operate at";
      parameter Modelica.SIunits.Time t_short = 1.5
        "Start delay with a short time between draws";
      parameter Modelica.SIunits.Time t_long = 3
        "Start delay with a long time between draws";
      parameter Modelica.SIunits.Time t_switch = 30
        "Time between draws required for t_long";
      parameter Real QAct(unit = "W") = 50
        "Electric power consumed when the fan is operating";
      parameter Real QIdl(unit = "W") = 15
        "Electric power consumed when the fan is not operating";
      Modelica.Blocks.Interfaces.RealOutput T_Out(unit = "K")
        annotation (Placement(transformation(extent={{100,-8},{120,12}})));
      Modelica.Blocks.Interfaces.RealOutput mdot_water_controlled(unit = "kg/s")
        annotation (Placement(transformation(extent={{100,-104},{120,-84}})));
    equation
      connect(nonCondensingTanklessHXController.mdot_water_controlled,
        HeatExchanger.mdot_water) annotation (Line(
          points={{20.8727,-95.28},{20.8727,-71.05},{-31,-71.05},{-31,3}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.ControlConstant,HeatExchanger. ControlConstant)
        annotation (Line(
          points={{15.5636,-104.64},{38,-104.64},{38,-52},{1,-52},{1,-34.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.T_out,HeatExchanger. T_Out)
        annotation (Line(
          points={{-1.45455,-102.24},{-1.45455,-124},{40,-124},{40,3},{28.5,3}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(DemandFlowRate, nonCondensingTanklessHXController.mdot_water)
        annotation (Line(
          points={{-120,-60},{-60,-60},{-60,-95.2},{-1.45455,-95.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InletTemperature, HeatExchanger.T_Inlet) annotation (Line(
          points={{-120,8},{-78,8},{-78,15.4},{-31,15.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AmbientTemperature, HeatExchanger.T_amb) annotation (Line(
          points={{-120,80},{-78,80},{-78,27.8},{-31,27.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InletTemperature, nonCondensingTanklessHXController.T_Inlet)
        annotation (Line(
          points={{-120,8},{-78,8},{-78,-98.4},{-1.45455,-98.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pwrSig, nonCondensingTanklessHXController.PowerSignal) annotation (
          Line(
          points={{-120,-140},{-80,-140},{-80,-105.6},{-1.45455,-105.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(HeatExchanger.T_Out, T_Out) annotation (Line(
          points={{28.5,3},{66.25,3},{66.25,2},{110,2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.mdot_water_controlled,
        mdot_water_controlled) annotation (Line(
          points={{20.8727,-95.28},{62.4363,-95.28},{62.4363,-94},{110,-94}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-150},
                {100,100}}),            graphics), Icon(coordinateSystem(
              preserveAspectRatio=false,extent={{-100,-150},{100,100}}),
            graphics={Bitmap(
              extent={{-100,100},{98,-150}},
              imageSource=
                  ""
                   +
                  ""
                   +
                  "",
              fileName=
                  "modelica://WaterHeatingLibrary/../../../../../Pictures/TWH.png")}),
                  Documentation(info="<html>
              <p>
              This is a model of tankless water heater based on the multi-node model available in TRNSYS (Type 940). The default values are intended to mimic a Rinnai R75Lsi.
              More detailed documentation for the model can be found in the referenced material.
              </p>
              <p>
              The primary difference between this model and TRNSYS Type 940 is that this model uses a PID controller to determine the gas consumption rate while TRNSYS Type 940
              assumes a constant gas consumption rate equal to what isneeded under steady state conditions.
              </p>
              <h4>References</h4>
              <p>
              Evaluation of the Performance of Gas Tankless Water Heaters by Peter Grant, UMI Dissertation Publishing, 2011
              </p>
              </html>",
                  revisions="<html>
              <ul>
              <li>
              Mar 29, 2013 by Peter Grant<br>
              First implementation
              </li>
              </ul>
              </html>"));
    end NonCondensingTanklessHeater;

    model NonCondensingTanklessHeaterMediumModel

      replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
        "Fluid in the heater";

      HeatExchangers.NonCondensingMediumModel HX(
        Capacitance=Capacitance_input,
        SteadyStateEff=SteadyStateEff_input,
        UA=UA_input,
        nNode=nNode_input,
        EffPilot=EffPilot_input,
        Qdot_Pilot=Qdot_Pilot_input,
        Qdot_Rated=Qdot_Rated_input,
        redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{-2,24},{52,88}})));
      Modelica.Blocks.Interfaces.RealInput AmbientTemperature(unit = "K")
        annotation (Placement(transformation(extent={{-140,26},{-100,66}})));
      Modelica.Blocks.Interfaces.RealInput pwrSig
        annotation (Placement(transformation(extent={{-140,-160},{-100,-120}})));
      parameter Real Capacitance_input(unit = "J/K") = 18138.9
        "Capacitance of the heat exchanger";
      parameter Real SteadyStateEff_input=0.83
        "Unit efficiency at steady state";
      parameter Real UA_input(unit = "W/K")=13.6521
        "Coefficient describing heat loss to ambient";
      parameter Real T_Set_input(unit = "K") = 273.15 + 60 "Setpoint";
      parameter Real mdot_min_input(unit = "kg/s") = 0.043
        "Minimum water flow rate";
      parameter Real SpecificHeat_input(unit = "J/(kg.K)") = 4190
        "Specific heat of the fluid";
      parameter Real PID_P_input = 0.405891
        "Proportional value in the PID controller";
      parameter Modelica.SIunits.Time PID_I_input = 47597.1
        "Integral value in the PID controller";
      parameter Real PID_D_input(unit = "s") = 35.3539
        "Derivative value in the PID controller";
      parameter Integer nNode_input = 10
        "Number of segments in the heat exchanger";
      parameter Real EffPilot_input = 0.8 "Efficiency of the pilot light";
      parameter Real Qdot_Pilot_input(unit = "W") = 0
        "Energy consumption rate of the pilot light";
      parameter Real Qdot_Rated_input(unit = "W") = 55555
        "Energy consumed by the burner at max capacity";
    //  parameter Real EnergyDensityGas_input = 13500;
      parameter Real Qdot_min_input(unit = "W") = 5275
        "Minimum heat rate the burner will operate at";
      parameter Modelica.SIunits.Time t_short = 1.5
        "Start delay with a short time between draws";
      parameter Modelica.SIunits.Time t_long = 3
        "Start delay with a long time between draws";
      parameter Modelica.SIunits.Time t_switch = 30
        "Time between draws required for t_long";
      parameter Real QAct(unit = "W") = 50
        "Electric power consumed when the fan is operating";
      parameter Real QIdl(unit = "W") = 15
        "Electric power consumed when the fan is not operating";
      parameter Real mdot_min_deadband(unit = "kg/s") = 0.00416
        "Deadband on the minimum flow rate check";
      parameter Modelica.SIunits.Time StopDelay = 1
        "Delay between flow ceasing and heat transfer stopping";
      parameter Modelica.SIunits.Time ControlDelay = 2 "Control response delay";
      Modelica.Blocks.Interfaces.RealOutput T_Out(unit = "K")
        annotation (Placement(transformation(extent={{100,-8},{120,12}})));
      Modelica.Fluid.Interfaces.FluidPort_a colWatIn(redeclare package Medium
          = Medium)
        annotation (Placement(transformation(extent={{-34,-160},{-14,-140}}),
            iconTransformation(extent={{-34,-160},{-14,-140}})));
      Modelica.Fluid.Interfaces.FluidPort_b hotWatOut(redeclare package Medium
          = Medium)
        annotation (Placement(transformation(extent={{-70,-160},{-50,-140}}),
            iconTransformation(extent={{-70,-160},{-50,-140}})));
      Controllers.NonCondensingTanklessHXControllerMediumModel cont(
        redeclare package Medium = Medium,
        t_short=t_short,
        t_long=t_long,
        t_switch=t_switch,
        QAct=QAct,
        QIdl=QIdl,
        PID_P=PID_P_input,
        PID_I=PID_I_input,
        PID_D=PID_D_input,
        UA=UA_input,
        mdot_min_cons=mdot_min_input,
        Qdot_min_cons=Qdot_min_input,
        T_Set_cons=T_Set_input,
        SpecificHeat_cons=SpecificHeat_input,
        Qdot_Rated_cons=Qdot_Rated_input,
        SteadyStateEff_cons=SteadyStateEff_input,
        mdot_min_deadband=mdot_min_deadband,
        StopDelay=StopDelay,
        ControlDelay=ControlDelay)                annotation (Placement(
            transformation(
            extent={{-16,15},{16,-15}},
            rotation=0,
            origin={-34,77})));
      Modelica.Blocks.Interfaces.RealOutput maxMasFlo
        annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
      Modelica.Blocks.Interfaces.RealOutput Q_dot_in(unit="W")
        "Inlet heat rate"
        annotation (Placement(transformation(extent={{100,-110},{120,-90}})));
    equation
      connect(colWatIn, cont.port_a)
        annotation (Line(
          points={{-24,-150},{-78,-150},{-78,87.44},{-50.4655,87.44}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(cont.port_b, HX.port_a)
                              annotation (Line(
          points={{-17.4182,87.44},{-14,87.44},{-14,79.4667},{-2.36,79.4667}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(HX.port_b, hotWatOut)         annotation (Line(
          points={{52,79.4667},{62,79.4667},{62,80},{70,80},{70,-150},{-60,-150}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(AmbientTemperature, cont.TAmb)
        annotation (Line(
          points={{-120,46},{-88,46},{-88,90.8},{-52.3273,90.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(HX.T_Out, cont.T_out)
        annotation (Line(
          points={{55.24,56},{72,56},{72,-22},{-68,-22},{-68,77.36},{-52.3273,
              77.36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pwrSig, cont.PowerSignal)
        annotation (Line(
          points={{-120,-140},{-70,-140},{-70,82.4},{-52.3273,82.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AmbientTemperature, HX.T_amb)            annotation (Line(
          points={{-120,46},{-64,46},{-64,51.7333},{-5.6,51.7333}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(cont.ControlConstant, HX.ControlConstant)
                                       annotation (Line(
          points={{-25.0982,80.96},{-20,80.96},{-20,-6},{26.44,-6},{26.44,30.4}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(HX.T_Out, T_Out)            annotation (Line(
          points={{55.24,56},{82,56},{82,2},{110,2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(cont.maxMasFlo, maxMasFlo)
        annotation (Line(
          points={{-16.72,90.08},{76,90.08},{76,-60},{110,-60}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(HX.Q_dot_in, Q_dot_in) annotation (Line(
          points={{53.8,39.7867},{62,39.7867},{62,-100},{110,-100}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-150},
                {100,100}}),            graphics), Icon(coordinateSystem(
              preserveAspectRatio=false,extent={{-100,-150},{100,100}}),
            graphics={Bitmap(
              extent={{-98,94},{92,-142}},
              imageSource=
                  ""
                   +
                  ""
                   +
                  "",
              fileName=
                  "modelica://WaterHeatingLibrary/../../../../../Pictures/TWH.png")}),
                  defaultComponentName="nonCon",
                  Documentation(info="<html>
              <p>
              This model is a remake of NonCondensingTanklessHeater intended to make it more compatable with the Buildings library and other Modelica components. The model was
              changed to use fluid ports for the fluid inlet/outlet conditions instead of Real variables. Further development efforts will focus on his model and largely neglect
              NonCondensingTanklessHeater. The intent is that eventually NonCondensingTanklessHeater will be obsolete, deleted, and simply replaced with this model.
              </p>
              </html>",
                  revisions="<html>
              Mar 29, 2013 by Peter Grant:<br>
              First implementation
              </li>
              </ul>
              </html>"));
    end NonCondensingTanklessHeaterMediumModel;

    model NonCondSteadyState
      "Non-condensing tankless heater model with a constant signal controller"

      parameter Real Capacitance_input = 18138.9;
      parameter Real SteadyStateEff_input=0.83;
      parameter Real UA_input=13.6521;
      parameter Real T_Set_input = 60;
      parameter Real mdot_min_input = 0.043;
      parameter Real SpecificHeat_input = 4190;
      parameter Integer nNode_input = 10;
      parameter Real EffPilot_input = 0.8;
      parameter Real Qdot_Pilot_input = 0;
      parameter Real Qdot_Rated_input = 55555;
      parameter Real EnergyDensityGas_input = 13500;
      parameter Real Qdot_min_input = 5275;
      parameter Modelica.SIunits.Time t_short = 1.5
        "Start delay with a short time between draws";
      parameter Modelica.SIunits.Time t_long = 3
        "Start delay with a long time between draws";
      parameter Modelica.SIunits.Time t_switch = 30
        "Time between draws required for t_long";
      parameter Real QAct = 50
        "Electric power consumed when the fan is operating";
      parameter Real QIdl = 15
        "Electric power consumed when the fan is not operating";

      HeatExchangers.NonCondensing HeatExchanger(
        ConductionCoefficient=0.000001,
        Capacitance=Capacitance_input,
        SteadyStateEff=SteadyStateEff_input,
        UA=UA_input,
        T_Set=T_Set_input,
        nNode = nNode_input,
        EffPilot = EffPilot_input,
        Qdot_Pilot = Qdot_Pilot_input,
        Qdot_Rated = Qdot_Rated_input,
        SpecificHeat = SpecificHeat_input,
        EnergyDensityGas = EnergyDensityGas_input)
        annotation (Placement(transformation(extent={{-26,-30},{24,32}})));
      Controllers.ConstantGammaController
        nonCondensingTanklessHXController(
        mdot_min_cons=mdot_min_input,
        SpecificHeat_cons=SpecificHeat_input,
        SteadyStateEff_cons=SteadyStateEff_input,
        T_Set_cons=T_Set_input,
        Qdot_min_cons = Qdot_min_input)
        "A controller intended to mimic the control logic used in non-condensing tankless water heaters. Includes logic to avoid firing when the flow rate is too low or the require heat rate is too low. Also includes logic to reduce the flow rate when the required heat rate surpasses the heaters maximum heat rate"
        annotation (Placement(transformation(extent={{0,-114},{20,-94}})));
      Modelica.Blocks.Interfaces.RealInput DemandFlowRate
        annotation (Placement(transformation(extent={{-140,-82},{-100,-42}})));
      Modelica.Blocks.Interfaces.RealInput AmbientTemperature
        annotation (Placement(transformation(extent={{-140,58},{-100,98}})));
      Modelica.Blocks.Interfaces.RealInput InletTemperature
        annotation (Placement(transformation(extent={{-140,-14},{-100,26}})));
      Modelica.Blocks.Interfaces.RealInput pwrSig
        annotation (Placement(transformation(extent={{-140,-162},{-100,-122}})));
      Modelica.Blocks.Interfaces.RealOutput T_Out
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
    equation
      connect(nonCondensingTanklessHXController.mdot_water_controlled,HeatExchanger.
                      mdot_water) annotation (Line(
          points={{20.8727,-97.28},{20.8727,-73.05},{-31,-73.05},{-31,1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.ControlConstant,HeatExchanger. ControlConstant)
        annotation (Line(
          points={{15.5636,-106.64},{38,-106.64},{38,-54},{1,-54},{1,-36.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.T_out,HeatExchanger. T_Out)
        annotation (Line(
          points={{-1.45455,-104.24},{-1.45455,-126},{40,-126},{40,1},{28.5,1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(DemandFlowRate,nonCondensingTanklessHXController. mdot_water)
        annotation (Line(
          points={{-120,-62},{-60,-62},{-60,-97.2},{-1.45455,-97.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InletTemperature,HeatExchanger. T_Inlet) annotation (Line(
          points={{-120,6},{-78,6},{-78,13.4},{-31,13.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AmbientTemperature,HeatExchanger. T_amb) annotation (Line(
          points={{-120,78},{-78,78},{-78,25.8},{-31,25.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InletTemperature,nonCondensingTanklessHXController. T_Inlet)
        annotation (Line(
          points={{-120,6},{-78,6},{-78,-100.4},{-1.45455,-100.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pwrSig,nonCondensingTanklessHXController. PowerSignal) annotation (
          Line(
          points={{-120,-142},{-80,-142},{-80,-107.6},{-1.45455,-107.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(HeatExchanger.T_Out,T_Out)  annotation (Line(
          points={{28.5,1},{66.25,1},{66.25,0},{110,0}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -150},{100,100}})), Icon(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-150},{100,100}})),
              Documentation(info="<html>
          <p>
          This model uses a steady state control signal controller, similar to the one implemented in TRNSYS Type 940. The only difference between this model and
          NonCondensingTanklessHeater is how the control signal is calculated (uses a different controller model).<br>
          </p>
          </html>",
              revisions="<html>
          <ul>
          <li>
          Mar 29, 2013 by Peter Grant:<br>
          First implementation
          </li>
          </ul>
          </html>"));
    end NonCondSteadyState;

    model NonCondSteadyStateIntegrators
      "NonCondSS with integrators for QUse and QIn added"

      parameter Real Capacitance_input = 18138.9;
      parameter Real SteadyStateEff_input=0.83;
      parameter Real UA_input=13.6521;
      parameter Real T_Set_input = 60;
      parameter Real mdot_min_input = 0.043;
      parameter Real SpecificHeat_input = 4190;
      parameter Integer nNode_input = 10;
      parameter Real EffPilot_input = 0.8;
      parameter Real Qdot_Pilot_input = 0;
      parameter Real Qdot_Rated_input = 55555;
      parameter Real EnergyDensityGas_input = 13500;
      parameter Real Qdot_min_input = 5275;
      parameter Modelica.SIunits.Time t_short = 1.5
        "Start delay with a short time between draws";
      parameter Modelica.SIunits.Time t_long = 3
        "Start delay with a long time between draws";
      parameter Modelica.SIunits.Time t_switch = 30
        "Time between draws required for t_long";
      parameter Real QAct = 50
        "Electric power consumed when the fan is operating";
      parameter Real QIdl = 15
        "Electric power consumed when the fan is not operating";

      HeatExchangers.NonCondensing HeatExchanger(
        ConductionCoefficient=0.000001,
        Capacitance=Capacitance_input,
        SteadyStateEff=SteadyStateEff_input,
        UA=UA_input,
        T_Set=T_Set_input,
        nNode = nNode_input,
        EffPilot = EffPilot_input,
        Qdot_Pilot = Qdot_Pilot_input,
        Qdot_Rated = Qdot_Rated_input,
        SpecificHeat = SpecificHeat_input,
        EnergyDensityGas = EnergyDensityGas_input)
        annotation (Placement(transformation(extent={{-26,-30},{24,32}})));
      Controllers.ConstantGammaController
        nonCondensingTanklessHXController(
        mdot_min_cons=mdot_min_input,
        SpecificHeat_cons=SpecificHeat_input,
        SteadyStateEff_cons=SteadyStateEff_input,
        T_Set_cons=T_Set_input,
        Qdot_min_cons = Qdot_min_input,
        t_short=0,
        t_long=0,
        t_switch=0)
        "A controller intended to mimic the control logic used in non-condensing tankless water heaters. Includes logic to avoid firing when the flow rate is too low or the require heat rate is too low. Also includes logic to reduce the flow rate when the required heat rate surpasses the heaters maximum heat rate"
        annotation (Placement(transformation(extent={{0,-114},{20,-94}})));
      Modelica.Blocks.Interfaces.RealInput DemandFlowRate
        annotation (Placement(transformation(extent={{-140,-82},{-100,-42}})));
      Modelica.Blocks.Interfaces.RealInput AmbientTemperature
        annotation (Placement(transformation(extent={{-140,58},{-100,98}})));
      Modelica.Blocks.Interfaces.RealInput InletTemperature
        annotation (Placement(transformation(extent={{-140,-14},{-100,26}})));
      Modelica.Blocks.Interfaces.RealInput pwrSig
        annotation (Placement(transformation(extent={{-140,-162},{-100,-122}})));
      Modelica.Blocks.Interfaces.RealOutput T_Out
        annotation (Placement(transformation(extent={{150,-10},{170,10}})));
      Modelica.Blocks.Math.Product product1
        annotation (Placement(transformation(extent={{84,-90},{104,-70}})));
      Modelica.Blocks.Continuous.Integrator QInInt
        annotation (Placement(transformation(extent={{120,-90},{140,-70}})));
      Modelica.Blocks.Sources.Constant const(k=Qdot_Rated_input)
        annotation (Placement(transformation(extent={{52,-58},{72,-38}})));
      Modelica.Blocks.Sources.Constant const1(k=SpecificHeat_input)
        annotation (Placement(transformation(extent={{28,-170},{48,-150}})));
      Modelica.Blocks.Math.Add add(k2=-1)
        annotation (Placement(transformation(extent={{60,-146},{80,-126}})));
      Modelica.Blocks.Continuous.Integrator QUseInt
        annotation (Placement(transformation(extent={{128,-152},{148,-132}})));
      Modelica.Blocks.Math.MultiProduct multiProduct(nu=4)
        annotation (Placement(transformation(extent={{94,-148},{106,-136}})));
      Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqualThreshold(threshold=
           T_Set_input - 2.78)
        annotation (Placement(transformation(extent={{-22,-192},{-2,-172}})));
      Modelica.Blocks.Math.BooleanToReal booleanToReal
        annotation (Placement(transformation(extent={{54,-192},{74,-172}})));
    equation
      connect(nonCondensingTanklessHXController.mdot_water_controlled,HeatExchanger.
                      mdot_water) annotation (Line(
          points={{20.8727,-97.28},{20.8727,-73.05},{-31,-73.05},{-31,1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.ControlConstant,HeatExchanger. ControlConstant)
        annotation (Line(
          points={{15.5636,-106.64},{38,-106.64},{38,-54},{1,-54},{1,-36.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.T_out,HeatExchanger. T_Out)
        annotation (Line(
          points={{-1.45455,-104.24},{-1.45455,-126},{40,-126},{40,1},{28.5,1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(DemandFlowRate,nonCondensingTanklessHXController. mdot_water)
        annotation (Line(
          points={{-120,-62},{-60,-62},{-60,-97.2},{-1.45455,-97.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InletTemperature,HeatExchanger. T_Inlet) annotation (Line(
          points={{-120,6},{-78,6},{-78,13.4},{-31,13.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AmbientTemperature,HeatExchanger. T_amb) annotation (Line(
          points={{-120,78},{-78,78},{-78,25.8},{-31,25.8}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InletTemperature,nonCondensingTanklessHXController. T_Inlet)
        annotation (Line(
          points={{-120,6},{-78,6},{-78,-100.4},{-1.45455,-100.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pwrSig,nonCondensingTanklessHXController. PowerSignal) annotation (
          Line(
          points={{-120,-142},{-80,-142},{-80,-107.6},{-1.45455,-107.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(HeatExchanger.T_Out,T_Out)  annotation (Line(
          points={{28.5,1},{66.25,1},{66.25,0},{160,0}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.ControlConstant, product1.u2)
        annotation (Line(
          points={{15.5636,-106.64},{66,-106.64},{66,-86},{82,-86}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(const.y, product1.u1) annotation (Line(
          points={{73,-48},{78,-48},{78,-74},{82,-74}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(product1.y, QInInt.u) annotation (Line(
          points={{105,-80},{118,-80}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(HeatExchanger.T_Out, add.u1) annotation (Line(
          points={{28.5,1},{40,1},{40,-130},{58,-130}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InletTemperature, add.u2) annotation (Line(
          points={{-120,6},{-78,6},{-78,-142},{58,-142}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(multiProduct.y, QUseInt.u) annotation (Line(
          points={{107.02,-142},{126,-142}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(add.y, multiProduct.u[1]) annotation (Line(
          points={{81,-136},{88,-136},{88,-138.85},{94,-138.85}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(const1.y, multiProduct.u[2]) annotation (Line(
          points={{49,-160},{88,-160},{88,-140.95},{94,-140.95}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(DemandFlowRate, multiProduct.u[3]) annotation (Line(
          points={{-120,-62},{-60,-62},{-60,-152},{84,-152},{84,-143.05},{94,
              -143.05}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(HeatExchanger.T_Out, greaterEqualThreshold.u) annotation (Line(
          points={{28.5,1},{42,1},{42,42},{-48,42},{-48,-182},{-24,-182}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(greaterEqualThreshold.y, booleanToReal.u) annotation (Line(
          points={{-1,-182},{52,-182}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(booleanToReal.y, multiProduct.u[4]) annotation (Line(
          points={{75,-182},{86,-182},{86,-145.15},{94,-145.15}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.TAmb, AmbientTemperature)
        annotation (Line(
          points={{-1.45455,-111.6},{-86,-111.6},{-86,78},{-120,78}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(nonCondensingTanklessHXController.u, HeatExchanger.Qdot_Environment)
        annotation (Line(
          points={{-1.45455,-94},{-8,-94},{-8,-66},{44,-66},{44,-11.4},{26.5,
              -11.4}},
          color={0,0,127},
          smooth=Smooth.None));

      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -200},{150,100}}), graphics),
                                    Icon(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-200},{150,100}})),
              Documentation(info="<html>
          <p>
          This model was developed specifically for collaboration with Jay Burch, NREL. It is the same as NonCondSteadyState, but integrators were added to collect specific
          data for the collaboration.
          </p>
          </html>"));
    end NonCondSteadyStateIntegrators;

    package HeatExchangers
      "A library of heat exchangers modeling the behavior of different kinds of tankless water heaters"
      model NonCondensing
        "A model representing a standard heat exchanger in a tankless water heaterVersion 1.0 - Date: 4/27/2012 - Created by PGrant based on his thesis"
        parameter Real Capacitance(unit = "J/K") = 8360
          "Thermal capacitance of the heat exchanger";
        parameter Real SteadyStateEff = 0.82
          "Heater efficiency at steady state";
        parameter Real UA(unit = "W/K") = 3.6
          "Coefficient describing heat loss to ambient conditions";
        parameter Real ConductionCoefficient(unit = "W/K") = 0.1
          "Coefficient characterizing the conduction of heat in the heat exchanger";
        parameter Integer nNode = 10
          "Number of nodes the heat exchanger is broken into";
        parameter Real EffPilot = 0.8 "Efficiency of the pilot light";
        parameter Real Qdot_Pilot(unit = "W") = 0
          "Input heat rate of the pilot light";
        parameter Real Qdot_Rated(unit = "W") = 55555
          "Rated capacity of the main burner";
      //  parameter Real T_amb(unit = "C") = 20
      //    "Ambient temperature around the water heater";
        parameter Real SpecificHeat(unit = "J/(kg.K)") = 4190
          "Specific heat of the fluid being heated";
        parameter Real T_Set(unit = "K") = 55
          "Set temperature of the tankless heater";
      //  parameter Real T_Inlet(unit = "C") = 20 "Entering water temperature";
        parameter Real EnergyDensityGas(unit = "W/kg") = 13500;
        Real T_Node[nNode](unit = "K", each start = 273.15+20);
        Real a[nNode];
        Real b[nNode];
        Real Qdot_Delivered(unit = "W");
        Real Qdot_Env[nNode](unit = "W");
      //  Real Qdot_Environment(unit = "W");
        Real Q_Stored(unit = "J");
        Real AvgTemp(unit = "K");
        Real Qdot_in(unit = "W");
        Real mdot_g(unit = "kg/hr");
        Real Qdot_Stored( unit = "W");
        Real Qdot_Flue(unit = "W");
        Modelica.Blocks.Interfaces.RealInput mdot_water(unit = "kg/s")
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput ControlConstant
                                                            annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={8,-120})));
        Modelica.Blocks.Interfaces.RealOutput T_Out(unit = "K")
          annotation (Placement(transformation(extent={{100,-18},{136,18}})));
        Modelica.Blocks.Interfaces.RealInput T_amb(unit = "K")
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput T_Inlet(unit = "K")
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealOutput Qdot_Environment(unit = "W")
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
      equation
      if (nNode > 1) then
        a[1] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
        b[1] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Inlet * nNode + ConductionCoefficient * (T_Node[2] + T_Inlet) * nNode + UA * T_amb);
        a[nNode] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + ConductionCoefficient * nNode + UA);
        b[nNode] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Node[nNode-1] * nNode + ConductionCoefficient * T_Node[nNode-1] * nNode + UA * T_amb);
        for i in 2:nNode - 1 loop
          a[i] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
          b[i] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Node[i-1] * nNode + ConductionCoefficient * (T_Node[i+1] + T_Node[i-1]) * nNode + UA * T_amb);
        end for;
      else
        a[1] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
        b[1] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Inlet * nNode + ConductionCoefficient * (T_Out + T_Inlet) * nNode + UA * T_amb);
      end if;
      for i in 1:nNode loop
        der(T_Node[i]) = a[i] * T_Node[i] + b[i];
        Qdot_Env[i] = UA/nNode * (T_Node[i] - T_amb);
      end for;
      Qdot_Environment = sum(Qdot_Env[1:nNode]); //Sums up the environmental losses from all nodes into one cumulative Qdot_Env
      Qdot_in = Qdot_Pilot + Qdot_Rated * ControlConstant;
      T_Out = T_Node[nNode];
      Qdot_Delivered = mdot_water * SpecificHeat * (T_Out - T_Inlet);
      Q_Stored = Capacitance * sum(T_Node[1:nNode])/nNode;
      Qdot_Stored = der(Q_Stored);
      Qdot_Flue = Qdot_in -Qdot_Environment - Qdot_Delivered - Qdot_Stored;
      AvgTemp = sum(T_Node[1:nNode])/nNode;
      if ControlConstant > 0 then
        mdot_g = ControlConstant * Qdot_Rated / EnergyDensityGas;
      else
        mdot_g = 0.001;
      end if;
        annotation (Diagram(graphics), Icon(graphics={Bitmap(extent={{-100,98},{100,-100}},
                  fileName="//vmware-host/Shared Folders/Downloads/HeatExchanger.jpg")}),
                    Diagram(graphics),
                    Documentation(info="<html>
              <p>
              A model of the heat exchanger common in a non-condensing tankless water heater. Identifies the tempreature of the water at various points in the the heat exchanger
              based on heat flows. More detailed documentation is provided in the reference material.
              </p>
              <h4>References</h4>
              <p>
              Evaluation of the Performance of Gas Tankless Water Heaters by Peter Grant, UMI Dissertation Publishing, 2011
              </p>
              </html>",
                    revisions="<html>
              <ul>
              <li>
              Mar 29, 2013 by Peter Grant:<br>
              First implementation
              </li>
              </ul>
              </html>"));
      end NonCondensing;

      model NonCondensingMediumModel
        "A modification of NonCondensing to use the water medium model and fluid ports instead of real inputs"
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Fluid in the heater";
        parameter Real Capacitance(unit = "J/K") = 8360
          "Thermal capacitance of the heat exchanger";
        parameter Real SteadyStateEff = 0.82
          "Heater efficiency at steady state";
        parameter Real UA(unit = "W/K") = 3.6
          "Coefficient describing heat loss to ambient conditions";

        parameter Integer nNode = 10
          "Number of nodes the heat exchanger is broken into";
        parameter Real EffPilot = 0.8 "Efficiency of the pilot light";
        parameter Real Qdot_Pilot(unit = "W") = 0
          "Input heat rate of the pilot light";
        parameter Real Qdot_Rated(unit = "W") = 55555
          "Rated capacity of the main burner";

        Modelica.Blocks.Interfaces.RealInput ControlConstant
                                                            annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={8,-120})));
        Modelica.Blocks.Interfaces.RealOutput T_Out(unit = "K")
          annotation (Placement(transformation(extent={{150,-18},{186,18}})));
        Modelica.Blocks.Interfaces.RealInput T_amb(unit = "K")
          annotation (Placement(transformation(extent={{-190,-40},{-150,0}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium
            = Medium)
          annotation (Placement(transformation(extent={{-162,100},{-142,120}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium
            = Medium)
          annotation (Placement(transformation(extent={{140,100},{160,120}})));
        Modelica.Blocks.Sources.Constant const(k=SteadyStateEff)
          annotation (Placement(transformation(extent={{-62,-48},{-42,-28}})));
        Modelica.Blocks.Sources.Constant const1(k=Qdot_Rated/nNode)
          annotation (Placement(transformation(extent={{-62,-78},{-42,-58}})));
        Modelica.Blocks.Math.MultiProduct multiProduct(nu=3) annotation (Placement(
              transformation(
              extent={{-6,-6},{6,6}},
              rotation=90,
              origin={0,-22})));
        Buildings.Fluid.Sensors.Temperature senTem(redeclare package Medium =
              Medium)
          annotation (Placement(transformation(extent={{110,10},{130,-10}})));
        Modelica.Blocks.Routing.Replicator replicator1(nout=nNode) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,4})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow heaAdd[nNode]
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,34})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temSen1[nNode]
          annotation (Placement(transformation(extent={{-40,54},{-60,74}})));
        Modelica.Blocks.Math.Add add[nNode](each k1=-1)
          annotation (Placement(transformation(extent={{-128,14},{-108,34}})));
        Modelica.Blocks.Routing.Replicator replicator(nout=nNode) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-134,0})));
        Modelica.Blocks.Sources.Constant const2[nNode](each k=UA/nNode)
          annotation (Placement(transformation(extent={{-118,-14},{-98,6}})));
        Modelica.Blocks.Math.Product product1[nNode]
          annotation (Placement(transformation(extent={{-90,8},{-70,28}})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow UALos[nNode]
          annotation (Placement(transformation(extent={{-50,8},{-30,28}})));
        Modelica.Thermal.HeatTransfer.Components.HeatCapacitor heatCapacitor[nNode](each C=
             Capacitance/nNode)
          annotation (Placement(transformation(extent={{36,78},{56,58}})));
        Buildings.Fluid.MixingVolumes.MixingVolume vol[nNode](
          each nPorts=2,
          redeclare package Medium = Medium,
          each m_flow_nominal=0.06,
          each V=0.000000001/nNode)
          annotation (Placement(transformation(extent={{14,104},{-6,84}})));

      protected
        Modelica.Blocks.Math.Product product2
          annotation (Placement(transformation(extent={{90,-86},{110,-66}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=Qdot_Rated)
          annotation (Placement(transformation(extent={{44,-80},{64,-60}})));
      public
        Modelica.Blocks.Interfaces.RealOutput Q_dot_in(unit="W")
          "Used heat rate"
          annotation (Placement(transformation(extent={{150,-86},{170,-66}})));
      equation

        connect(multiProduct.u[1], const.y) annotation (Line(
            points={{-2.8,-28},{-2,-28},{-2,-38},{-41,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, multiProduct.u[2]) annotation (Line(
            points={{-41,-68},{-6.66134e-16,-68},{-6.66134e-16,-28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ControlConstant, multiProduct.u[3]) annotation (Line(
            points={{8,-120},{8,-66},{2.8,-66},{2.8,-28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senTem.T, T_Out) annotation (Line(
            points={{127,0},{168,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(multiProduct.y, replicator1.u) annotation (Line(
            points={{0,-14.98},{0,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator1.y, heaAdd.Q_flow) annotation (Line(
            points={{0,15},{0,24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.u, T_amb) annotation (Line(
            points={{-134,-12},{-134,-20},{-170,-20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(replicator.y, add.u2) annotation (Line(
            points={{-134,11},{-134,18},{-130,18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.u1, temSen1.T) annotation (Line(
            points={{-130,30},{-138,30},{-138,64},{-60,64}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, product1.u1) annotation (Line(
            points={{-107,24},{-92,24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const2.y, product1.u2) annotation (Line(
            points={{-97,-4},{-92,-4},{-92,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y, UALos.Q_flow) annotation (Line(
            points={{-69,18},{-50,18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(temSen1.port, vol.heatPort) annotation (Line(
            points={{-40,64},{18,64},{18,94},{14,94}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(heaAdd.port, vol.heatPort) annotation (Line(
            points={{0,44},{0,60},{18,60},{18,94},{14,94}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(heatCapacitor.port, vol.heatPort) annotation (Line(
            points={{46,78},{46,94},{14,94}},
            color={191,0,0},
            smooth=Smooth.None));

        connect(port_a, vol[1].ports[1]) annotation (Line(
            points={{-152,110},{6,110},{6,104}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(vol[nNode].ports[2], port_b) annotation (Line(
            points={{2,104},{6,104},{6,110},{150,110}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(port_b, senTem.port) annotation (Line(
            points={{150,110},{120,110},{120,10}},
            color={0,127,255},
            smooth=Smooth.None));
         for i in 2:nNode loop
           connect(vol[i-1].ports[2],vol[i].ports[1]);
         end for;

        connect(UALos.port, vol.heatPort) annotation (Line(
            points={{-30,18},{-20,18},{-20,64},{18,64},{18,94},{14,94}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(ControlConstant, product2.u2) annotation (Line(
            points={{8,-120},{8,-82},{88,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, product2.u1) annotation (Line(
            points={{65,-70},{88,-70}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product2.y, Q_dot_in) annotation (Line(
            points={{111,-76},{160,-76}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-150,
                  -150},{150,150}}),
                            graphics), Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-150,-150},{150,150}}),
                                            graphics={Bitmap(extent={{-100,98},{100,-100}},
                  fileName="//vmware-host/Shared Folders/Downloads/HeatExchanger.jpg")}),
                    Diagram(graphics),
                    Documentation(info="<html>
              <p>
              This model is a modification of the NonCondensing heat exchanger model. The modifications are intended to make the model compatible with the Buildings library, and
              other more advanced implementations of Modelica components. The primary instance of this is changing the model to describe the fluid using stream connectors, and
              Buildings library fluid components rather than Real variable. The intent is that eventually this model will replace NonCondensing as the primary heat exchanger
              model for non condensing tankless heaters.
              </p>
              </html>",
                    revisions="<html>
              <ul>
              <li>
              Mar 29, 2013 by Peter Grant:<br>
              First implementation
              </li>
              </ul>
              </html>"));
      end NonCondensingMediumModel;

      package Examples
        model NonCondensingMediumModel
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.NonCondensingTankless.HeatExchangers.NonCondensingMediumModel
            nonCondensingMediumModel(redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater)
            annotation (Placement(transformation(extent={{38,-40},{58,-20}})));
          WaterHeatingLibrary.NonCondensingTankless.HeatExchangers.NonCondensing
            nonCondensing
            annotation (Placement(transformation(extent={{38,30},{58,50}})));
          Modelica.Blocks.Sources.Constant TAmb(k=293.15)
            annotation (Placement(transformation(extent={{-84,28},{-64,48}})));
          Modelica.Blocks.Sources.Constant TIn(k=288.15)
            annotation (Placement(transformation(extent={{-84,-2},{-64,18}})));
          Modelica.Blocks.Sources.Constant mDot(k=0.063) annotation (Placement(
                transformation(extent={{-84,-34},{-64,-14}})));
          Modelica.Blocks.Sources.Constant Control(k=0.25) annotation (
              Placement(transformation(extent={{-84,-78},{-64,-58}})));
          Buildings.Fluid.Sources.MassFlowSource_T boundary(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            use_m_flow_in=true,
            use_T_in=true,
            nPorts=1)
            annotation (Placement(transformation(extent={{-16,-28},{4,-8}})));
          Buildings.Fluid.Sources.Boundary_pT boundary1(nPorts=1, redeclare
              package Medium = Buildings.Media.ConstantPropertyLiquidWater)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={84,-30})));
        equation
          connect(TAmb.y, nonCondensing.T_amb) annotation (Line(
              points={{-63,38},{-44,38},{-44,48},{36,48}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TAmb.y, nonCondensingMediumModel.T_amb) annotation (Line(
              points={{-63,38},{-52,38},{-52,-31.3333},{36.6667,-31.3333}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Control.y, nonCondensingMediumModel.ControlConstant)
            annotation (Line(
              points={{-63,-68},{48.5333,-68},{48.5333,-38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(Control.y, nonCondensing.ControlConstant) annotation (Line(
              points={{-63,-68},{72,-68},{72,20},{48.8,20},{48.8,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TIn.y, nonCondensing.T_Inlet) annotation (Line(
              points={{-63,8},{-38,8},{-38,44},{36,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDot.y, nonCondensing.mdot_water) annotation (Line(
              points={{-63,-24},{-30,-24},{-30,40},{36,40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDot.y, boundary.m_flow_in) annotation (Line(
              points={{-63,-24},{-30,-24},{-30,-10},{-16,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TIn.y, boundary.T_in) annotation (Line(
              points={{-63,8},{-38,8},{-38,-14},{-18,-14}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(boundary.ports[1], nonCondensingMediumModel.port_a)
            annotation (Line(
              points={{4,-18},{26,-18},{26,-22.6667},{37.8667,-22.6667}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(boundary1.ports[1], nonCondensingMediumModel.port_b)
            annotation (Line(
              points={{74,-30},{66,-30},{66,-22.6667},{58,-22.6667}},
              color={0,127,255},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end NonCondensingMediumModel;
      end Examples;
    end HeatExchangers;

    package Controllers
      "A library of controllers used to model the behavior of different tankless water heaters"
      model NonCondensingTanklessHXController
        "Control Module for Non-Condensing Tankless Water Heaters"
      //Debugging notes: Need to work with PID Controller. Does not seem to work...at all
        Modelica.Blocks.Interfaces.RealInput T_out(unit = "K")
         annotation (Placement(transformation(extent={{-140,-48},{-100,-8}})));
        Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-66,6},{-46,26}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{-68,44},{-48,64}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{-42,38},{-22,58}})));
        Modelica.Blocks.Interfaces.RealOutput mdot_water_controlled(unit = "kg/s")
          annotation (Placement(transformation(extent={{172,44},{202,74}})));
        Modelica.Blocks.Interfaces.RealOutput ControlConstant annotation (Placement(
              transformation(extent={{176,-52},{204,-24}}), iconTransformation(extent={{100,-72},
                  {128,-44}})));
        Modelica.Blocks.Math.Product product2
          annotation (Placement(transformation(extent={{46,50},{66,70}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal1
          annotation (Placement(transformation(extent={{22,38},{42,58}})));
        Modelica.Blocks.Continuous.LimPID
                                       PID(
          y_start=PID_y_start,
          Ti=PID_I,
          Td=PID_D,
          yMax=1,
          yMin=0,
          controllerType=Modelica.Blocks.Types.SimpleController.PID,
          Ni=0.9,
          k=PID_P)
          annotation (Placement(transformation(extent={{-16,-36},{4,-16}})));
        Modelica.Blocks.Math.Product product3
          annotation (Placement(transformation(extent={{74,-42},{94,-22}})));
        BaseClasses.NoncondensingTanklessHighFlowControl
                        FlowRateControl(
          SteadyStateEff=SteadyStateEff_cons,
          Qdot_Rated=Qdot_Rated_cons,
          SpecificHeat=SpecificHeat_cons,
          T_Set=T_Set_cons)
          annotation (Placement(transformation(extent={{20,-8},{40,12}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual1
          annotation (Placement(transformation(extent={{-8,26},{12,46}})));
        Modelica.Blocks.Interfaces.RealInput mdot_water(unit = "kg/s")
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
       parameter Real mdot_min_cons(unit = "kg/s") = 0.252
          "Minimum flow rate of the tankless heater";
       parameter Real Qdot_min_cons(unit = "W") = 5275
          "Minimum heat rate of the tankless heater";
       parameter Real T_Set_cons(unit = "K") = 55 "Set Temperature";
       parameter Real SpecificHeat_cons(unit = "J/(kg.K)") = 4190
          "Specific heat of the fluid being heated";
       parameter Real Qdot_Rated_cons(unit = "W") = 55555
          "Raed heat input rate of the tankless heater";
       parameter Real SteadyStateEff_cons = 0.82
          "Efficiency of the heater at steady state";
       parameter Modelica.SIunits.Time PID_P = 1
          "Proportional value of the PID controller";
       parameter Modelica.SIunits.Time PID_I = 1
          "Integral value of the PID controller";
       parameter Modelica.SIunits.Time PID_D = 1
          "Derivative value of the PID controller";
       parameter Real PID_y_start = 0.666;
       parameter Modelica.SIunits.Time t_short = 1.5
          "Start delay with a short time between draws";
       parameter Modelica.SIunits.Time t_long = 3
          "Start delay with a long time between draws";
       parameter Modelica.SIunits.Time t_switch = 30
          "Time between draws required for t_long";
       parameter Real QAct(unit = "W") = 50
          "Electric power consumed when the fan is operating";
       parameter Real QIdl(unit = "W") = 15
          "Electric power consumed when the fan is not operating";
       parameter Modelica.SIunits.Time StopDelay
          "Delay between water flow ceasing and heat flow stopping";
        Modelica.Blocks.Sources.RealExpression SpecificHeat(y=SpecificHeat_cons)
          annotation (Placement(transformation(extent={{-98,20},{-78,40}})));
        Modelica.Blocks.Sources.RealExpression T_Set(y=T_Set_cons)
          annotation (Placement(transformation(extent={{-98,-24},{-78,-4}})));
        Modelica.Blocks.Sources.RealExpression Qdot_min(y=Qdot_min_cons)
          annotation (Placement(transformation(extent={{-38,6},{-18,26}})));
        Modelica.Blocks.Math.Min min
          annotation (Placement(transformation(extent={{20,-42},{40,-22}})));
        Modelica.Blocks.Sources.RealExpression ControlConstantMaximum(y=1)
          annotation (Placement(transformation(extent={{-18,-60},{2,-40}})));
        Modelica.Blocks.Math.Max max
          annotation (Placement(transformation(extent={{48,-48},{68,-28}})));
        Modelica.Blocks.Sources.RealExpression ControlConstantMinimum(y=0)
          annotation (Placement(transformation(extent={{20,-70},{40,-50}})));
        Modelica.Blocks.Interfaces.RealInput T_Inlet(unit = "K")
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput PowerSignal
          annotation (Placement(transformation(extent={{-140,-90},{-100,-50}})));
        Modelica.Blocks.Math.Product product4
          annotation (Placement(transformation(extent={{110,-48},{130,-28}})));
        BaseClasses.StartDelay
                   startDelay(
          t_short=t_short,
          t_long=t_long,
          t_switch=t_switch)
          annotation (Placement(transformation(extent={{76,-96},{96,-76}})));
        Modelica.Blocks.Math.Product product5
          annotation (Placement(transformation(extent={{140,-84},{160,-64}})));
        Modelica.Blocks.Math.Product product6
          annotation (Placement(transformation(extent={{106,-116},{126,-96}})));
        Modelica.Blocks.Sources.Constant QFan(k=QAct)
          annotation (Placement(transformation(extent={{34,-112},{54,-92}})));
        Modelica.Blocks.Sources.Constant QCon(k=QIdl)
          annotation (Placement(transformation(extent={{34,-144},{54,-124}})));
        Modelica.Blocks.Interfaces.RealOutput QElec(unit = "W")
          annotation (Placement(transformation(extent={{176,-122},{196,-102}})));
        Modelica.Blocks.Math.Max max1
          annotation (Placement(transformation(extent={{138,-122},{158,-102}})));
        BaseClasses.mDotMinCheck mDotMinCheck(mDot_min_cons=mdot_min_cons,
            stopDelay=StopDelay)
          annotation (Placement(transformation(extent={{-80,72},{-40,92}})));
      equation
        connect(T_Set.y, add.u2) annotation (Line(
            points={{-77,-14},{-68,-14},{-68,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, product1.u1) annotation (Line(
            points={{-47,54},{-44,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, product1.u2) annotation (Line(
            points={{-45,16},{-44,16},{-44,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(booleanToReal1.y, product2.u2) annotation (Line(
            points={{43,48},{44,48},{44,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.u1, product2.y) annotation (Line(
            points={{72,-26},{72,60},{67,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FlowRateControl.mdot_water_controlled, mdot_water_controlled)
          annotation (Line(
            points={{41.9,8.1},{126.95,8.1},{126.95,59},{187,59}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greaterEqual1.y, booleanToReal1.u) annotation (Line(
            points={{13,36},{16,36},{16,48},{20,48}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(product1.y, greaterEqual1.u1) annotation (Line(
            points={{-21,48},{-16,48},{-16,36},{-10,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Qdot_min.y, greaterEqual1.u2) annotation (Line(
            points={{-17,16},{-10,16},{-10,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y,FlowRateControl. Qdot_Required) annotation (Line(
            points={{-21,48},{-20,48},{-20,34},{-40,34},{-40,8},{18,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, product.u1) annotation (Line(
            points={{-120,60},{-70,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water,FlowRateControl. mdot_water) annotation (Line(
            points={{-120,60},{-99,60},{-99,0},{18,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SpecificHeat.y, product.u2) annotation (Line(
            points={{-77,30},{-74,30},{-74,48},{-70,48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PID.y, min.u1) annotation (Line(
            points={{5,-26},{8,-26},{8,-32},{12,-32},{12,-26},{18,-26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ControlConstantMaximum.y, min.u2) annotation (Line(
            points={{3,-50},{10,-50},{10,-38},{18,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(min.y, max.u1) annotation (Line(
            points={{41,-32},{42,-32},{42,-38},{44,-38},{44,-32},{46,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max.y, product3.u2) annotation (Line(
            points={{69,-38},{70,-38},{70,-38},{72,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ControlConstantMinimum.y, max.u2) annotation (Line(
            points={{41,-60},{42,-60},{42,-44},{46,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Inlet, add.u1) annotation (Line(
            points={{-120,20},{-94,20},{-94,22},{-68,22}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Inlet, FlowRateControl.T_Inlet) annotation (Line(
            points={{-120,20},{-94,20},{-94,4},{18,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PowerSignal, FlowRateControl.PowerSignal) annotation (Line(
            points={{-120,-70},{-40,-70},{-40,-4},{18,-4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PowerSignal, product4.u2) annotation (Line(
            points={{-120,-70},{94,-70},{94,-44},{108,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y, product4.u1) annotation (Line(
            points={{95,-32},{108,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Set.y, PID.u_s) annotation (Line(
            points={{-77,-14},{-30,-14},{-30,-26},{-18,-26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_out, PID.u_m) annotation (Line(
            points={{-120,-28},{-30,-28},{-30,-44},{-6,-44},{-6,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, startDelay.mDotDra) annotation (Line(
            points={{-120,60},{-98,60},{-98,-86},{75,-86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product5.u2) annotation (Line(
            points={{96.5,-86},{120,-86},{120,-80},{138,-80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product4.y, product5.u1) annotation (Line(
            points={{131,-38},{132,-38},{132,-68},{138,-68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product5.y, ControlConstant) annotation (Line(
            points={{161,-74},{164,-74},{164,-38},{190,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product6.u1) annotation (Line(
            points={{96.5,-86},{100,-86},{100,-100},{104,-100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QFan.y, product6.u2) annotation (Line(
            points={{55,-102},{80,-102},{80,-112},{104,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product6.y, max1.u1) annotation (Line(
            points={{127,-106},{136,-106}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QCon.y, max1.u2) annotation (Line(
            points={{55,-134},{124,-134},{124,-118},{136,-118}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QElec, QElec) annotation (Line(
            points={{186,-112},{186,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max1.y, QElec) annotation (Line(
            points={{159,-112},{186,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, mDotMinCheck.mDotDra) annotation (Line(
            points={{-120,60},{-90,60},{-90,82},{-72,82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mDotMinCheck.y, product2.u1) annotation (Line(
            points={{-39,82},{28,82},{28,66},{44,66}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-150},{175,
                  100}}),
                  graphics),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-150},{175,100}}),
               graphics={Bitmap(extent={{-100,96},{100,-98}}, fileName=
                    "//vmware-host/Shared Folders/Downloads/ControlModule.jpg")}),
                    Documentation(info="<html>
              <p>
              A model for a controller in a standard non condensing tankless water heater. The controller contains logic for the following:<br>
              Checks to make sure the unit has power.<br>
              Checks to make sure that the water flow rate exceeds the minimum flow rate of the heater.<br>
              Checks to make sure that the required heat rate for the draw exceeds the minimum heat rate of the heater.<br>
              If any of the above checks are not satisfied the heater will not turn on.<br>
              Compares the required heat rate for the draw to the maximum heat rate of the heater. If the draw exceeds the heaters capacity the controller will limit the draw flow
              rate.<br>
              Includes a PID controller to determine the appropriate control signal when the heater is firing.<br>
              Includes logic to delay heater firing (doesn't fire instantly when a draw begins).<br>
              Includes logic to identify the electric consumption of the unit (controls when no draw, controls and fan power when there is a draw).<br>
              </p>
              </html>",
                    revisions="<html>
              <ul>
              <li>
              Mar 29, 2013 by Peter Grant:<br>
              First implementation
              </li>
              </ul>
              </html>"));
      end NonCondensingTanklessHXController;

      model ConstantGammaController
        "NonCondensingTanklessHXController with no PID"
      //Debugging notes: Need to work with PID Controller. Does not seem to work...at all
        Modelica.Blocks.Interfaces.RealInput T_out
         annotation (Placement(transformation(extent={{-140,-48},{-100,-8}})));
        Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-66,6},{-46,26}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{-68,44},{-48,64}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{-42,38},{-22,58}})));
        Modelica.Blocks.Interfaces.RealOutput mdot_water_controlled
          annotation (Placement(transformation(extent={{172,44},{202,74}})));
        Modelica.Blocks.Interfaces.RealOutput ControlConstant annotation (Placement(
              transformation(extent={{176,-52},{204,-24}}), iconTransformation(extent={{100,-72},
                  {128,-44}})));
        Modelica.Blocks.Math.Product product2
          annotation (Placement(transformation(extent={{46,50},{66,70}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal
          annotation (Placement(transformation(extent={{-22,70},{-2,90}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal1
          annotation (Placement(transformation(extent={{22,38},{42,58}})));
        Modelica.Blocks.Math.Product product3
          annotation (Placement(transformation(extent={{74,-42},{94,-22}})));
        BaseClasses.NoncondensingTanklessHighFlowControl
                        FlowRateControl(
          SteadyStateEff=SteadyStateEff_cons,
          Qdot_Rated=Qdot_Rated_cons,
          SpecificHeat=SpecificHeat_cons,
          T_Set=T_Set_cons)
          annotation (Placement(transformation(extent={{20,-8},{40,12}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual
          annotation (Placement(transformation(extent={{-56,76},{-36,96}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual1
          annotation (Placement(transformation(extent={{-8,26},{12,46}})));
        Modelica.Blocks.Interfaces.RealInput mdot_water
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Sources.RealExpression mdot_min(y=mdot_min_cons)
          annotation (Placement(transformation(extent={{-94,66},{-74,86}})));
       parameter Real mdot_min_cons(unit = "kg/s") = 0.252
          "Minimum flow rate of the tankless heater";
       parameter Real Qdot_min_cons(unit = "W") = 5275
          "Minimum heat rate of the tankless heater";
       parameter Real T_Set_cons(unit = "C") = 55 "Set Temperature";
       parameter Real SpecificHeat_cons(unit = "J/(kg.C)") = 4190
          "Specific heat of the fluid being heated";
       parameter Real Qdot_Rated_cons(unit = "W") = 55555
          "Raed heat input rate of the tankless heater";
       parameter Real SteadyStateEff_cons = 0.82;
       parameter Modelica.SIunits.Time t_short = 1.5
          "Start delay with a short time between draws";
       parameter Modelica.SIunits.Time t_long = 3
          "Start delay with a long time between draws";
       parameter Modelica.SIunits.Time t_switch = 30
          "Time between draws required for t_long";
       parameter Real QAct = 50
          "Electric power consumed when the fan is operating";
       parameter Real QIdl = 15
          "Electric power consumed when the fan is not operating";
        Modelica.Blocks.Sources.RealExpression SpecificHeat(y=SpecificHeat_cons)
          annotation (Placement(transformation(extent={{-98,20},{-78,40}})));
        Modelica.Blocks.Sources.RealExpression T_Set(y=T_Set_cons)
          annotation (Placement(transformation(extent={{-98,-24},{-78,-4}})));
        Modelica.Blocks.Sources.RealExpression Qdot_min(y=Qdot_min_cons)
          annotation (Placement(transformation(extent={{-38,6},{-18,26}})));
        Modelica.Blocks.Interfaces.RealInput T_Inlet
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput PowerSignal
          annotation (Placement(transformation(extent={{-140,-90},{-100,-50}})));
        Modelica.Blocks.Math.Product product4
          annotation (Placement(transformation(extent={{110,-48},{130,-28}})));
        BaseClasses.StartDelay
                   startDelay(
          t_short=t_short,
          t_long=t_long,
          t_switch=t_switch)
          annotation (Placement(transformation(extent={{76,-96},{96,-76}})));
        Modelica.Blocks.Math.Product product5
          annotation (Placement(transformation(extent={{140,-84},{160,-64}})));
        Modelica.Blocks.Math.Product product6
          annotation (Placement(transformation(extent={{106,-116},{126,-96}})));
        Modelica.Blocks.Sources.Constant QFan(k=QAct)
          annotation (Placement(transformation(extent={{34,-112},{54,-92}})));
        Modelica.Blocks.Sources.Constant QCon(k=QIdl)
          annotation (Placement(transformation(extent={{34,-144},{54,-124}})));
        Modelica.Blocks.Interfaces.RealOutput QElec
          annotation (Placement(transformation(extent={{176,-122},{196,-102}})));
        Modelica.Blocks.Math.Max max1
          annotation (Placement(transformation(extent={{138,-122},{158,-102}})));
        BaseClasses.ConstantGammaControl constantGammaControl(
          SpecificHeat=SpecificHeat_cons,
          T_Set=T_Set_cons,
          Q_Rated=Qdot_Rated_cons,
          SteadyStateEfficiency=SteadyStateEff_cons)
          annotation (Placement(transformation(extent={{-14,-48},{6,-28}})));
        Modelica.Blocks.Math.Min min1
          annotation (Placement(transformation(extent={{28,-54},{48,-34}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-36,-68},{-16,-48}})));
        Modelica.Blocks.Interfaces.RealInput TAmb
          annotation (Placement(transformation(extent={{-140,-140},{-100,-100}})));
        Modelica.Blocks.Interfaces.RealInput u
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      equation
        connect(T_Set.y, add.u2) annotation (Line(
            points={{-77,-14},{-68,-14},{-68,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, product1.u1) annotation (Line(
            points={{-47,54},{-44,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, product1.u2) annotation (Line(
            points={{-45,16},{-44,16},{-44,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(booleanToReal1.y, product2.u2) annotation (Line(
            points={{43,48},{44,48},{44,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(booleanToReal.y, product2.u1) annotation (Line(
            points={{-1,80},{22,80},{22,66},{44,66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.u1, product2.y) annotation (Line(
            points={{72,-26},{72,60},{67,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FlowRateControl.mdot_water_controlled, mdot_water_controlled)
          annotation (Line(
            points={{41.9,8.1},{126.95,8.1},{126.95,59},{187,59}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greaterEqual.y, booleanToReal.u) annotation (Line(
            points={{-35,86},{-30,86},{-30,80},{-24,80}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(greaterEqual1.y, booleanToReal1.u) annotation (Line(
            points={{13,36},{16,36},{16,48},{20,48}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(product1.y, greaterEqual1.u1) annotation (Line(
            points={{-21,48},{-16,48},{-16,36},{-10,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Qdot_min.y, greaterEqual1.u2) annotation (Line(
            points={{-17,16},{-10,16},{-10,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y,FlowRateControl. Qdot_Required) annotation (Line(
            points={{-21,48},{-20,48},{-20,34},{-40,34},{-40,8},{18,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, product.u1) annotation (Line(
            points={{-120,60},{-70,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, greaterEqual.u1) annotation (Line(
            points={{-120,60},{-100,60},{-100,86},{-58,86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water,FlowRateControl. mdot_water) annotation (Line(
            points={{-120,60},{-99,60},{-99,0},{18,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_min.y, greaterEqual.u2) annotation (Line(
            points={{-73,76},{-66,76},{-66,78},{-58,78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SpecificHeat.y, product.u2) annotation (Line(
            points={{-77,30},{-74,30},{-74,48},{-70,48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Inlet, add.u1) annotation (Line(
            points={{-120,20},{-94,20},{-94,22},{-68,22}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Inlet, FlowRateControl.T_Inlet) annotation (Line(
            points={{-120,20},{-94,20},{-94,4},{18,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PowerSignal, FlowRateControl.PowerSignal) annotation (Line(
            points={{-120,-70},{-40,-70},{-40,-4},{18,-4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PowerSignal, product4.u2) annotation (Line(
            points={{-120,-70},{94,-70},{94,-44},{108,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y, product4.u1) annotation (Line(
            points={{95,-32},{108,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, startDelay.mDotDra) annotation (Line(
            points={{-120,60},{-98,60},{-98,-86},{74,-86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product5.u2) annotation (Line(
            points={{97,-86},{120,-86},{120,-80},{138,-80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product4.y, product5.u1) annotation (Line(
            points={{131,-38},{132,-38},{132,-68},{138,-68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product5.y, ControlConstant) annotation (Line(
            points={{161,-74},{164,-74},{164,-38},{190,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product6.u1) annotation (Line(
            points={{97,-86},{100,-86},{100,-100},{104,-100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QFan.y, product6.u2) annotation (Line(
            points={{55,-102},{80,-102},{80,-112},{104,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product6.y, max1.u1) annotation (Line(
            points={{127,-106},{136,-106}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QCon.y, max1.u2) annotation (Line(
            points={{55,-134},{124,-134},{124,-118},{136,-118}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QElec, QElec) annotation (Line(
            points={{186,-112},{186,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max1.y, QElec) annotation (Line(
            points={{159,-112},{186,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Inlet, constantGammaControl.T_In) annotation (Line(
            points={{-120,20},{-72,20},{-72,-42},{-16,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, constantGammaControl.WaterFlowRate) annotation (Line(
            points={{-120,60},{-72,60},{-72,-34},{-16,-34}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(constantGammaControl.ControlSignal, min1.u1) annotation (Line(
            points={{7,-38},{26,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(min1.y, product3.u2) annotation (Line(
            points={{49,-44},{60,-44},{60,-38},{72,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const.y, min1.u2) annotation (Line(
            points={{-15,-58},{16,-58},{16,-50},{26,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(u, constantGammaControl.Qdot_Environment) annotation (Line(
            points={{-120,100},{-70,100},{-70,-30},{-16,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-150},{175,
                  100}}),
                  graphics),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-150},{175,100}}),
               graphics={Bitmap(extent={{-100,96},{100,-98}}, fileName=
                    "//vmware-host/Shared Folders/Downloads/ControlModule.jpg")}),
                    Documentation(info="<html>
              <p>
              A modified version of NonCondensingTanklessController. The modifications were made to use a constant control signal equal to the control signal required at steady
              state. This modification was used to make the model predictions match those from TRNSYS Type 940 for a specific project.
              </p>
              </html>",
                    revisions="<html>
              <ul>
              <li>
              Mar 29, 2013 by Peter Grant:<br>
              First implementation
              </li>
              </ul>
              </html>"));
      end ConstantGammaController;

      model NonCondensingTanklessHXControllerMediumModel
        "Control module for the non-condensing TWH model using a medium"
      //Debugging notes: Need to work with PID Controller. Does not seem to work...at all
        Modelica.Blocks.Interfaces.RealInput T_out(unit = "K")
         annotation (Placement(transformation(extent={{-140,-48},{-100,-8}})));
        Modelica.Blocks.Interfaces.RealOutput ControlConstant annotation (Placement(
              transformation(extent={{176,-52},{204,-24}}), iconTransformation(extent={{100,-72},
                  {128,-44}})));
        Modelica.Blocks.Math.Product product2
          annotation (Placement(transformation(extent={{48,50},{68,70}})));
        Modelica.Blocks.Continuous.LimPID
                                       PID(
          y_start=PID_y_start,
          Ti=PID_I,
          Td=PID_D,
          yMax=1,
          yMin=0,
          controllerType=Modelica.Blocks.Types.SimpleController.PID,
          Ni=0.9,
          k=PID_P)
          annotation (Placement(transformation(extent={{-16,-10},{4,10}})));
        Modelica.Blocks.Math.Product product3
          annotation (Placement(transformation(extent={{78,8},{98,28}})));
       replaceable package Medium = Modelica.Media.Interfaces.PartialMedium
          "Fluid in the heater";
       parameter Real mdot_min_cons(unit = "kg/s") = 0.252
          "Minimum flow rate of the tankless heater";
       parameter Real Qdot_min_cons(unit = "W") = 5275
          "Minimum heat rate of the tankless heater";
       parameter Real T_Set_cons(unit = "K") = 55 "Set Temperature";
       parameter Real SpecificHeat_cons(unit = "J/(kg.K)") = 4190
          "Specific heat of the fluid being heated";
       parameter Real Qdot_Rated_cons(unit = "W") = 55555
          "Raed heat input rate of the tankless heater";
       parameter Real SteadyStateEff_cons = 0.82
          "Efficiency of the heater at steady state";
       parameter Modelica.SIunits.Time PID_P = 1
          "Proportional value of the PID controller";
       parameter Modelica.SIunits.Time PID_I = 1
          "Integral value of the PID controller";
       parameter Modelica.SIunits.Time PID_D = 1
          "Derivative value of the PID controller";
       parameter Real PID_y_start = 0.666;
       parameter Modelica.SIunits.Time t_short = 1.5
          "Start delay with a short time between draws";
       parameter Modelica.SIunits.Time t_long = 3
          "Start delay with a long time between draws";
       parameter Modelica.SIunits.Time t_switch = 30
          "Time between draws required for t_long";
       parameter Real QAct(unit = "W") = 50
          "Electric power consumed when the fan is operating";
       parameter Real QIdl(unit = "W") = 15
          "Electric power consumed when the fan is not operating";
       parameter Real UA(unit = "W/K") = 13.6
          "Heat loss coefficient of the heater";
       parameter Real mdot_min_deadband(unit = "kg/s") = 0.00416
          "Deadband of the minimum flow rate check";
       parameter Modelica.SIunits.Time StopDelay
          "Delay between water flow ceasing and heat transfer stopping";
       parameter Modelica.SIunits.Time ControlDelay "Control response delay";

      protected
        parameter Real smoHeaDel = 0.01 "Delta of the smoothHeaviside function";
      public
        Modelica.Blocks.Interfaces.RealInput PowerSignal
          annotation (Placement(transformation(extent={{-140,-90},{-100,-50}})));
        Modelica.Blocks.Math.Product product4
          annotation (Placement(transformation(extent={{110,2},{130,22}})));
        BaseClasses.StartDelay
                   startDelay(
          t_short=t_short,
          t_long=t_long,
          t_switch=t_switch)
          annotation (Placement(transformation(extent={{68,-40},{92,-20}})));
        Modelica.Blocks.Math.Product product5
          annotation (Placement(transformation(extent={{140,-28},{160,-8}})));
        Modelica.Blocks.Math.Product product6
          annotation (Placement(transformation(extent={{106,-58},{126,-38}})));
        Modelica.Blocks.Sources.Constant QFan(k=QAct)
          annotation (Placement(transformation(extent={{34,-62},{54,-42}})));
        Modelica.Blocks.Sources.Constant QCon(k=QIdl)
          annotation (Placement(transformation(extent={{34,-96},{54,-76}})));
        Modelica.Blocks.Interfaces.RealOutput QElec(unit = "W")
          annotation (Placement(transformation(extent={{176,-102},{196,-82}})));
        Modelica.Blocks.Math.Max max1
          annotation (Placement(transformation(extent={{138,-66},{158,-46}})));
        Modelica.Blocks.Interfaces.RealInput TAmb
          annotation (Placement(transformation(extent={{-140,-160},{-100,-120}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium
            = Medium)
          annotation (Placement(transformation(extent={{-114,-122},{-94,-102}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium
            = Medium)
          annotation (Placement(transformation(extent={{170,-122},{190,-102}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium
            = Medium) annotation (Placement(transformation(extent={{-58,-122},{
                  -38,-102}})));
        Modelica.Blocks.Interfaces.RealOutput maxMasFlo annotation (Placement(
              transformation(extent={{176,-144},{196,-124}})));
        Buildings.Fluid.Sensors.Temperature senTem(redeclare package Medium =
              Medium)
          annotation (Placement(transformation(extent={{-104,-98},{-84,-78}})));
        BaseClasses.MaxMassFlow maxMassFlow(
          SteadyStateEff=SteadyStateEff_cons,
          Cp=SpecificHeat_cons,
          T_Set=T_Set_cons,
          Qdot_max=Qdot_Rated_cons,
          UA=UA)
          annotation (Placement(transformation(extent={{-2,-144},{18,-124}})));
        BaseClasses.mDotMinCheck mDotMin(mDot_min_cons=mdot_min_cons, stopDelay=
              StopDelay)
          annotation (Placement(transformation(extent={{-70,74},{-30,94}})));
        BaseClasses.QDotMinCheck qDotMinCheck(
          SpecificHeat=SpecificHeat_cons,
          T_Set=T_Set_cons,
          StopDelay=StopDelay,
          QDot_min=Qdot_min_cons)
          annotation (Placement(transformation(extent={{-58,34},{-28,54}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=T_Set_cons)
          annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
      equation
        connect(PowerSignal, product4.u2) annotation (Line(
            points={{-120,-70},{94,-70},{94,6},{108,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y, product4.u1) annotation (Line(
            points={{99,18},{108,18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product5.u2) annotation (Line(
            points={{92.6,-30},{116,-30},{116,-24},{138,-24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product4.y, product5.u1) annotation (Line(
            points={{131,12},{132,12},{132,-12},{138,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product5.y, ControlConstant) annotation (Line(
            points={{161,-18},{166,-18},{166,-38},{190,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product6.u1) annotation (Line(
            points={{92.6,-30},{100,-30},{100,-42},{104,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QFan.y, product6.u2) annotation (Line(
            points={{55,-52},{80,-52},{80,-54},{104,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product6.y, max1.u1) annotation (Line(
            points={{127,-48},{132,-48},{132,-50},{136,-50}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QCon.y, max1.u2) annotation (Line(
            points={{55,-86},{124,-86},{124,-62},{136,-62}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QElec, QElec) annotation (Line(
            points={{186,-92},{186,-92}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max1.y, QElec) annotation (Line(
            points={{159,-56},{172,-56},{172,-92},{186,-92}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(port_a, senMasFlo.port_a) annotation (Line(
            points={{-104,-112},{-58,-112}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(senMasFlo.m_flow, startDelay.mDotDra) annotation (Line(
            points={{-48,-101},{-48,-60},{26,-60},{26,-30},{66.8,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senMasFlo.port_b, port_b) annotation (Line(
            points={{-38,-112},{180,-112}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(port_a, senTem.port) annotation (Line(
            points={{-104,-112},{-94,-112},{-94,-98}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TAmb, maxMassFlow.TAmb) annotation (Line(
            points={{-120,-140},{-4,-140}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(maxMassFlow.y, maxMasFlo) annotation (Line(
            points={{19,-134},{186,-134}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senTem.T, maxMassFlow.TIn) annotation (Line(
            points={{-87,-88},{-72,-88},{-72,-128},{-4,-128}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mDotMin.y, product2.u1) annotation (Line(
            points={{-29,84},{28,84},{28,66},{46,66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(qDotMinCheck.y, product2.u2) annotation (Line(
            points={{-27,44},{28,44},{28,54},{46,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senTem.T, qDotMinCheck.TIn) annotation (Line(
            points={{-87,-88},{-72,-88},{-72,36},{-60,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(realExpression.y, PID.u_s) annotation (Line(
            points={{-39,0},{-18,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product2.y, product3.u1) annotation (Line(
            points={{69,60},{72,60},{72,24},{76,24}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senMasFlo.m_flow, qDotMinCheck.mDotDra) annotation (Line(
            points={{-48,-101},{-48,-60},{-82,-60},{-82,52},{-60,52}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(senMasFlo.m_flow, mDotMin.mDotDra) annotation (Line(
            points={{-48,-101},{-48,-60},{-82,-60},{-82,84},{-62,84}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PID.y, product3.u2) annotation (Line(
            points={{5,0},{68,0},{68,12},{76,12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_out, PID.u_m) annotation (Line(
            points={{-120,-28},{-6,-28},{-6,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-150},
                  {175,100}}),
                  graphics),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-150},{175,100}}),
               graphics={Bitmap(extent={{-100,96},{100,-98}}, fileName=
                    "//vmware-host/Shared Folders/Downloads/ControlModule.jpg")}),
                    defaultComponentName="con",
                    Documentation(info="<html>
              <p>
              This model is a modification of NonCondensingTanklessHXController. The modiciations were made to make this model use fluid connections instead of Real variables
              to pass input/output data. It was the first step in making the tankless water heater model compatible with the Buildings library.
              </p>
              <p>
              Future modification plans include:<br>
              Further efforts to bring the model up to Buildings library standards.<br>
              Breaking the controller into several sub-control modules (example: a model for the low flow control) so that user's can easily construct their own controller models.
              </p>
              </html>",
                    revisions="<html>
              <ul>
              <li>
              Apr 15, 2013 by Peter Grant:<br>
              Replaced greater than checks with add and smoothHeaviside blocks to reduce state events
              </ul>
              </li>
              <ul>
              <li>
              Mar 29, 2013 by Peter Grant:<br>
              First implementation
              </li>
              </ul>
              </html>"));
      end NonCondensingTanklessHXControllerMediumModel;

      package BaseClasses
        model ConstantGammaControl
          "Identifies control signal assuming steady state"
          extends Modelica.Blocks.Interfaces.BlockIcon;
          parameter Real SteadyStateEfficiency;
          parameter Real T_Set;
          parameter Real SpecificHeat;
          parameter Real Q_Rated;
        //  parameter Real UA;

          Real Q_in;

          Modelica.Blocks.Interfaces.RealInput WaterFlowRate
            annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
          Modelica.Blocks.Interfaces.RealInput T_In
            annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
          Modelica.Blocks.Interfaces.RealOutput ControlSignal
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          Modelica.Blocks.Interfaces.RealInput Qdot_Environment
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        equation
          Q_in = (1/SteadyStateEfficiency)*(WaterFlowRate * SpecificHeat * (T_Set - T_In)+Qdot_Environment);
          ControlSignal = Q_in/Q_Rated;

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            Identifies the control signal needed to provide hot water at the set temperature during steady state conditions.<br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Mar 29, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end ConstantGammaControl;


        model MaxMassFlow
          "Identifies the maximum mass flow the heater can handle at current conditions"
          extends Modelica.Blocks.Interfaces.BlockIcon;

          parameter Modelica.SIunits.Power Qdot_max
            "Maximum heat input rate of the heater";
          parameter Real SteadyStateEff "Heater efficiency at steady state";
          parameter Real UA(unit = "W/K") "Heat loss coefficient";
          parameter Modelica.SIunits.SpecificHeatCapacity Cp
            "Specific heat of the fluid";
          parameter Modelica.SIunits.Temperature T_Set "Setpoint";

          Modelica.Blocks.Interfaces.RealInput TIn(unit = "K")
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealInput TAmb(unit = "K")
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));

        equation
          y = (Qdot_max * SteadyStateEff - UA*(T_Set - TAmb))/(Cp*(T_Set-TIn));

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics),
                    Documentation(info="<html>
            <p>
            Identifies the maximum flow rate of water the heater can handle at current conditions. This output can be used in other models to limit the flow rate of water
            so that the heater can provide water at the setpoint while burning at maximum capacity. The limiting of the flow rate is then applied externally to this model.<br>
            </p>
            <p>
            Planned future revisions include changing the environmental losses term to be more accurate (Currently a slighly imprecise calculation).<br>
            </p>
            </html>",
                    revisions="<html>
            <ul>
            <li>
            Mar 29, 2013 by Peter Grant:<br>
            First implementation
            </li>
            </ul>
            </html>"));
        end MaxMassFlow;

        block NoncondensingTanklessHighFlowControl
          "Checks to determine whether or not the heater is able to provide enough heat to meet setpoint at the desired flow rate. Reduces the flow rate as necessary to meet T_set"
        parameter Real SteadyStateEff = 0.82;
        parameter Real Qdot_Rated = 52.752;
        parameter Real SpecificHeat = 4.19;
        parameter Real T_Set = 55;
          Modelica.Blocks.Interfaces.RealInput Qdot_Required
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealOutput mdot_water_controlled
            annotation (Placement(transformation(extent={{100,42},{138,80}})));
          Modelica.Blocks.Interfaces.RealInput mdot_water
            annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
          Modelica.Blocks.Interfaces.RealInput T_Inlet
            annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
          Modelica.Blocks.Interfaces.RealInput PowerSignal
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        equation
        if ((Qdot_Required > SteadyStateEff * Qdot_Rated) and (PowerSignal > 0)) then
          mdot_water_controlled = (SteadyStateEff * Qdot_Rated) / (SpecificHeat * (T_Set - T_Inlet));
        else
          mdot_water_controlled = mdot_water;
        end if;
          annotation (Icon(graphics={   Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                  extent={{-80,80},{78,-64}},
                  lineColor={0,0,255},
                  textString="High Flow
Rate Control")}),                                 Diagram(graphics),
        Documentation(info="<html>
<p>
This model can be used to identify the maximum water flow rate through a tankless water heater. It identifies the heat rate that the heater is capable of providing and compares
that heat rate to the heat rate required to meet the demand in the current draw. If the required heat rate exceeds the maximum heat rate it will limit the water flow rate such
that the burner fires at maximum capacity and the water leaves at the set temperature.
</p>
<p>
Future improvment plans include:<br>
Modify calculations to include environmental losses.
</p>
</html>",
        revisions="<html>
<ul>
<li>
Mar 29, 2013 by Peter Grant:<br>
First implementation
</ul>
</li>
</html>"));
        end NoncondensingTanklessHighFlowControl;

        model StartDelay
          "Identifies when the heater will begin firing at the start of a draw"
          extends Modelica.Blocks.Interfaces.BlockIcon;
          parameter Modelica.SIunits.Time t_short = 1.5
            "Start delay with a short time between draws";
          parameter Modelica.SIunits.Time t_long = 3
            "Start delay with a long time between draws";
          parameter Modelica.SIunits.Time t_switch = 30
            "Time between draws required for t_long";
          Modelica.Blocks.Interfaces.RealInput mDotDra "Water flow rate"
            annotation (Placement(transformation(extent={{-240,-20},{-200,20}}),
                iconTransformation(extent={{-240,-20},{-200,20}})));
          Modelica.Blocks.Sources.Constant const(k=0.00001)
            annotation (Placement(transformation(extent={{-196,-96},{-176,-76}})));
          Modelica.Blocks.Logical.Timer timer
            annotation (Placement(transformation(extent={{-72,-62},{-52,-42}})));
          Modelica.Blocks.Sources.Constant const1(k=0.00001)
            annotation (Placement(transformation(extent={{-194,74},{-174,94}})));
          Modelica.Blocks.Logical.Timer timer1
            annotation (Placement(transformation(extent={{-38,22},{-18,42}})));
          Modelica.Blocks.Math.Add add(k2=-1)
            annotation (Placement(transformation(extent={{26,82},{46,62}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=add6.y)
            annotation (Placement(transformation(extent={{76,-4},{96,16}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{200,-10},{220,10}}),
                iconTransformation(extent={{200,-10},{220,10}})));
          Modelica.Blocks.Math.Add add1(k2=-1)
            annotation (Placement(transformation(extent={{-160,-62},{-140,-42}})));
          Buildings.Utilities.Math.SmoothHeaviside smoothHeaviside(delta=smoHeaDel)
            annotation (Placement(transformation(extent={{-130,-62},{-110,-42}})));

        protected
          parameter Real smoHeaDel = 0.00001
            "Delta used in the smoothHeaviside function";

        public
          Modelica.Blocks.Math.RealToBoolean realToBoolean(threshold=0.5)
            annotation (Placement(transformation(extent={{-100,-62},{-80,-42}})));
          Modelica.Blocks.Math.Add add2(k1=-1)
            annotation (Placement(transformation(extent={{-160,80},{-140,60}})));
          Buildings.Utilities.Math.SmoothHeaviside smoothHeaviside1(
                                                                   delta=smoHeaDel)
            annotation (Placement(transformation(extent={{-130,60},{-110,80}})));
          Modelica.Blocks.Math.RealToBoolean realToBoolean1(threshold=0.5)
            annotation (Placement(transformation(extent={{-66,22},{-46,42}})));
          Modelica.Blocks.Math.Add add4(k2=-1)
            annotation (Placement(transformation(extent={{108,10},{128,-10}})));
          Buildings.Utilities.Math.SmoothHeaviside smoothHeaviside3(
                                                                   delta=smoHeaDel)
            annotation (Placement(transformation(extent={{140,-10},{160,10}})));
          Buildings.Utilities.Math.SmoothHeaviside smoothHeaviside4(
                                                                   delta=smoHeaDel)
            annotation (Placement(transformation(extent={{56,62},{76,82}})));
          Modelica.Blocks.Math.Product product1
            annotation (Placement(transformation(extent={{92,48},{112,68}})));
          Modelica.Blocks.Math.Add add5(k1=-1)
            annotation (Placement(transformation(extent={{56,24},{76,44}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=t_long)
            annotation (Placement(transformation(extent={{20,16},{40,36}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=t_short)
            annotation (Placement(transformation(extent={{20,32},{40,52}})));
          Modelica.Blocks.Math.Add add6
            annotation (Placement(transformation(extent={{126,60},{146,80}})));
          Modelica.Blocks.Sources.RealExpression realExpression3(y=t_short)
            annotation (Placement(transformation(extent={{92,74},{112,94}})));
          Modelica.Blocks.Sources.RealExpression realExpression4(y=t_switch)
            annotation (Placement(transformation(extent={{-32,88},{-12,108}})));
          Modelica.Blocks.Math.Add add3(k2=-1)
            annotation (Placement(transformation(extent={{-10,16},{10,36}})));
          Modelica.Blocks.Sources.RealExpression realExpression5(y=t_long)
            annotation (Placement(transformation(extent={{-190,16},{-170,36}})));
          Modelica.Blocks.Math.Add add7(k1=-1)
            annotation (Placement(transformation(extent={{-162,30},{-142,10}})));
          Buildings.Utilities.Math.SmoothHeaviside smoothHeaviside2(
                                                                   delta=smoHeaDel)
            annotation (Placement(transformation(extent={{-130,10},{-110,30}})));
          Modelica.Blocks.Math.Add     product2
            annotation (Placement(transformation(extent={{-96,22},{-76,42}})));
        equation

          connect(const.y, add1.u2) annotation (Line(
              points={{-175,-86},{-168,-86},{-168,-58},{-162,-58}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotDra, add1.u1) annotation (Line(
              points={{-220,1.11022e-15},{-196,1.11022e-15},{-196,-46},{-162,
                  -46}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, smoothHeaviside.u) annotation (Line(
              points={{-139,-52},{-132,-52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoothHeaviside.y, realToBoolean.u) annotation (Line(
              points={{-109,-52},{-102,-52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realToBoolean.y, timer.u) annotation (Line(
              points={{-79,-52},{-74,-52}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(const1.y, add2.u2) annotation (Line(
              points={{-173,84},{-168,84},{-168,76},{-162,76}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotDra, add2.u1) annotation (Line(
              points={{-220,1.11022e-15},{-196,1.11022e-15},{-196,64},{-162,64}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add2.y, smoothHeaviside1.u) annotation (Line(
              points={{-139,70},{-132,70}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression.y, add4.u2) annotation (Line(
              points={{97,6},{106,6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timer.y, add4.u1) annotation (Line(
              points={{-51,-52},{94,-52},{94,-6},{106,-6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add4.y, smoothHeaviside3.u) annotation (Line(
              points={{129,0},{138,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoothHeaviside3.y, y) annotation (Line(
              points={{161,6.66134e-16},{180,6.66134e-16},{180,4.44089e-16},{210,4.44089e-16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, smoothHeaviside4.u) annotation (Line(
              points={{47,72},{54,72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression2.y, add5.u1) annotation (Line(
              points={{41,42},{46,42},{46,40},{54,40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression1.y, add5.u2) annotation (Line(
              points={{41,26},{48,26},{48,28},{54,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add5.y, product1.u2) annotation (Line(
              points={{77,34},{84,34},{84,52},{90,52}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoothHeaviside4.y, product1.u1) annotation (Line(
              points={{77,72},{84,72},{84,64},{90,64}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, add6.u2) annotation (Line(
              points={{113,58},{118,58},{118,64},{124,64}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression3.y, add6.u1) annotation (Line(
              points={{113,84},{118,84},{118,76},{124,76}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realToBoolean1.y, timer1.u) annotation (Line(
              points={{-45,32},{-40,32}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(realExpression4.y, add.u2) annotation (Line(
              points={{-11,98},{6,98},{6,78},{24,78}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timer.y, add3.u2) annotation (Line(
              points={{-51,-52},{-34,-52},{-34,20},{-12,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timer1.y, add3.u1) annotation (Line(
              points={{-17,32},{-12,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add3.y, add.u1) annotation (Line(
              points={{11,26},{14,26},{14,66},{24,66}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realExpression5.y, add7.u2) annotation (Line(
              points={{-169,26},{-164,26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add7.y, smoothHeaviside2.u) annotation (Line(
              points={{-141,20},{-136.5,20},{-136.5,20},{-132,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product2.y, realToBoolean1.u) annotation (Line(
              points={{-75,32},{-68,32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoothHeaviside2.y, product2.u2) annotation (Line(
              points={{-109,20},{-104,20},{-104,26},{-98,26}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoothHeaviside1.y, product2.u1) annotation (Line(
              points={{-109,70},{-104,70},{-104,38},{-98,38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timer.y, add7.u1) annotation (Line(
              points={{-51,-52},{-44,-52},{-44,-12},{-176,-12},{-176,14},{-164,
                  14}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                    -100},{200,100}}),
                              graphics),
          defaultComponentName='tDel',
          Documentation(info="<html>
  <p>
  This component can be used to choose between two time delay values as is found in the controls of tankless water heaters. The component allows the user to specify two different time delays before the burner begins firing, as well as a switchover delay between draws. If the delay between draws is shorter than the switchover time it uses the short time delay before the burner fires. If the delay between draws is longer than the switchover time it uses the long time delay value.
  </p>
  <p>
  The model compares the selected delay time to the duration of the draw. If the water flow has been greater than 0 kg/s for a time longer than the selected delay the model sends a signal indicating that the burner can fire. The output is Boolean in integer format with 1 indicating that the unit can fire, 0 indicating that it cannot.
  </p>
  </html>",
          revisions="<html>
  <ul>
  <li>October 31, 2012 by Peter Grant:<br>
  First implementation
  </li>
  </ul>
  </html>"),Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,-100},{200,100}}),
                graphics));
        end StartDelay;

        model mDotMinCheck "Control logic for flow rate vs minimum flow rate"
          extends Modelica.Blocks.Interfaces.BlockIcon;

          parameter Real mDot_min_cons "Rated minimum flow rate of the heater";
          parameter Modelica.SIunits.Time stopDelay
            "Delay between the water flow ceasing and the heat transfer stopping";

          //fixme - How do I move the icons for inputs and outputs on the Icon but not in the diagram?

          Modelica.Blocks.Interfaces.RealInput mDotDra
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}}),
                iconTransformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Sources.RealExpression mDotMin(y=mDot_min_cons)
            annotation (Placement(transformation(extent={{-200,-24},{-180,-4}})));
          Modelica.Blocks.Math.Add add(k1=-1)
            annotation (Placement(transformation(extent={{-160,-12},{-140,8}})));
          Buildings.Utilities.Math.SmoothHeaviside smoHea(delta=0.0001)
            annotation (Placement(transformation(extent={{-130,-12},{-110,8}})));
          Modelica.Blocks.Math.RealToBoolean realToBoolean
            annotation (Placement(transformation(extent={{-100,-12},{-80,8}})));
          Modelica.Blocks.Logical.Timer timer
            annotation (Placement(transformation(extent={{-72,-12},{-52,8}})));
          Modelica.Blocks.Sources.RealExpression stoDel(y=stopDelay)
            "Time after water flow ceases before gas heat delivery stops"
            annotation (Placement(transformation(extent={{-70,-38},{-50,-18}})));
          Modelica.Blocks.Math.Add add1(k1=-1)
            annotation (Placement(transformation(extent={{-24,-22},{-4,-2}})));
          Buildings.Utilities.Math.SmoothHeaviside smoHea1(delta=0.00001)
            annotation (Placement(transformation(extent={{8,-22},{28,-2}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{200,-10},{220,10}})));
        equation
          connect(mDotDra, add.u1) annotation (Line(
              points={{-120,8.88178e-16},{-190,8.88178e-16},{-190,4},{-162,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotMin.y, add.u2) annotation (Line(
              points={{-179,-14},{-176,-14},{-176,-8},{-162,-8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, smoHea.u) annotation (Line(
              points={{-139,-2},{-132,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoHea.y, realToBoolean.u) annotation (Line(
              points={{-109,-2},{-102,-2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realToBoolean.y, timer.u) annotation (Line(
              points={{-79,-2},{-74,-2}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(timer.y, add1.u1) annotation (Line(
              points={{-51,-2},{-38,-2},{-38,-6},{-26,-6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(stoDel.y, add1.u2) annotation (Line(
              points={{-49,-28},{-38,-28},{-38,-18},{-26,-18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, smoHea1.u) annotation (Line(
              points={{-3,-12},{6,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoHea1.y, y) annotation (Line(
              points={{29,-12},{66,-12},{66,0},{210,0}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                    -100},{200,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-200,-100},{200,100}}), graphics));
        end mDotMinCheck;

        model QDotMinCheck "Control logic module for minimum heat rate"
          extends Modelica.Blocks.Interfaces.BlockIcon;

          parameter Modelica.SIunits.SpecificHeatCapacity SpecificHeat
            "Specific heat of the heated fluid";
          parameter Modelica.SIunits.Temperature T_Set
            "Set temperature of the heater";
          parameter Modelica.SIunits.Time StopDelay
            "Delay between flow stopping and heat transfer stopping";
          parameter Modelica.SIunits.HeatFlowRate QDot_min
            "Minimum heat rate of the heater";

        public
          Modelica.Blocks.Sources.RealExpression SpeHea(y=SpecificHeat)
            annotation (Placement(transformation(extent={{-96,-2},{-76,18}})));
          Modelica.Blocks.Sources.RealExpression TSet(y=T_Set)
            annotation (Placement(transformation(extent={{-96,-20},{-76,0}})));
          Modelica.Blocks.Math.Add add(k2=-1)
            annotation (Placement(transformation(extent={{-60,-26},{-40,-6}})));
          Modelica.Blocks.Math.Product product
            annotation (Placement(transformation(extent={{-60,12},{-40,32}})));
          Modelica.Blocks.Math.Product product1
            annotation (Placement(transformation(extent={{-26,6},{-6,26}})));
          Modelica.Blocks.Sources.RealExpression QDotMin(y=QDot_min)
            annotation (Placement(transformation(extent={{-26,-28},{-6,-8}})));
          Modelica.Blocks.Math.Add add2(k1=-1)
            annotation (Placement(transformation(extent={{4,-10},{24,10}})));
          Buildings.Utilities.Math.SmoothHeaviside smoHea(delta=0.000001)
            annotation (Placement(transformation(extent={{34,-10},{54,10}})));
          Modelica.Blocks.Interfaces.RealInput mDotDra
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput TIn
            annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          Modelica.Blocks.Math.RealToBoolean realToBoolean
            annotation (Placement(transformation(extent={{64,-10},{84,10}})));
          Modelica.Blocks.Logical.Timer timer
            annotation (Placement(transformation(extent={{94,-10},{114,10}})));
          Modelica.Blocks.Sources.RealExpression stoDel(y=StopDelay)
            annotation (Placement(transformation(extent={{94,-38},{114,-18}})));
          Modelica.Blocks.Math.Add add1(k1=-1)
            annotation (Placement(transformation(extent={{128,-22},{148,-2}})));
          Buildings.Utilities.Math.SmoothHeaviside smoHea1(delta=0.000001)
            annotation (Placement(transformation(extent={{158,-22},{178,-2}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{200,-10},{220,10}})));
        equation
          connect(product1.u1, product.y) annotation (Line(
              points={{-28,22},{-39,22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(mDotDra, product.u1) annotation (Line(
              points={{-120,80},{-92,80},{-92,28},{-62,28}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(SpeHea.y, product.u2)       annotation (Line(
              points={{-75,8},{-72,8},{-72,16},{-62,16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TIn, add.u2) annotation (Line(
              points={{-120,-80},{-80,-80},{-80,-22},{-62,-22}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TSet.y, add.u1)  annotation (Line(
              points={{-75,-10},{-62,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, product1.u2) annotation (Line(
              points={{-39,-16},{-32,-16},{-32,10},{-28,10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add2.y, smoHea.u) annotation (Line(
              points={{25,0},{32,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(QDotMin.y, add2.u2)  annotation (Line(
              points={{-5,-18},{-2,-18},{-2,-6},{2,-6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, add2.u1) annotation (Line(
              points={{-5,16},{-2,16},{-2,6},{2,6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoHea.y, realToBoolean.u) annotation (Line(
              points={{55,0},{62,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(realToBoolean.y, timer.u) annotation (Line(
              points={{85,0},{92,0}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(stoDel.y, add1.u2) annotation (Line(
              points={{115,-28},{120,-28},{120,-18},{126,-18}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timer.y, add1.u1) annotation (Line(
              points={{115,0},{120,0},{120,-6},{126,-6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, smoHea1.u) annotation (Line(
              points={{149,-12},{156,-12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(smoHea1.y, y) annotation (Line(
              points={{179,-12},{188,-12},{188,0},{210,0}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{200,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{200,100}})));
        end QDotMinCheck;

        package Examples
          model ControlResponseDelay "Test model for ControlResponseDelay"
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.NonCondensingTankless.Controllers.BaseClasses.ControlResponseDelay
              controlResponseDelay
              annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
            Modelica.Blocks.Sources.Sine sine(amplitude=10, freqHz=0.01)
              annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          equation
            connect(sine.y, controlResponseDelay.u) annotation (Line(
                points={{-59,0},{-14,0}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end ControlResponseDelay;

          model StartDelay
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.NonCondensingTankless.Controllers.BaseClasses.StartDelay
              startDelay(t_short=1, t_long=5) annotation (Placement(
                  transformation(extent={{-22,-10},{18,10}})));
            Modelica.Blocks.Sources.Step step(height=0.063, startTime=31)
              annotation (Placement(transformation(extent={{-78,-10},{-58,10}})));
          equation
            connect(step.y, startDelay.mDotDra) annotation (Line(
                points={{-57,0},{-24,0}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end StartDelay;

          model StopDelay "Example of the use of StartDelay"
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.NonCondensingTankless.Controllers.BaseClasses.mDotMinCheck
              stopDelay(mDot_min_cons=0.016, stopDelay=2) annotation (Placement(
                  transformation(extent={{-20,-10},{20,10}})));
            Modelica.Blocks.Sources.Step step(
              height=-0.063,
              offset=0.063,
              startTime=10) annotation (Placement(transformation(extent={{-88,
                      -10},{-68,10}})));
          equation
            connect(step.y, stopDelay.mDotDra) annotation (Line(
                points={{-67,0},{-12,0}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end StopDelay;

          model QDotMinCheck "Example showing the use of QDotMinCheck"
            import WaterHeatingLibrary;
            extends Modelica.Icons.Example;
            WaterHeatingLibrary.NonCondensingTankless.Controllers.BaseClasses.QDotMinCheck
              qDotMinCheck(
              SpecificHeat=4186,
              T_Set=333.15,
              StopDelay=2,
              QDot_min=1000)
              annotation (Placement(transformation(extent={{-10,-6},{20,14}})));
            Modelica.Blocks.Sources.Step step(
              height=-0.063,
              offset=0.063,
              startTime=10)
              annotation (Placement(transformation(extent={{-78,6},{-58,26}})));
            Modelica.Blocks.Sources.Constant const(k=15) annotation (Placement(
                  transformation(extent={{-78,-24},{-58,-4}})));
          equation
            connect(step.y, qDotMinCheck.mDotDra) annotation (Line(
                points={{-57,16},{-30,16},{-30,12},{-12,12}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(const.y, qDotMinCheck.TIn) annotation (Line(
                points={{-57,-14},{-30,-14},{-30,-4},{-12,-4}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}), graphics));
          end QDotMinCheck;
        end Examples;
      end BaseClasses;

      package Examples
        model NonCondensingControllerMediumModel
          extends Modelica.Icons.Example;
          NonCondensingTanklessHXControllerMediumModel
            nonCondensingTanklessHXControllerMediumModel(redeclare package
              Medium = Buildings.Media.ConstantPropertyLiquidWater,
            T_Set_cons=333.15,
            StopDelay=1)
            annotation (Placement(transformation(extent={{-14,-12},{14,12}})));
          Buildings.Fluid.Sources.Boundary_pT boundary(
            nPorts=1,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=110000,
            T=288.15)
            annotation (Placement(transformation(extent={{-94,-20},{-74,0}})));
          Buildings.Fluid.Sources.Boundary_pT boundary1(
            nPorts=1,
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            p=101325)
            annotation (Placement(transformation(extent={{92,-18},{72,2}})));
          Buildings.Fluid.Actuators.Valves.TwoWayLinear val(
            redeclare package Medium =
                Buildings.Media.ConstantPropertyLiquidWater,
            m_flow_nominal=0.06,
            dpValve_nominal=1,
            l=1e-10,
            riseTime=0.00000001,
            y_start=0)
            annotation (Placement(transformation(extent={{34,-18},{54,2}})));
          Modelica.Blocks.Sources.Constant const annotation (Placement(
                transformation(extent={{-78,-66},{-58,-46}})));
          Modelica.Blocks.Sources.Constant pwrSig(k=1)
            annotation (Placement(transformation(extent={{-94,12},{-74,32}})));
          Modelica.Blocks.Sources.Constant T_Out(k=273.15 + 60)
            annotation (Placement(transformation(extent={{-92,44},{-72,64}})));
          Modelica.Blocks.Sources.Ramp ramp(
            duration=600, height=0.25)
            annotation (Placement(transformation(extent={{10,20},{30,40}})));
        equation
          connect(boundary.ports[1],
            nonCondensingTanklessHXControllerMediumModel.port_a) annotation (
              Line(
              points={{-74,-10},{-36,-10},{-36,-8.352},{-14.4073,-8.352}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(nonCondensingTanklessHXControllerMediumModel.port_b, val.port_a)
            annotation (Line(
              points={{14.5091,-8.352},{24.2546,-8.352},{24.2546,-8},{34,-8}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(val.port_b, boundary1.ports[1]) annotation (Line(
              points={{54,-8},{72,-8}},
              color={0,127,255},
              smooth=Smooth.None));
          connect(const.y, nonCondensingTanklessHXControllerMediumModel.TAmb)
            annotation (Line(
              points={{-57,-56},{-26,-56},{-26,-11.04},{-16.0364,-11.04}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(pwrSig.y, nonCondensingTanklessHXControllerMediumModel.PowerSignal)
            annotation (Line(
              points={{-73,22},{-64,22},{-64,-4.32},{-16.0364,-4.32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(T_Out.y, nonCondensingTanklessHXControllerMediumModel.T_out)
            annotation (Line(
              points={{-71,54},{-56,54},{-56,-0.288},{-16.0364,-0.288}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp.y, val.y) annotation (Line(
              points={{31,30},{44,30},{44,4}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end NonCondensingControllerMediumModel;
      end Examples;
    end Controllers;

    package Examples
      model NonCondensingTanklessExample
        import TanklessWaterHeater = WaterHeatingLibrary.NonCondensingTankless;
        extends Modelica.Icons.Example;

        TanklessWaterHeater.NonCondensingTanklessHeater
          nonCondensingTanklessHeater(t_short=15, t_long=30)
          annotation (Placement(transformation(extent={{10,-22},{56,36}})));
        Modelica.Blocks.Sources.RealExpression Time(y=time)
          annotation (Placement(transformation(extent={{-100,-4},{-80,16}})));
        Modelica.Blocks.Tables.CombiTable1Ds TAmb(
          tableOnFile=true,
          tableName="Ambient",
          columns={2},
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/TanklessWaterHeater/TanklessExampleAmbientTemperature.txt")
          annotation (Placement(transformation(extent={{-60,36},{-40,56}})));
        Modelica.Blocks.Tables.CombiTable1Ds TIn(
          tableOnFile=true,
          columns={2},
          tableName="Inlet",
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/TanklessWaterHeater/TanklessExampleInletTemperature.txt")
          annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
        Modelica.Blocks.Tables.CombiTable1Ds drawPat(
          tableOnFile=true,
          columns={2},
          tableName="Flow",
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/TanklessWaterHeater/TanklessExampleDemandFlowPattern.txt")
          annotation (Placement(transformation(extent={{-60,-16},{-40,4}})));
        Modelica.Blocks.Tables.CombiTable1Ds pwrSig(
          tableOnFile=true,
          tableName="Power",
          columns={2},
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/TanklessWaterHeater/TanklessExamplePowerSignal.txt")
          annotation (Placement(transformation(extent={{-60,-42},{-40,-22}})));
      equation
        connect(Time.y, TIn.u) annotation (Line(
            points={{-79,6},{-70,6},{-70,20},{-62,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y, TAmb.u) annotation (Line(
            points={{-79,6},{-70,6},{-70,46},{-62,46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y, drawPat.u) annotation (Line(
            points={{-79,6},{-70,6},{-70,-6},{-62,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb.y[1], nonCondensingTanklessHeater.AmbientTemperature)
          annotation (Line(
            points={{-39,46},{-18,46},{-18,31.36},{5.4,31.36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TIn.y[1], nonCondensingTanklessHeater.InletTemperature)
          annotation (Line(
            points={{-39,20},{-16.8,20},{-16.8,14.656},{5.4,14.656}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(drawPat.y[1], nonCondensingTanklessHeater.DemandFlowRate)
          annotation (Line(
            points={{-39,-6},{-16,-6},{-16,-1.12},{5.4,-1.12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pwrSig.y[1], nonCondensingTanklessHeater.pwrSig) annotation (Line(
            points={{-39,-32},{-18,-32},{-18,-19.68},{5.4,-19.68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y, pwrSig.u) annotation (Line(
            points={{-79,6},{-70,6},{-70,-32},{-62,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end NonCondensingTanklessExample;

      model StartDelayExample

        extends Modelica.Icons.Example;

        Controllers.BaseClasses.StartDelay
                               startDelay
          annotation (Placement(transformation(extent={{-18,0},{2,20}})));
        Modelica.Blocks.Tables.CombiTable1Ds combiTable1Ds(
          tableOnFile=true,
          tableName="Flow",
          fileName="TanklessExampleDemandFlowPattern.txt")
          annotation (Placement(transformation(extent={{-62,0},{-42,20}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=time)
          annotation (Placement(transformation(extent={{-98,0},{-78,20}})));
      equation
        connect(realExpression.y, combiTable1Ds.u) annotation (Line(
            points={{-77,10},{-64,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTable1Ds.y[1], startDelay.mDotDra) annotation (Line(
            points={{-41,10},{-30.5,10},{-30.5,10},{-20,10}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end StartDelayExample;

      model TanklessValidationJay
        "Tankless model used to validate Jay Burchs work"

        extends Modelica.Icons.Example;

        parameter Real Cap_input = 8360;
        parameter Real SteadyStateEff_input = 0.802;
        parameter Real UA_input = 3.6;
        parameter Real T_Set_input = 54.444;
        parameter Real mdot_min_input = 0.043;
        parameter Real SpecificHeat_input = 4190;
        parameter Real EffPilot_input = 0.8;
        parameter Real Qdot_Pilot_input = 0;
        parameter Real Qdot_Rated_input = 55555;
        parameter Real Qdot_min_input = 5275;
        parameter Real t_short = 3;
        parameter Real t_long = 10;
        parameter Real t_switch = 30;
        parameter Real QAct = 2;
        parameter Real QIdl = 50;

        NonCondSteadyStateIntegrators
          nonCondensingTanklessHeater(
          SteadyStateEff_input=SteadyStateEff_input,
          UA_input=UA_input,
          T_Set_input=T_Set_input,
          mdot_min_input=mdot_min_input,
          SpecificHeat_input=SpecificHeat_input,
          EffPilot_input=EffPilot_input,
          Qdot_Pilot_input=Qdot_Pilot_input,
          Qdot_Rated_input=Qdot_Rated_input,
          Qdot_min_input=Qdot_min_input,
          Capacitance_input=Cap_input,
          nNode_input=10,
          t_short=0,
          t_long=0,
          t_switch=0)
          annotation (Placement(transformation(extent={{20,-12},{66,46}})));
        Modelica.Blocks.Sources.RealExpression Time(y=time)
          annotation (Placement(transformation(extent={{-90,6},{-70,26}})));
        Modelica.Blocks.Tables.CombiTable1Ds TAmb(
          tableOnFile=true,
          tableName="Ambient",
          columns={2},
          fileName="TanklessExampleAmbientTemperature.txt")
          annotation (Placement(transformation(extent={{-50,46},{-30,66}})));
        Modelica.Blocks.Tables.CombiTable1Ds TIn(
          tableOnFile=true,
          columns={2},
          tableName="Inlet",
          fileName="TanklessExampleInletTemperature.txt")
          annotation (Placement(transformation(extent={{-50,20},{-30,40}})));
        Modelica.Blocks.Tables.CombiTable1Ds pwrSig(
          tableOnFile=true,
          tableName="Power",
          columns={2},
          fileName="TanklessExamplePowerSignal.txt")
          annotation (Placement(transformation(extent={{-50,-32},{-30,-12}})));
        Modelica.Blocks.Sources.CombiTimeTable draPat(
          tableOnFile=true,
          tableName="Flow",
          fileName="/home/peter/JayValidation/TanklessExampleDemandFlowPattern.txt")
          annotation (Placement(transformation(extent={{-50,-6},{-30,14}})));
      equation
        connect(Time.y,TIn. u) annotation (Line(
            points={{-69,16},{-60,16},{-60,30},{-52,30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y,TAmb. u) annotation (Line(
            points={{-69,16},{-60,16},{-60,56},{-52,56}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb.y[1],nonCondensingTanklessHeater. AmbientTemperature)
          annotation (Line(
            points={{-29,56},{-8,56},{-8,41.7467},{16.32,41.7467}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TIn.y[1],nonCondensingTanklessHeater. InletTemperature)
          annotation (Line(
            points={{-29,30},{-6.8,30},{-6.8,27.8267},{16.32,27.8267}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pwrSig.y[1],nonCondensingTanklessHeater. pwrSig) annotation (Line(
            points={{-29,-22},{-8,-22},{-8,-0.786667},{16.32,-0.786667}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Time.y,pwrSig. u) annotation (Line(
            points={{-69,16},{-60,16},{-60,-22},{-52,-22}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(draPat.y[1], nonCondensingTanklessHeater.DemandFlowRate) annotation (
            Line(
            points={{-29,4},{-6,4},{-6,14.68},{16.32,14.68}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end TanklessValidationJay;

      model NonCondensingMediumModel
        extends Modelica.Icons.Example;
        NonCondensingTanklessHeaterMediumModel nonCondensingTanklessHeaterMediumModel(
            redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
            mdot_min_input=0.018)
          annotation (Placement(transformation(extent={{-26,-34},{-6,-10}})));
        Modelica.Blocks.Sources.CombiTimeTable TAmb(
          tableOnFile=true,
          tableName="Temp",
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTAmb.txt")
          "Temperature surrounding the system(unit = K)"
          annotation (Placement(transformation(extent={{-96,-12},{-76,8}})));
        Modelica.Blocks.Sources.CombiTimeTable TIn(
          tableOnFile=true,
          tableName="Temp",
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchTIn.txt")
          "Inlet temperature (unit = K)"
          annotation (Placement(transformation(extent={{-96,20},{-76,40}})));
        Modelica.Blocks.Sources.CombiTimeTable pwrSig(
          tableOnFile=true,
          tableName="pwr",
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForExamples/TanklessWithTrunkAndBranchpwr.txt")
          "Power signal (1 = on, 0 = off)"
          annotation (Placement(transformation(extent={{-96,-44},{-76,-24}})));
        Buildings.Fluid.Sources.Boundary_pT boundary(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          nPorts=1,
          p=101325) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={80,-10})));
        Buildings.Fluid.Sources.Boundary_pT boundary1(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          use_T_in=true,
          p=110000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-66,16},{-46,36}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          m_flow_nominal=0.06,
          dpValve_nominal=1,
          l=1e-10,
          riseTime=0.000001,
          y_start=0)
          annotation (Placement(transformation(extent={{46,-20},{66,0}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=600, height=0.125)
          annotation (Placement(transformation(extent={{26,2},{46,22}})));
        HWDis.Components.PipeLumpedCap
                               pip(
          redeclare package Medium =
              Buildings.Media.ConstantPropertyLiquidWater,
          m_flow_nominal=0.06,
          dp_nominal=1,
          thicknessIns=0.1,
          lambdaIns=0.12,
          diameter=0.2,
          length=10,
          MixCoef=0.6)
          annotation (Placement(transformation(extent={{10,-20},{30,0}})));
      equation
        connect(pwrSig.y[1], nonCondensingTanklessHeaterMediumModel.pwrSig)
          annotation (Line(
            points={{-75,-34},{-44,-34},{-44,-33.04},{-28,-33.04}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TAmb.y[1], nonCondensingTanklessHeaterMediumModel.AmbientTemperature)
          annotation (Line(
            points={{-75,-2},{-54,-2},{-54,-15.184},{-28,-15.184}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(TIn.y[1], boundary1.T_in) annotation (Line(
            points={{-75,30},{-68,30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(val.port_b, boundary.ports[1]) annotation (Line(
            points={{66,-10},{70,-10}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(ramp.y, val.y) annotation (Line(
            points={{47,12},{56,12},{56,2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pip.port_b, val.port_a) annotation (Line(
            points={{30,-10},{46,-10}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(boundary1.ports[1], nonCondensingTanklessHeaterMediumModel.colWatIn)
          annotation (Line(
            points={{-46,26},{-34,26},{-34,-50},{-18.4,-50},{-18.4,-34}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(pip.port_a, nonCondensingTanklessHeaterMediumModel.hotWatOut)
          annotation (Line(
            points={{10,-10},{2,-10},{2,-44},{-22,-44},{-22,-34}},
            color={0,127,255},
            smooth=Smooth.None));
          annotation (Line(
            points={{21,-28.624},{28,-28.624},{28,-60},{-96,-60},{-96,18},{-42,18},{-42,
                6}},
            color={0,0,127},
            smooth=Smooth.None),
                    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end NonCondensingMediumModel;

      model CharacterizationModel
        "Model used to identify the parameters describing a given tankless water heater"
        extends Modelica.Icons.Example;

        package Water = Buildings.Media.ConstantPropertyLiquidWater
          "Package used to represent water in the system";

        NonCondensingTanklessHeaterMediumModel nonCon(redeclare package Medium
            = Water,
          T_Set_input=273.15 + 38,
          SteadyStateEff_input=0.85,
          SpecificHeat_input=4186,
          Qdot_Rated_input=58300,
          Qdot_min_input=3200,
          t_short=2,
          t_long=10,
          t_switch=600,
          QAct=60,
          QIdl=3,
          mdot_min_input=0.025,
          StopDelay=5,
          ControlDelay=0.5)
          annotation (Placement(transformation(extent={{52,2},{72,26}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="Data",
          fileName=
              "/home/peter/WaterHeaterModeling/modeling/branches/pgrant/CombinedWaterHeatingLibrary/InputFilesForValidation/Rheem84DVLNEffSSCharacterization.txt",
          columns=2:7)
          annotation (Placement(transformation(extent={{-66,24},{-46,44}})));

        Modelica.Blocks.Sources.Step     const(startTime=500)
          annotation (Placement(transformation(extent={{14,0},{34,20}})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          nPorts=1,
          use_m_flow_in=true,
          use_T_in=true,
          redeclare package Medium = Water)
          annotation (Placement(transformation(extent={{-26,-22},{-6,-2}})));
        Buildings.Fluid.Sources.Boundary_pT bou(nPorts=1, redeclare package
            Medium = Water)                               annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={56,-38})));
      equation
        connect(const.y, nonCon.pwrSig) annotation (Line(
            points={{35,10},{42,10},{42,2.96},{50,2.96}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(boundary.ports[1], nonCon.colWatIn) annotation (Line(
            points={{-6,-12},{59.6,-12},{59.6,2}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(bou.ports[1], nonCon.hotWatOut) annotation (Line(
            points={{56,-28},{56,2}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(combiTimeTable.y[2], boundary.T_in) annotation (Line(
            points={{-45,34},{-38,34},{-38,-8},{-28,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[3], nonCon.AmbientTemperature) annotation (
            Line(
            points={{-45,34},{40,34},{40,20.816},{50,20.816}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(combiTimeTable.y[4], boundary.m_flow_in) annotation (Line(
            points={{-45,34},{-38,34},{-38,-4},{-26,-4}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end CharacterizationModel;
    end Examples;
    annotation (
      conversion(noneFromVersion=""));
  end NonCondensingTankless;

  package CondensingTankless

    package BaseClasses
      model CondHX "Heat exchanger for a condensing tankless water heater"
            extends Modelica.Blocks.Interfaces.BlockIcon;
        parameter Real Capacitance(unit = "J/C") = 8360
          "Thermal capacitance of the heat exchanger";
        parameter Real UA(unit = "W/C") = 3.6
          "Coefficient describing heat loss to ambient conditions";
        parameter Real ConductionCoefficient(unit = "W/C") = 0.1
          "Coefficient characterizing the conduction of heat in the heat exchanger";
        parameter Integer nNode = 10
          "Number of nodes the heat exchanger is broken into";
        parameter Real EffPilot = 0.8 "Efficiency of the pilot light";
        parameter Real Qdot_Pilot(unit = "W") = 0
          "Input heat rate of the pilot light";
        parameter Real Qdot_Rated(unit = "W") = 55555
          "Rated capacity of the main burner";
        parameter Real SpecificHeat(unit = "J/(kg.C)") = 4190
          "Specific heat of the fluid being heated";
        parameter Real T_Set(unit = "C") = 55
          "Set temperature of the tankless heater";
        parameter Real EnergyDensityGas(unit = "W/kg") = 13500;
        Real T_Node[nNode](unit = "C", each start = 12.42);
        Real a[nNode];
        Real b[nNode];
        Real Qdot_Delivered(unit = "W");
        Real Qdot_Env[nNode](unit = "W");
      //  Real Qdot_Environment(unit = "W");
        Real Q_Stored(unit = "J");
        Real AvgTemp(unit = "C");
        Real Qdot_in(unit = "W");
        Real mdot_g(unit = "kg/hr");
        Real Qdot_Stored( unit = "W");
        Real Qdot_Flue(unit = "W");
        Modelica.Blocks.Interfaces.RealInput mdot_water(unit = "kg/s")
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput ControlConstant
                                                            annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={8,-120})));
        Modelica.Blocks.Interfaces.RealOutput T_Out
          annotation (Placement(transformation(extent={{100,-18},{136,18}})));
        Modelica.Blocks.Interfaces.RealInput T_amb
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput T_Inlet
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealOutput Qdot_Environment
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Modelica.Blocks.Interfaces.RealInput SteadyStateEff
                                                 annotation (Placement(
              transformation(extent={{-140,-60},{-100,-20}})));
      equation
      if (nNode > 1) then
        a[1] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
        b[1] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Inlet * nNode + ConductionCoefficient * (T_Node[2] + T_Inlet) * nNode + UA * T_amb);
        a[nNode] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + ConductionCoefficient * nNode + UA);
        b[nNode] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Node[nNode-1] * nNode + ConductionCoefficient * T_Node[nNode-1] * nNode + UA * T_amb);
        for i in 2:nNode - 1 loop
          a[i] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
          b[i] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Node[i-1] * nNode + ConductionCoefficient * (T_Node[i+1] + T_Node[i-1]) * nNode + UA * T_amb);
        end for;
      else
        a[1] = (-1/Capacitance) * (mdot_water * SpecificHeat * nNode + 2 * ConductionCoefficient * nNode + UA);
        b[1] = (1/Capacitance) * (SteadyStateEff * ControlConstant * Qdot_Rated + EffPilot * Qdot_Pilot + mdot_water * SpecificHeat * T_Inlet * nNode + ConductionCoefficient * (T_Out + T_Inlet) * nNode + UA * T_amb);
      end if;
      for i in 1:nNode loop
        der(T_Node[i]) = a[i] * T_Node[i] + b[i];
        Qdot_Env[i] = UA/nNode * (T_Node[i] - T_amb);
      end for;
      Qdot_Environment = sum(Qdot_Env[1:nNode]); //Sums up the environmental losses from all nodes into one cumulative Qdot_Env
      Qdot_in = Qdot_Pilot + Qdot_Rated * ControlConstant;
      T_Out = T_Node[nNode];
      Qdot_Delivered = mdot_water * SpecificHeat * (T_Out - T_Inlet);
      Q_Stored = Capacitance * sum(T_Node[1:nNode])/nNode;
      Qdot_Stored = der(Q_Stored);
      Qdot_Flue = Qdot_in -Qdot_Environment - Qdot_Delivered - Qdot_Stored;
      AvgTemp = sum(T_Node[1:nNode])/nNode;
      if ControlConstant > 0 then
        mdot_g = ControlConstant * Qdot_Rated / EnergyDensityGas;
      else
        mdot_g = 0.001;
      end if;
        annotation (Diagram(graphics), Icon(graphics={Bitmap(extent={{-100,98},{100,-100}},
                  fileName="//vmware-host/Shared Folders/Downloads/HeatExchanger.jpg")}),
                    Diagram(graphics));
      end CondHX;

      model Eff "Identifies the current efficiency of the tankless heater"
          extends Modelica.Blocks.Interfaces.BlockIcon;

          parameter Modelica.SIunits.Temp_C TInSwitch
          "Inlet temperature at which condensing starts";
          parameter Real EffCon "Efficiency when consending";
          parameter Real EffNonCon "Efficiency when not condensing";

        Modelica.Blocks.Interfaces.RealInput TIn(unit = "degC")
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Logical.LessEqual lessEqual
          annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        Modelica.Blocks.Sources.Constant const(k=TInSwitch)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal
          annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{54,-10},{74,10}})));
        Modelica.Blocks.Sources.Constant const1(k=EffNonCon)
          annotation (Placement(transformation(extent={{20,-38},{40,-18}})));
        Modelica.Blocks.Math.Gain gain(k=EffCon - EffNonCon)
          annotation (Placement(transformation(extent={{20,-10},{40,10}})));
      equation
        connect(TIn, lessEqual.u1)    annotation (Line(
            points={{-120,1.11022e-15},{-95,1.11022e-15},{-95,0},{-62,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const.y, lessEqual.u2)    annotation (Line(
            points={{-79,-30},{-72,-30},{-72,-8},{-62,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(lessEqual.y, booleanToReal.u)    annotation (Line(
            points={{-39,0},{-22,0}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(booleanToReal.y, gain.u) annotation (Line(
            points={{1,0},{18,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, add.u2) annotation (Line(
            points={{41,-28},{46,-28},{46,-6},{52,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(gain.y, add.u1) annotation (Line(
            points={{41,4.44089e-16},{48,4.44089e-16},{48,6},{52,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, y) annotation (Line(
            points={{75,0},{110,0}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics));
      end Eff;

      model CondControllerPID
        "Controller for a condensing tankless heater with PID control"

        Modelica.Blocks.Interfaces.RealInput T_out
         annotation (Placement(transformation(extent={{-140,-48},{-100,-8}})));
        Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-66,6},{-46,26}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{-68,44},{-48,64}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{-42,38},{-22,58}})));
        Modelica.Blocks.Interfaces.RealOutput mdot_water_controlled
          annotation (Placement(transformation(extent={{172,44},{202,74}})));
        Modelica.Blocks.Interfaces.RealOutput ControlConstant annotation (Placement(
              transformation(extent={{176,-52},{204,-24}}), iconTransformation(extent={{100,-72},
                  {128,-44}})));
        Modelica.Blocks.Math.Product product2
          annotation (Placement(transformation(extent={{46,50},{66,70}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal
          annotation (Placement(transformation(extent={{-22,70},{-2,90}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal1
          annotation (Placement(transformation(extent={{22,38},{42,58}})));
        Modelica.Blocks.Continuous.LimPID
                                       PID(
          y_start=PID_y_start,
          k=PID_k,
          Ti=PID_I,
          Td=PID_D,
          yMax=1,
          yMin=0,
          controllerType=Modelica.Blocks.Types.SimpleController.PID,
          Ni=0.9)
          annotation (Placement(transformation(extent={{-16,-36},{4,-16}})));
        Modelica.Blocks.Math.Product product3
          annotation (Placement(transformation(extent={{74,-42},{94,-22}})));
        CondensingHighFlowControl
                        FlowRateControl(
          Qdot_Rated=Qdot_Rated_cons,
          SpecificHeat=SpecificHeat_cons,
          T_Set=T_Set_cons)
          annotation (Placement(transformation(extent={{20,-8},{40,12}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual
          annotation (Placement(transformation(extent={{-56,76},{-36,96}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual1
          annotation (Placement(transformation(extent={{-8,26},{12,46}})));
        Modelica.Blocks.Interfaces.RealInput mdot_water
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Sources.RealExpression mdot_min(y=mdot_min_cons)
          annotation (Placement(transformation(extent={{-94,66},{-74,86}})));
       parameter Real mdot_min_cons(unit = "kg/s") = 0.252
          "Minimum flow rate of the tankless heater";
       parameter Real Qdot_min_cons(unit = "W") = 5275
          "Minimum heat rate of the tankless heater";
       parameter Real T_Set_cons(unit = "C") = 55 "Set Temperature";
       parameter Real SpecificHeat_cons(unit = "J/(kg.C)") = 4190
          "Specific heat of the fluid being heated";
       parameter Real Qdot_Rated_cons(unit = "W") = 55555
          "Raed heat input rate of the tankless heater";
       parameter Real PID_k = 1;
       parameter Real PID_I = 1;
       parameter Real PID_D = 1;
       parameter Real PID_y_start = 0.666;
       parameter Modelica.SIunits.Time t_short = 1.5
          "Start delay with a short time between draws";
       parameter Modelica.SIunits.Time t_long = 3
          "Start delay with a long time between draws";
       parameter Modelica.SIunits.Time t_switch = 30
          "Time between draws required for t_long";
       parameter Real QAct = 50
          "Electric power consumed when the fan is operating";
       parameter Real QIdl = 15
          "Electric power consumed when the fan is not operating";
        Modelica.Blocks.Sources.RealExpression SpecificHeat(y=SpecificHeat_cons)
          annotation (Placement(transformation(extent={{-98,20},{-78,40}})));
        Modelica.Blocks.Sources.RealExpression T_Set(y=T_Set_cons)
          annotation (Placement(transformation(extent={{-98,-24},{-78,-4}})));
        Modelica.Blocks.Sources.RealExpression Qdot_min(y=Qdot_min_cons)
          annotation (Placement(transformation(extent={{-38,6},{-18,26}})));
        Modelica.Blocks.Math.Min min
          annotation (Placement(transformation(extent={{20,-42},{40,-22}})));
        Modelica.Blocks.Sources.RealExpression ControlConstantMaximum(y=1)
          annotation (Placement(transformation(extent={{-18,-60},{2,-40}})));
        Modelica.Blocks.Math.Max max
          annotation (Placement(transformation(extent={{48,-48},{68,-28}})));
        Modelica.Blocks.Sources.RealExpression ControlConstantMinimum(y=0)
          annotation (Placement(transformation(extent={{20,-70},{40,-50}})));
        Modelica.Blocks.Interfaces.RealInput T_Inlet
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput PowerSignal
          annotation (Placement(transformation(extent={{-140,-90},{-100,-50}})));
        Modelica.Blocks.Math.Product product4
          annotation (Placement(transformation(extent={{110,-48},{130,-28}})));
        NonCondensingTankless.Controllers.BaseClasses.StartDelay
                   startDelay(
          t_short=t_short,
          t_long=t_long,
          t_switch=t_switch)
          annotation (Placement(transformation(extent={{76,-96},{96,-76}})));
        Modelica.Blocks.Math.Product product5
          annotation (Placement(transformation(extent={{140,-84},{160,-64}})));
        Modelica.Blocks.Math.Product product6
          annotation (Placement(transformation(extent={{106,-116},{126,-96}})));
        Modelica.Blocks.Sources.Constant QFan(k=QAct)
          annotation (Placement(transformation(extent={{34,-112},{54,-92}})));
        Modelica.Blocks.Sources.Constant QCon(k=QIdl)
          annotation (Placement(transformation(extent={{34,-144},{54,-124}})));
        Modelica.Blocks.Interfaces.RealOutput QElec
          annotation (Placement(transformation(extent={{176,-122},{196,-102}})));
        Modelica.Blocks.Math.Max max1
          annotation (Placement(transformation(extent={{138,-122},{158,-102}})));
        Modelica.Blocks.Interfaces.RealInput SteadyStateEff_cons
          annotation (Placement(transformation(extent={{-140,-140},{-100,-100}})));
      equation
        connect(T_Set.y, add.u2) annotation (Line(
            points={{-77,-14},{-68,-14},{-68,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, product1.u1) annotation (Line(
            points={{-47,54},{-44,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, product1.u2) annotation (Line(
            points={{-45,16},{-44,16},{-44,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(booleanToReal1.y, product2.u2) annotation (Line(
            points={{43,48},{44,48},{44,54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(booleanToReal.y, product2.u1) annotation (Line(
            points={{-1,80},{22,80},{22,66},{44,66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.u1, product2.y) annotation (Line(
            points={{72,-26},{72,60},{67,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FlowRateControl.mdot_water_controlled, mdot_water_controlled)
          annotation (Line(
            points={{41.9,8.1},{126.95,8.1},{126.95,59},{187,59}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(greaterEqual.y, booleanToReal.u) annotation (Line(
            points={{-35,86},{-30,86},{-30,80},{-24,80}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(greaterEqual1.y, booleanToReal1.u) annotation (Line(
            points={{13,36},{16,36},{16,48},{20,48}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(product1.y, greaterEqual1.u1) annotation (Line(
            points={{-21,48},{-16,48},{-16,36},{-10,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Qdot_min.y, greaterEqual1.u2) annotation (Line(
            points={{-17,16},{-10,16},{-10,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product1.y,FlowRateControl. Qdot_Required) annotation (Line(
            points={{-21,48},{-20,48},{-20,34},{-40,34},{-40,8},{18,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, product.u1) annotation (Line(
            points={{-120,60},{-70,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, greaterEqual.u1) annotation (Line(
            points={{-120,60},{-100,60},{-100,86},{-58,86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water,FlowRateControl. mdot_water) annotation (Line(
            points={{-120,60},{-99,60},{-99,0},{18,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_min.y, greaterEqual.u2) annotation (Line(
            points={{-73,76},{-66,76},{-66,78},{-58,78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SpecificHeat.y, product.u2) annotation (Line(
            points={{-77,30},{-74,30},{-74,48},{-70,48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PID.y, min.u1) annotation (Line(
            points={{5,-26},{8,-26},{8,-32},{12,-32},{12,-26},{18,-26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ControlConstantMaximum.y, min.u2) annotation (Line(
            points={{3,-50},{10,-50},{10,-38},{18,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(min.y, max.u1) annotation (Line(
            points={{41,-32},{42,-32},{42,-38},{44,-38},{44,-32},{46,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max.y, product3.u2) annotation (Line(
            points={{69,-38},{70,-38},{70,-38},{72,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ControlConstantMinimum.y, max.u2) annotation (Line(
            points={{41,-60},{42,-60},{42,-44},{46,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Inlet, add.u1) annotation (Line(
            points={{-120,20},{-94,20},{-94,22},{-68,22}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Inlet, FlowRateControl.T_Inlet) annotation (Line(
            points={{-120,20},{-94,20},{-94,4},{18,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PowerSignal, FlowRateControl.PowerSignal) annotation (Line(
            points={{-120,-70},{-40,-70},{-40,-4},{18,-4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PowerSignal, product4.u2) annotation (Line(
            points={{-120,-70},{94,-70},{94,-44},{108,-44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product3.y, product4.u1) annotation (Line(
            points={{95,-32},{108,-32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_Set.y, PID.u_s) annotation (Line(
            points={{-77,-14},{-30,-14},{-30,-26},{-18,-26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T_out, PID.u_m) annotation (Line(
            points={{-120,-28},{-30,-28},{-30,-44},{-6,-44},{-6,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(mdot_water, startDelay.mDotDra) annotation (Line(
            points={{-120,60},{-98,60},{-98,-86},{74,-86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product5.u2) annotation (Line(
            points={{97,-86},{120,-86},{120,-80},{138,-80}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product4.y, product5.u1) annotation (Line(
            points={{131,-38},{132,-38},{132,-68},{138,-68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product5.y, ControlConstant) annotation (Line(
            points={{161,-74},{164,-74},{164,-38},{190,-38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(startDelay.y, product6.u1) annotation (Line(
            points={{97,-86},{100,-86},{100,-100},{104,-100}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QFan.y, product6.u2) annotation (Line(
            points={{55,-102},{80,-102},{80,-112},{104,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product6.y, max1.u1) annotation (Line(
            points={{127,-106},{136,-106}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QCon.y, max1.u2) annotation (Line(
            points={{55,-134},{124,-134},{124,-118},{136,-118}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(QElec, QElec) annotation (Line(
            points={{186,-112},{186,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max1.y, QElec) annotation (Line(
            points={{159,-112},{186,-112}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SteadyStateEff_cons, FlowRateControl.SteadyStateEff) annotation (Line(
            points={{-120,-120},{-36,-120},{-36,-8},{18,-8}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false,extent={{-100,-150},{175,
                  100}}),
                  graphics),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-150},{175,100}}),
               graphics={Bitmap(extent={{-100,96},{100,-98}}, fileName=
                    "//vmware-host/Shared Folders/Downloads/ControlModule.jpg")}));
      end CondControllerPID;

      block CondensingHighFlowControl
        "Checks to determine whether or not the heater is able to provide enough heat to meet setpoint at the desired flow rate. Reduces the flow rate as necessary to meet T_set"
      parameter Real Qdot_Rated = 52.752;
      parameter Real SpecificHeat = 4.19;
      parameter Real T_Set = 55;
        Modelica.Blocks.Interfaces.RealInput Qdot_Required
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealOutput mdot_water_controlled
          annotation (Placement(transformation(extent={{100,42},{138,80}})));
        Modelica.Blocks.Interfaces.RealInput mdot_water
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput T_Inlet
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput PowerSignal
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput SteadyStateEff annotation (
            Placement(transformation(extent={{-140,-120},{-100,-80}})));
      equation
      if ((Qdot_Required > SteadyStateEff * Qdot_Rated) and (PowerSignal > 0)) then
        mdot_water_controlled = (SteadyStateEff * Qdot_Rated) / (SpecificHeat * (T_Set - T_Inlet));
      else
        mdot_water_controlled = mdot_water;
      end if;
        annotation (Icon(graphics={   Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
                extent={{-80,80},{78,-64}},
                lineColor={0,0,255},
                textString="High Flow
Rate Control")}),                               Diagram(graphics));
      end CondensingHighFlowControl;

      package Examples
        model Eff
          import WaterHeatingLibrary;
        extends Modelica.Icons.Example;

          WaterHeatingLibrary.CondensingTankless.BaseClasses.Eff eff(
            EffCon=0.95,
            EffNonCon=0.8,
            TInSwitch=35)
            annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
          Modelica.Blocks.Sources.Ramp ramp(
            height=100,
            duration=100,
            offset=0)
            annotation (Placement(transformation(extent={{-72,-10},{-52,10}})));
        equation
          connect(ramp.y, eff.TIn) annotation (Line(
              points={{-51,0},{-14,0}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end Eff;

        model CondHighFlowControl
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          CondensingHighFlowControl condensingHighFlowControl
            annotation (Placement(transformation(extent={{42,-10},{100,40}})));
          WaterHeatingLibrary.CondensingTankless.BaseClasses.Eff eff(
            EffCon=0.95,
            EffNonCon=0.8,
            TInSwitch=313.15)
            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));
          Modelica.Blocks.Sources.Constant const(k=1)
            annotation (Placement(transformation(extent={{-68,-28},{-48,-8}})));
          Modelica.Blocks.Sources.Constant const1(k=55)
            annotation (Placement(transformation(extent={{-70,46},{-50,66}})));
          Modelica.Blocks.Sources.Ramp ramp(
            duration=100,
            offset=0,
            height=55)
            annotation (Placement(transformation(extent={{-100,-18},{-80,2}})));
          Modelica.Blocks.Sources.Constant const2(k=0.6)
            annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
          Modelica.Blocks.Sources.Constant const3(k=4.19)
            annotation (Placement(transformation(extent={{-72,74},{-52,94}})));
          Modelica.Blocks.Math.Add add(k2=-1)
            annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
          Modelica.Blocks.Math.MultiProduct multiProduct(nu=3)
            annotation (Placement(transformation(extent={{4,66},{16,78}})));
          Modelica.Blocks.Math.Add add1 annotation (Placement(transformation(
                  extent={{-66,-58},{-46,-38}})));
          Modelica.Blocks.Sources.Constant const4(k=273.15) annotation (
              Placement(transformation(extent={{-100,-64},{-80,-44}})));
        equation
          connect(eff.y, condensingHighFlowControl.SteadyStateEff) annotation (
              Line(
              points={{1,-40},{20,-40},{20,-10},{36.2,-10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const.y, condensingHighFlowControl.PowerSignal) annotation (
              Line(
              points={{-47,-18},{-34,-18},{-34,0},{36.2,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp.y, condensingHighFlowControl.T_Inlet) annotation (Line(
              points={{-79,-8},{-70,-8},{-70,20},{36.2,20}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const2.y, condensingHighFlowControl.mdot_water) annotation (
              Line(
              points={{-39,10},{36.2,10}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const1.y, add.u1) annotation (Line(
              points={{-49,56},{-42,56}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp.y, add.u2) annotation (Line(
              points={{-79,-8},{-70,-8},{-70,38},{-48,38},{-48,44},{-42,44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const3.y, multiProduct.u[1]) annotation (Line(
              points={{-51,84},{-4,84},{-4,74.8},{4,74.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, multiProduct.u[2]) annotation (Line(
              points={{-19,50},{-2,50},{-2,72},{4,72}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const2.y, multiProduct.u[3]) annotation (Line(
              points={{-39,10},{-8,10},{-8,69.2},{4,69.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(multiProduct.y, condensingHighFlowControl.Qdot_Required)
            annotation (Line(
              points={{17.02,72},{18,72},{18,30},{36.2,30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.y, eff.TIn) annotation (Line(
              points={{-45,-48},{-30,-48},{-30,-40},{-22,-40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(ramp.y, add1.u1) annotation (Line(
              points={{-79,-8},{-74,-8},{-74,-42},{-68,-42}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const4.y, add1.u2) annotation (Line(
              points={{-79,-54},{-68,-54}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end CondHighFlowControl;

        model CondControllerPID
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.CondensingTankless.BaseClasses.CondControllerPID
            condControllerPID(mdot_min_cons=0.04)
            annotation (Placement(transformation(extent={{-8,0},{68,70}})));
          WaterHeatingLibrary.CondensingTankless.BaseClasses.Eff eff(
            TInSwitch=313.15,
            EffCon=0.95,
            EffNonCon=0.8) annotation (Placement(transformation(extent={{-44,
                    -40},{-24,-20}})));
          Modelica.Blocks.Sources.Constant const(k=1)
            annotation (Placement(transformation(extent={{-64,-12},{-44,8}})));
          Modelica.Blocks.Sources.Ramp TOut(
            duration=100,
            offset=20,
            height=35)
            annotation (Placement(transformation(extent={{-64,18},{-44,38}})));
          Modelica.Blocks.Sources.Constant const2(k=0.18)
            annotation (Placement(transformation(extent={{-88,62},{-68,82}})));
          Modelica.Blocks.Sources.Ramp TIn(
            duration=100,
            offset=20,
            startTime=200,
            height=35)
            annotation (Placement(transformation(extent={{-100,-12},{-80,8}})));
          Modelica.Blocks.Math.Add add annotation (Placement(transformation(
                  extent={{-72,-40},{-52,-20}})));
          Modelica.Blocks.Sources.Constant const1(k=273.15) annotation (
              Placement(transformation(extent={{-100,-46},{-80,-26}})));
        equation
          connect(eff.y, condControllerPID.SteadyStateEff_cons) annotation (
              Line(
              points={{-23,-30},{-20,-30},{-20,8.4},{-13.5273,8.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TIn.y, condControllerPID.T_Inlet) annotation (Line(
              points={{-79,-2},{-68,-2},{-68,47.6},{-13.5273,47.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const.y, condControllerPID.PowerSignal) annotation (Line(
              points={{-43,-2},{-34,-2},{-34,22.4},{-13.5273,22.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TOut.y, condControllerPID.T_out) annotation (Line(
              points={{-43,28},{-34,28},{-34,34.16},{-13.5273,34.16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const2.y, condControllerPID.mdot_water) annotation (Line(
              points={{-67,72},{-34,72},{-34,58.8},{-13.5273,58.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, eff.TIn) annotation (Line(
              points={{-51,-30},{-46,-30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TIn.y, add.u1) annotation (Line(
              points={{-79,-2},{-74,-2},{-74,-24}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const1.y, add.u2) annotation (Line(
              points={{-79,-36},{-74,-36}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end CondControllerPID;

        model CondHX
          import WaterHeatingLibrary;
          extends Modelica.Icons.Example;
          WaterHeatingLibrary.CondensingTankless.BaseClasses.CondHX condHX
            annotation (Placement(transformation(extent={{46,0},{70,24}})));
          Modelica.Blocks.Sources.Constant const(k=0.5)
            annotation (Placement(transformation(extent={{34,-38},{54,-18}})));
          Modelica.Blocks.Sources.Constant const1(k=0.9)
            annotation (Placement(transformation(extent={{-16,-14},{4,6}})));
          Modelica.Blocks.Sources.Constant const2(k=0.18)
            annotation (Placement(transformation(extent={{-40,2},{-20,22}})));
          Modelica.Blocks.Sources.Constant const3(k=15)
            annotation (Placement(transformation(extent={{-16,18},{4,38}})));
          Modelica.Blocks.Sources.Constant const4(k=20)
            annotation (Placement(transformation(extent={{-40,34},{-20,54}})));
        equation
          connect(const.y, condHX.ControlConstant) annotation (Line(
              points={{55,-28},{58.96,-28},{58.96,-2.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const1.y, condHX.SteadyStateEff) annotation (Line(
              points={{5,-4},{34,-4},{34,7.2},{43.6,7.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const2.y, condHX.mdot_water) annotation (Line(
              points={{-19,12},{43.6,12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const3.y, condHX.T_Inlet) annotation (Line(
              points={{5,28},{12,28},{12,16.8},{43.6,16.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(const4.y, condHX.T_amb) annotation (Line(
              points={{-19,44},{34,44},{34,21.6},{43.6,21.6}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end CondHX;
      end Examples;
    end BaseClasses;

    package Examples
      model CondensingTankless "Model of a condensing tankless water heater"
        extends Modelica.Icons.Example;
        BaseClasses.CondHX condHX(T_Set=55)
          annotation (Placement(transformation(extent={{-4,-12},{34,26}})));
        BaseClasses.Eff eff(
          EffCon=0.95,
          EffNonCon=0.8,
          TInSwitch=45)
          annotation (Placement(transformation(extent={{-46,-28},{-26,-8}})));
        Modelica.Blocks.Sources.Ramp ramp(
          duration=100,
          offset=20,
          height=35)
          annotation (Placement(transformation(extent={{-76,-28},{-56,-8}})));
        BaseClasses.CondControllerPID condControllerPID(mdot_min_cons=0.04,
            T_Set_cons=55)
          annotation (Placement(transformation(extent={{-10,-74},{16,-48}})));
        Modelica.Blocks.Sources.Constant const(k=20)
          annotation (Placement(transformation(extent={{-86,28},{-66,48}})));
        Modelica.Blocks.Sources.Constant const1(k=1)
          annotation (Placement(transformation(extent={{-88,-92},{-68,-72}})));
        Modelica.Blocks.Sources.Constant const2(k=0.18)
          annotation (Placement(transformation(extent={{-88,-62},{-68,-42}})));
      equation
        connect(ramp.y, eff.TIn) annotation (Line(
            points={{-55,-18},{-48,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(condControllerPID.ControlConstant, condHX.ControlConstant)
          annotation (Line(
            points={{10.2327,-64.432},{46,-64.432},{46,-24},{16.52,-24},{16.52,
                -15.8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(condControllerPID.mdot_water_controlled, condHX.mdot_water)
          annotation (Line(
            points={{17.1345,-52.264},{22,-52.264},{22,-36},{-86,-36},{-86,7},{
                -7.8,7}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ramp.y, condHX.T_Inlet) annotation (Line(
            points={{-55,-18},{-52,-18},{-52,14.6},{-7.8,14.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const.y, condHX.T_amb) annotation (Line(
            points={{-65,38},{-20,38},{-20,22.2},{-7.8,22.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(condControllerPID.T_Inlet, ramp.y) annotation (Line(
            points={{-11.8909,-56.32},{-52,-56.32},{-52,-18},{-55,-18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(eff.y, condControllerPID.SteadyStateEff_cons) annotation (Line(
            points={{-25,-18},{-20,-18},{-20,-70.88},{-11.8909,-70.88}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(condHX.T_Out, condControllerPID.T_out) annotation (Line(
            points={{37.42,7},{62,7},{62,-82},{-22,-82},{-22,-61.312},{-11.8909,
                -61.312}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const1.y, condControllerPID.PowerSignal) annotation (Line(
            points={{-67,-82},{-26,-82},{-26,-65.68},{-11.8909,-65.68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(const2.y, condControllerPID.mdot_water) annotation (Line(
            points={{-67,-52},{-39.4455,-52},{-39.4455,-52.16},{-11.8909,-52.16}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(eff.y, condHX.SteadyStateEff) annotation (Line(
            points={{-25,-18},{-20,-18},{-20,-0.6},{-7.8,-0.6}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),      graphics));
      end CondensingTankless;
    end Examples;
  end CondensingTankless;
  annotation (uses(Modelica(version="3.2"), Buildings(version="1.4"),
      TanklessWaterHeater(version="1")));
end WaterHeatingLibrary;
